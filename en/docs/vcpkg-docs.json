[
    {
        "Path":  "/en/docs/index.html",
        "Name":  "index",
        "Source":  "\u003ch3 id=\"quick-start\"\u003eQuick Start\u003c/h3\u003e\n\u003cp\u003eVcpkg helps you manage C and C++ libraries on Windows, Linux and MacOS. This tool and ecosystem are constantly evolving; your involvement are vital to its success!\u003c/p\u003e\n\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"examples/installing-and-using-packages.md\"\u003eInstalling and Using Packages Example: sqlite\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"examples/packaging-zipfiles.md\"\u003ePackaging Zipfiles Example: zlib\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"examples/packaging-github-repos.md\"\u003ePackaging GitHub Repositories Example: libogg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"examples/patching.md\"\u003ePatching Example: Patching libpng to work for x86-uwp\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"user-help\"\u003eUser Help\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"users/integration.md\"\u003eIntegration with build systems\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"users/triplets.md\"\u003eTriplet files\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"users/config-environment.md\"\u003eConfiguration and Environment\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"users/android.md\"\u003eUsage with Android\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"users/manifests.md\"\u003eUsing a manifest file to declare your dependencies\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"maintainer-help\"\u003eMaintainer help\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"maintainers/control-files.md\"\u003eControl files\u003c/a\u003e - in general, one should use manifest files instead\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"maintainers/manifest-files.md\"\u003eManifest files\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"maintainers/portfile-functions.md\"\u003ePortfile functions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"maintainers/maintainer-guide.md\"\u003eMaintainer Guidelines\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"tool-maintainer-help\"\u003eTool Maintainer Help\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"tool-maintainers/testing.md\"\u003eTesting\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"tool-maintainers/benchmarking.md\"\u003eBenchmarking\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"tool-maintainers/layout.md\"\u003eLayout of the vcpkg source tree\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"maintainers/maintainer-guide.md\"\u003eMaintainer Guidelines\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"community-resources-not-directly-affiliated-with-vcpkg\"\u003eCommunity Resources (not directly affiliated with vcpkg)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://vcpkg.info/\"\u003evcpkg.info\u003c/a\u003e - Package index + search\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://vcpkgx.com/\"\u003evcpkgx\u003c/a\u003e - Package index + search\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"specifications\"\u003eSpecifications\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"specifications/export-command.md\"\u003eExport\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"specifications/feature-packages.md\"\u003eFeature Packages\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"blog-posts\"\u003eBlog posts\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://blogs.msdn.microsoft.com/vcblog/2018/04/24/announcing-a-single-c-library-manager-for-linux-macos-and-windows-vcpkg/\"\u003eAnnouncing a single C++ library manager for Linux, macOS and Windows: Vcpkg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blogs.msdn.microsoft.com/vcblog/2017/10/23/vcpkg-using-multiple-enlistments/\"\u003eVcpkg: Using multiple enlistments to handle multiple versions of a library\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blogs.msdn.microsoft.com/vcblog/2017/05/03/vcpkg-introducing-export-command/\"\u003eVcpkg: introducing the export command\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blogs.msdn.microsoft.com/vcblog/2017/03/07/binary-compatibility-and-pain-free-upgrade-why-moving-to-visual-studio-2017-is-almost-too-easy/\"\u003eBinary Compatibility and Pain-free Upgrade Why Moving to Visual Studio 2017 is almost \"too easy\"\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blogs.msdn.microsoft.com/vcblog/2017/02/14/vcpkg-recent-enhancements/\"\u003eVcpkg recent enhancements\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blogs.msdn.microsoft.com/vcblog/2017/01/11/vcpkg-3-months-anniversary-survey/\"\u003eVcpkg 3 Months Anniversary, Survey\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blogs.msdn.microsoft.com/vcblog/2016/11/01/vcpkg-updates-static-linking-is-now-available/\"\u003eVcpkg updates: Static linking is now available\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blogs.msdn.microsoft.com/vcblog/2016/09/19/vcpkg-a-tool-to-acquire-and-build-c-open-source-libraries-on-windows/\"\u003eVcpkg: a tool to acquire and build C++ open source libraries on Windows\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"other\"\u003eOther\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"about/faq.md\"\u003eFAQ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"about/privacy.md\"\u003ePrivacy\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
        "Nav":  "#"
    },
    {
        "Path":  "/en/docs/about/faq.html",
        "Name":  "faq",
        "Source":  "\u003ch1 id=\"frequently-asked-questions\"\u003eFrequently Asked Questions\u003c/h1\u003e\n\u003ch2 id=\"can-i-contribute-a-new-library\"\u003eCan I contribute a new library?\u003c/h2\u003e\n\u003cp\u003eYes! Start out by reading our \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/CONTRIBUTING.md\"\u003econtribution guidelines\u003c/a\u003e.\u003cbr /\u003e\nIf you want to contribute but don\u0027t have a particular library in mind then take a look at the list\u003cbr /\u003e\nof \u003ca href=\"https://github.com/Microsoft/vcpkg/issues?q=is%3Aissue+is%3Aopen+label%3Acategory%3Anew-port\"\u003enew port requests\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"can-vcpkg-create-pre-built-binary-packages-what-is-the-binary-format-used-by-vcpkg\"\u003eCan Vcpkg create pre-built binary packages? What is the binary format used by Vcpkg?\u003c/h2\u003e\n\u003cp\u003eYes! See \u003ca href=\"../users/integration.md#export\"\u003ethe \u003ccode\u003eexport\u003c/code\u003e command\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"how-do-i-update-libraries\"\u003eHow do I update libraries?\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003evcpkg update\u003c/code\u003e command lists all packages which are out-of-sync with your current portfiles. To update a package, follow the instructions in the command.\u003c/p\u003e\n\u003ch2 id=\"how-do-i-get-more-libraries\"\u003eHow do I get more libraries?\u003c/h2\u003e\n\u003cp\u003eThe list of libraries is enumerated from the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports\"\u003e\u003ccode\u003eports\u0026lt;/code\u0026gt;\u003c/a\u003e directory. By design, you can add and remove libraries from this directory as you see fit for yourself or your company -- see our examples on packaging \u003ca href=\"../examples/packaging-zipfiles.md\"\u003ezipfiles\u003c/a\u003e and \u003ca href=\"../examples/packaging-github-repos.md\"\u003eGitHub repos\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe recommend cloning directly from \u003ca href=\"https://github.com/microsoft/vcpkg\"\u003eGitHub\u003c/a\u003e and using \u003ccode\u003egit pull\u003c/code\u003e to update the list of portfiles. Once you\u0027ve updated your portfiles, \u003ccode\u003evcpkg update\u003c/code\u003e will indicate any installed libraries that are now out of date.\u003c/p\u003e\n\u003ch2 id=\"can-i-build-a-private-library-with-this-tool\"\u003eCan I build a private library with this tool?\u003c/h2\u003e\n\u003cp\u003eYes. Follow \u003ca href=\"../examples/packaging-zipfiles.md\"\u003eour packaging zlib Example\u003c/a\u003e for creating a portfile using a fake URL. Then, either pre-seed the \u003ccode\u003edownloads\u0026lt;/code\u0026gt; folder with a zip containing your private sources or replace the normal calls to \u003ccode\u003evcpkg_download_distfile\u003c/code\u003e and \u003ccode\u003evcpkg_extract_source_archive\u003c/code\u003e with functions that unpack your source code.\u003c/p\u003e\n\u003ch2 id=\"can-i-use-a-prebuilt-private-library-with-this-tool\"\u003eCan I use a prebuilt private library with this tool?\u003c/h2\u003e\n\u003cp\u003eYes. The \u003ccode\u003eportfile.cmake\u003c/code\u003e for a library is fundamentally a script that places the headers and binaries into the correct arrangement in the \u003ccode\u003e${CURRENT_PACKAGES_DIR}\u003c/code\u003e, so to pull in prebuilt binaries you can write a portfile which directly downloads and arranges the files.\u003c/p\u003e\n\u003cp\u003eTo see an example of this, look at \u003ca href=\"https://github.com/microsoft/vcpkg/blob/master/ports/opengl/portfile.cmake\"\u003e\u003ccode\u003eports\\opengl\\portfile.cmake\u003c/code\u003e\u003c/a\u003e which simply copies files out of the Windows SDK.\u003c/p\u003e\n\u003ch2 id=\"which-platforms-i-can-target-with-vcpkg\"\u003eWhich platforms I can target with Vcpkg?\u003c/h2\u003e\n\u003cp\u003eWe currently target Windows Desktop (x86 and x64) as well as the Universal Windows Platform (x86, x64, and ARM). See \u003ccode\u003evcpkg help triplet\u003c/code\u003e for the current list.\u003c/p\u003e\n\u003ch2 id=\"does-vcpkg-run-on-linuxosx\"\u003eDoes Vcpkg run on Linux/OSX?\u003c/h2\u003e\n\u003cp\u003eYes! We continuously test on OSX and Ubuntu 16.04, however we know users have been successful with Arch, Fedora, and FreeBSD. If you have trouble with your favorite Linux distribution, let us know in an issue and we\u0027d be happy to help!\u003c/p\u003e\n\u003ch2 id=\"how-do-i-use-different-versions-of-a-library-on-one-machine\"\u003eHow do I use different versions of a library on one machine?\u003c/h2\u003e\n\u003cp\u003eWithin a single instance of Vcpkg (e.g. one set of \u003ccode\u003einstalled\u0026lt;/code\u0026gt;, \u003ccode\u003epackages\u0026lt;/code\u0026gt;, \u003ccode\u003eports\u0026lt;/code\u0026gt; and so forth), you can only have one version of a library installed (otherwise, the headers would conflict with each other!). For those with experience with system-wide package managers, packages in Vcpkg correspond to the \u003ccode\u003eX-dev\u003c/code\u003e or \u003ccode\u003eX-devel\u003c/code\u003e packages.\u003c/p\u003e\n\u003cp\u003eTo use different versions of a library for different projects, we recommend making separate instances of Vcpkg and using the \u003ca href=\"../users/integration.md\"\u003eper-project integration mechanisms\u003c/a\u003e. The versions of each library are specified by the files in \u003ccode\u003eports\u0026lt;/code\u0026gt;, so they are easily manipulated using standard \u003ccode\u003egit\u003c/code\u003e commands. This makes it very easy to roll back the entire set of libraries to a consistent set of older versions which all work with each other. If you need to then pin a specific library forward, that is as easy as checking out the appropriate version of \u003ccode\u003eports\u0026amp;lt;package\u0026amp;gt;\u0026lt;/code\u0026gt;.\u003c/p\u003e\n\u003cp\u003eIf your application is very sensitive to the versions of libraries, we recommend checking in the specific set of portfiles you need into your source control along with your project sources and using the \u003ccode\u003e--vcpkg-root\u003c/code\u003e option to redirect the working directory of \u003ccode\u003evcpkg.exe\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"how-does-vcpkg-protect-my-privacy\"\u003eHow does Vcpkg protect my privacy?\u003c/h2\u003e\n\u003cp\u003eSee the \u003ca href=\"privacy.md\"\u003ePrivacy document\u003c/a\u003e for all information regarding privacy.\u003c/p\u003e\n\u003ch2 id=\"can-i-use-my-own-cmake-toolchain-file-with-vcpkgs-toolchain-file\"\u003eCan I use my own CMake toolchain file with Vcpkg\u0027s toolchain file?\u003c/h2\u003e\n\u003cp\u003eYes. If you already have a CMake toolchain file, you will need to include our toolchain file at the end of yours. This should be as simple as an \u003ccode\u003einclude(\u0026lt;vcpkg_root\u0026gt;\\scripts\\buildsystems\\vcpkg.cmake)\u003c/code\u003e directive. Alternatively, you could copy the contents of our \u003ccode\u003escripts\\buildsystems\\vcpkg.cmake\u003c/code\u003e into the end of your existing toolchain file.\u003c/p\u003e\n\u003ch2 id=\"can-i-use-my-ownspecific-flags-for-rebuilding-libs\"\u003eCan I use my own/specific flags for rebuilding libs?\u003c/h2\u003e\n\u003cp\u003eYes. In the current version, there is not yet a standardized global way to change them, however you can edit individual portfiles and tweak the exact build process however you\u0027d like.\u003c/p\u003e\n\u003cp\u003eBy saving the changes to the portfile (and checking them in), you\u0027ll get the same results even if you\u0027re rebuilding from scratch in the future and forgot what exact settings you used.\u003c/p\u003e\n\u003ch2 id=\"can-i-get-vcpkg-integration-for-custom-configurations\"\u003eCan I get Vcpkg integration for custom configurations?\u003c/h2\u003e\n\u003cp\u003eYes. While Vcpkg will only produce the standard \"Release\" and \"Debug\" configurations when building a library, you can get integration support for your projects\u0027 custom configurations, in addition to your project\u0027s standard configurations.\u003c/p\u003e\n\u003cp\u003eFirst of all, Vcpkg will automatically assume any custom configuration starting with \"Release\" (resp. \"Debug\") as a configuration that is compatible with the standard \"Release\" (resp. \"Debug\") configuration and will act accordingly.\u003c/p\u003e\n\u003cp\u003eFor other configurations, you only need to override the MSBuild \u003ccode\u003e$(VcpkgConfiguration)\u003c/code\u003e macro in your project file (.vcxproj) to declare the compatibility between your configuration, and the target standard configuration. Unfortunately, due to the sequential nature of MSBuild, you\u0027ll need to add those settings much higher in your vcxproj so that it is declared before the Vcpk integration is loaded. It is recommend that the \u003ccode\u003e$(VcpkgConfiguration)\u003c/code\u003e macro is added to the \"Globals\" PropertyGroup.\u003c/p\u003e\n\u003cp\u003eFor example, you can add support for your \"MyRelease\" configuration by adding in your project file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;PropertyGroup Label=\"Globals\"\u0026gt;\n  ...\n  \u0026lt;VcpkgConfiguration Condition=\"\u0027$(Configuration)\u0027 == \u0027MyRelease\u0027\"\u0026gt;Release\u0026lt;/VcpkgConfiguration\u0026gt;\n\u0026lt;/PropertyGroup\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOf course, this will only produce viable binaries if your custom configuration is compatible with the target configuration (e.g. they should both link with the same runtime library).\u003c/p\u003e\n\u003ch2 id=\"i-cant-use-user-wide-integration-can-i-use-a-per-project-integration\"\u003eI can\u0027t use user-wide integration. Can I use a per-project integration?\u003c/h2\u003e\n\u003cp\u003eYes. A NuGet package suitable for per-project use can be generated via either the \u003ccode\u003evcpkg integrate project\u003c/code\u003e command (lightweight linking) or the \u003ccode\u003evcpkg export --nuget\u003c/code\u003e command (shrinkwrapped).\u003c/p\u003e\n\u003cp\u003eA lower level mechanism to achieve the same as the \u003ccode\u003evcpkg integrate project\u003c/code\u003e NuGet package is via the \u003ccode\u003e\u0026lt;vcpkg_root\u0026gt;\\scripts\\buildsystems\\msbuild\\vcpkg.targets\u003c/code\u003e file. All you need is to import it in your .vcxproj file, replacing \u003ccode\u003e\u0026lt;vcpkg_root\u0026gt;\u003c/code\u003e with the path where you installed vcpkg:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;Import Project=\"\u0026lt;vcpkg_root\u0026gt;\\scripts\\buildsystems\\msbuild\\vcpkg.targets\" /\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"how-can-i-remove-temporary-files\"\u003eHow can I remove temporary files?\u003c/h2\u003e\n\u003cp\u003eYou can save some disk space by completely removing the \u003ccode\u003epackages\u0026lt;/code\u0026gt;, \u003ccode\u003ebuildtrees\u0026lt;/code\u0026gt;, and \u003ccode\u003edownloads\u0026lt;/code\u0026gt; folders.\u003c/p\u003e\n\u003ch2 id=\"how-is-cmake-used-internally-by-vcpkg\"\u003eHow is CMake used internally by Vcpkg?\u003c/h2\u003e\n\u003cp\u003eVcpkg uses CMake internally as a build scripting language. This is because CMake is already an extremely common build system for cross-platform open source libraries and is becoming very popular for C++ projects in general. It is easy to acquire on Windows, does not require system-wide installation, and legible for unfamiliar users.\u003c/p\u003e\n\u003ch2 id=\"will-vcpkg-support-downloading-compiled-binaries-from-a-public-or-private-server\"\u003eWill Vcpkg support downloading compiled binaries from a public or private server?\u003c/h2\u003e\n\u003cp\u003eWe would like to eventually support downloading precompiled binaries, similar to other system package managers.\u003c/p\u003e\n\u003cp\u003eIn a corporate scenario, we currently recommend building the libraries once and distributing the entire vcpkg root directory to everyone else on the project through some raw file transport such as a network share or HTTP host. See the \u003ca href=\"../users/integration.md#export\"\u003e\u003ccode\u003eexport\u003c/code\u003e\u003c/a\u003e command.\u003c/p\u003e\n\u003ch2 id=\"what-visual-c-toolsets-are-supported\"\u003eWhat Visual C++ toolsets are supported?\u003c/h2\u003e\n\u003cp\u003eWe support Visual Studio 2015 Update 3 and above.\u003c/p\u003e\n\u003ch2 id=\"why-does-visual-studio-not-use-my-libraries-with-user-wide-integration-enabled\"\u003eWhy does Visual Studio not use my libraries with user-wide integration enabled?\u003c/h2\u003e\n\u003cp\u003eEnabling user-wide integration (\u003ccode\u003evcpkg integrate install\u003c/code\u003e) changes the default for some project properties. In particular, \"C/C++/General/Additional Include Directories\" and \"Linker/General/Additional Library Directories\" are normally blank \u003cem\u003ewithout\u003c/em\u003e user-wide integration. \u003cem\u003eWith\u003c/em\u003e integration, a blank value means that the augmented default supplied by vcpkg is overridden, and headers/libraries will not be found. To reinstate the default, set the properties to inherit from parent.\u003c/p\u003e\n\u003ch2 id=\"why-not-nuget\"\u003eWhy not NuGet?\u003c/h2\u003e\n\u003cp\u003eNuGet is a package manager for .NET libraries with a strong dependency on MSBuild. It does not meet the specific needs of Native C++ customers in at least three ways.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eCompilation Flavors\u003c/strong\u003e. With so many possible combinations of compilation options, the task of providing a truly complete set of options is intrinsically impossible. Furthermore, the download size for reasonably complete binary packages becomes enormous. This makes it a requirement to split the results into multiple packages, but then searching becomes very difficult.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eBinary vs Source\u003c/strong\u003e. Very closely tied to the first point, NuGet is designed from the ground up to provide relatively small, prebuilt binaries. Due to the nature of native code, developers need to have access to the source code to ensure ABI compatibility, performance, integrity, and debuggability.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003ePer-dll vs Per-application\u003c/strong\u003e. NuGet is highly project centric. This works well in managed languages with naturally stable ABIs, because base libraries can continue to evolve without breaking those higher up. However, in native languages where the ABI is much more fragile, the only robust strategy is to explicitly build each library against the exact dependencies that will be included in the final application. This is difficult to ensure in NuGet and leads to a highly disconnected and independently versioned ecosystem.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"why-not-conan\"\u003eWhy not Conan?\u003c/h2\u003e\n\u003cp\u003eConan.io is a publicly-federated, project-centric, cross-platform, C++ package manager written in python. Our primary differences are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003ePublic federation vs private federation\u003c/strong\u003e. Conan relies on individuals publishing independent copies of each package. We believe this approach encourages a large number of packages that are all broken in different ways. We believe it is a waste of user\u0027s time to pick through the list of 20+ public packages for Boost 1.56 to determine the handful that will work for their particular situation. In contrast, we believe there should be a single, collaboratively maintained version which works for the vast majority of cases and allow users to hack freely on their private versions. We believe this will result in a set of high quality packages that are heavily tested with each other and form a fantastic base for any private modifications you need.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003ePer-dll vs Per-application\u003c/strong\u003e. When dependencies are independently versioned on a library level, it encourages every build environment to be a completely unique, unable to take advantage of or contribute to a solid, well tested ecosystem. In contrast, by versioning all libraries together as a platform (similar to a system package manager), we hope to congregate testing and effort on very common sets of library versions to maximize the quality and stability of the ecosystem. This also completely designs out the ability for a library to ask for versions that conflict with the application\u0027s choices (I want openssl Z and boost X but X only claims to work with openssl Y).\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eCross-platform vs single-platform\u003c/strong\u003e. While being hosted on many platforms is an excellent north star, we believe the level of system integration and stability provided by apt-get, yum, and homebrew is well worth needing to exchange \u003ccode\u003eapt-get install libboost-all-dev\u003c/code\u003e with \u003ccode\u003ebrew install boost\u003c/code\u003e in automated scripts. We chose to make our system as easy as possible to integrate into a world with these very successful system managers -- one more line for \u003ccode\u003evcpkg install boost\u003c/code\u003e -- instead of attempting to replace them where they are already so successful and well-loved.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eC++/CMake vs python\u003c/strong\u003e. While Python is an excellent language loved by many, we believe that transparency and familiarity are the most important factors when choosing a tool as important to your workflow as a package manager. Consequently, we chose to make the implementation languages be as universally accepted as possible: C++ should be used in a C++ package manager for C++ programmers. You should not be required to learn another programming language just to understand your package manager.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"why-not-chocolatey\"\u003eWhy not Chocolatey?\u003c/h2\u003e\n\u003cp\u003eChocolatey is an excellent system for managing applications. However, it is not currently designed to acquire redistributable developer assets and help you with debugging. Vcpkg, in comparison, is designed to get you the libraries you need to build your application and help you deliver through any platform you\u0027d like (including Chocolatey!).\u003c/p\u003e",
        "Nav":  "#about"
    },
    {
        "Path":  "/en/docs/about/privacy.html",
        "Name":  "privacy",
        "Source":  "\u003ch1 id=\"vcpkg-telemetry-and-privacy\"\u003eVcpkg telemetry and privacy\u003c/h1\u003e\n\u003cp\u003evcpkg collects telemetry data to understand usage issues, such as failing packages, and to guide tool improvements. The collected data is anonymous.\u003cbr /\u003e\nFor more information about how Microsoft protects your privacy, see \u003ca href=\"https://privacy.microsoft.com/en-US/privacystatement#mainenterprisedeveloperproductsmodule\"\u003ehttps://privacy.microsoft.com/en-US/privacystatement#mainenterprisedeveloperproductsmodule\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"scope\"\u003eScope\u003c/h2\u003e\n\u003cp\u003eWe explicitly ONLY collect information from invocations of the tool itself; we do NOT add any tracking information into the produced libraries. Telemetry is collected when using any of the \u003ccode\u003evcpkg\u003c/code\u003e commands.\u003c/p\u003e\n\u003ch2 id=\"how-to-opt-out\"\u003eHow to opt out\u003c/h2\u003e\n\u003cp\u003eThe vcpkg telemetry feature is enabled by default. In order to opt-out of data collection, you can re-run the boostrap script with the following flag, for Windows and Linux/OSX, respectively:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ePS\u0026gt; .\\bootstrap-vcpkg.bat -disableMetrics\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e~/$ ./bootstrap-vcpkg.sh -disableMetrics\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"disclosure\"\u003eDisclosure\u003c/h2\u003e\n\u003cp\u003evcpkg displays text similar to the following when you build vcpkg. This is how Microsoft notifies you about data collection.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eTelemetry\n---------\nvcpkg collects usage data in order to help us improve your experience.\nThe data collected by Microsoft is anonymous.\nYou can opt-out of telemetry by re-running the bootstrap-vcpkg script with -disableMetrics,\npassing --disable-metrics to vcpkg on the command line,\nor by setting the VCPKG_DISABLE_METRICS environment variable.\n\nRead more about vcpkg telemetry at docs/about/privacy.md\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"data-collected\"\u003eData Collected\u003c/h2\u003e\n\u003cp\u003eThe telemetry feature doesn\u0027t collect personal data, such as usernames or email addresses. It doesn\u0027t scan your code and doesn\u0027t extract project-level data, such as name, repository, or author. The data is sent securely to Microsoft servers and held under restricted access.\u003c/p\u003e\n\u003cp\u003eProtecting your privacy is important to us. If you suspect the telemetry is collecting sensitive data or the data is being insecurely or inappropriately handled, file an issue in the Microsoft/vcpkg repository or send an email to \u003ca href=\"\u0026#109;\u0026#x61;\u0026#x69;\u0026#x6c;\u0026#x74;\u0026#x6f;\u0026#x3a;\u0026#118;\u0026#99;\u0026#112;\u0026#107;g\u0026#64;\u0026#x6d;i\u0026#99;\u0026#x72;\u0026#111;\u0026#x73;\u0026#111;\u0026#102;\u0026#x74;\u0026#x2e;\u0026#x63;\u0026#111;\u0026#x6d;\"\u003e\u0026#x76;\u0026#99;\u0026#x70;\u0026#x6b;g\u0026#x40;\u0026#x6d;\u0026#105;\u0026#x63;\u0026#114;\u0026#x6f;\u0026#115;\u0026#x6f;\u0026#x66;\u0026#x74;\u0026#x2e;\u0026#99;\u0026#111;\u0026#x6d;\u003c/a\u003e for investigation.\u003c/p\u003e\n\u003cp\u003eWe collect various telemetry events such as the command line used, the time of invocation, and how long execution took. Some commands also add additional calculated information (such as the full set of libraries to install). We generate a completely random UUID on first use and attach it to each event.\u003c/p\u003e\n\u003cp\u003eYou can see the telemetry events any command by appending \u003ccode\u003e--printmetrics\u003c/code\u003e after the vcpkg command line.\u003c/p\u003e\n\u003cp\u003eIn the source code (included at \u003ca href=\"https://github.com/microsoft/vcpkg-tool/\"\u003ehttps://github.com/microsoft/vcpkg-tool/\u003c/a\u003e ), you can search for calls to the functions \u003ccode\u003etrack_property()\u003c/code\u003e, \u003ccode\u003etrack_feature()\u003c/code\u003e, \u003ccode\u003etrack_metric()\u003c/code\u003e, and \u003ccode\u003etrack_buildtime()\u003c/code\u003e\u003cbr /\u003e\nto see every specific data point we collect.\u003c/p\u003e\n\u003ch2 id=\"avoid-inadvertent-disclosure-information\"\u003eAvoid inadvertent disclosure information\u003c/h2\u003e\n\u003cp\u003evcpkg contributors and anyone else running a version of vcpkg that they built themselves should consider the path to their source code. If a crash occurs when using vcpkg, the file path from the build machine is collected as part of the stack trace and isn\u0027t hashed.\u003cbr /\u003e\nBecause of this, builds of vcpkg shouldn\u0027t be located in directories whose path names expose personal or sensitive information.\u003c/p\u003e",
        "Nav":  "#about"
    },
    {
        "Path":  "/en/docs/examples/installing-and-using-packages.html",
        "Name":  "Installing And Using Packages",
        "Source":  "\u003ch2 id=\"installing-and-using-packages-example-sqlite\"\u003eInstalling and Using Packages Example: SQLite\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#install\"\u003eStep 1: Install\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#use\"\u003eStep 2: Use\u003c/a\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#msbuild\"\u003eVS/MSBuild Project (User-wide integration)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#cmake\"\u003eCMake (Toolchain file)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../users/integration.md\"\u003eOther integration options\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr /\u003e\n\u003cp\u003e\u003ca name=\"install\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"step-1-install\"\u003eStep 1: Install\u003c/h2\u003e\n\u003cp\u003eFirst, we need to know what name \u003ca href=\"https://sqlite.org\"\u003eSQLite\u003c/a\u003e goes by in the ports tree. To do that, we\u0027ll run the \u003ccode\u003esearch\u003c/code\u003e command and inspect the output:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ePS D:\\src\\vcpkg\u0026gt; .\\vcpkg search sqlite\nlibodb-sqlite        2.4.0            Sqlite support for the ODB ORM library\nsqlite3              3.32.1           SQLite is a software library that implements a se...\n\nIf your library is not listed, please open an issue at:\n    https://github.com/Microsoft/vcpkg/issues\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLooking at the list, we can see that the port is named \"sqlite3\". You can also run the \u003ccode\u003esearch\u003c/code\u003e command without arguments to see the full list of packages.\u003c/p\u003e\n\u003cp\u003eInstalling is then as simple as using the \u003ccode\u003einstall\u003c/code\u003e command.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ePS D:\\src\\vcpkg\u0026gt; .\\vcpkg install sqlite3\nComputing installation plan...\nThe following packages will be built and installed:\n    sqlite3[core]:x86-windows\nStarting package 1/1: sqlite3:x86-windows\nBuilding package sqlite3[core]:x86-windows...\n-- Downloading https://sqlite.org/2020/sqlite-amalgamation-3320100.zip...\n-- Extracting source C:/src/vcpkg/downloads/sqlite-amalgamation-3320100.zip\n-- Applying patch fix-arm-uwp.patch\n-- Using source at C:/src/vcpkg/buildtrees/sqlite3/src/3320100-15aeda126a.clean\n-- Configuring x86-windows\n-- Building x86-windows-dbg\n-- Building x86-windows-rel\n-- Performing post-build validation\n-- Performing post-build validation done\nBuilding package sqlite3[core]:x86-windows... done\nInstalling package sqlite3[core]:x86-windows...\nInstalling package sqlite3[core]:x86-windows... done\nElapsed time for package sqlite3:x86-windows: 12 s\n\nTotal elapsed time: 12.04 s\n\nThe package sqlite3:x86-windows provides CMake targets:\n\n    find_package(unofficial-sqlite3 CONFIG REQUIRED)\n    target_link_libraries(main PRIVATE unofficial::sqlite3::sqlite3))\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can check that sqlite3 was successfully installed for x86 Windows desktop by running the \u003ccode\u003elist\u003c/code\u003e command.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ePS D:\\src\\vcpkg\u0026gt; .\\vcpkg list\nsqlite3:x86-windows         3.32.1           SQLite is a software library that implements a se...\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo install for other architectures and platforms such as Universal Windows Platform or x64 Desktop, you can suffix the package name with \u003ccode\u003e:\u0026lt;target\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ePS D:\\src\\vcpkg\u0026gt; .\\vcpkg install sqlite3:x86-uwp zlib:x64-windows\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSee \u003ccode\u003e.\\vcpkg help triplet\u003c/code\u003e for all supported targets.\u003c/p\u003e\n\u003chr /\u003e\n\u003cp\u003e\u003ca name=\"use\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"step-2-use\"\u003eStep 2: Use\u003c/h2\u003e\n\u003cp\u003e\u003ca name=\"msbuild\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"vsmsbuild-project-user-wide-integration\"\u003eVS/MSBuild Project (User-wide integration)\u003c/h4\u003e\n\u003cp\u003eThe recommended and most productive way to use vcpkg is via user-wide integration, making the system available for all projects you build. The user-wide integration will prompt for administrator access the first time it is used on a given machine, but afterwards is no longer required and the integration is configured on a per-user basis.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ePS D:\\src\\vcpkg\u0026gt; .\\vcpkg integrate install\nApplied user-wide integration for this vcpkg root.\n\nAll C++ projects can now #include any installed libraries.\nLinking will be handled automatically.\nInstalling new libraries will make them instantly available.\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eNote: You will need to restart Visual Studio or perform a Build to update intellisense with the changes.\u003c/em\u003e \u003c/p\u003e\n\u003cp\u003eYou can now simply use File -\u0026gt; New Project in Visual Studio and the library will be automatically available. For SQLite, you can try out their \u003ca href=\"https://sqlite.org/quickstart.html\"\u003eC/C++ sample\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTo remove the integration for your user, you can use \u003ccode\u003e.\\vcpkg integrate remove\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ca name=\"cmake\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"cmake-toolchain-file\"\u003eCMake (Toolchain File)\u003c/h4\u003e\n\u003cp\u003eThe best way to use installed libraries with cmake is via the toolchain file \u003ccode\u003escripts\\buildsystems\\vcpkg.cmake\u003c/code\u003e. To use this file, you simply need to add it onto your CMake command line as:  \u003cbr /\u003e\n\u003ccode\u003e-DCMAKE_TOOLCHAIN_FILE=D:\\src\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf you are using CMake through Open Folder with Visual Studio you can define \u003ccode\u003eCMAKE_TOOLCHAIN_FILE\u003c/code\u003e by adding a \"variables\" section to each of your \u003ccode\u003eCMakeSettings.json\u003c/code\u003e configurations:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"configurations\": [{\n    \"name\": \"x86-Debug\",\n    \"generator\": \"Visual Studio 15 2017\",\n    \"configurationType\" : \"Debug\",\n    \"buildRoot\":  \"${env.LOCALAPPDATA}\\\\CMakeBuild\\\\${workspaceHash}\\\\build\\\\${name}\",\n    \"cmakeCommandArgs\": \"\",\n    \"buildCommandArgs\": \"-m -v:minimal\",\n    \"variables\": [{\n      \"name\": \"CMAKE_TOOLCHAIN_FILE\",\n      \"value\": \"D:\\\\src\\\\vcpkg\\\\scripts\\\\buildsystems\\\\vcpkg.cmake\"\n    }]\n  }]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eNote: It might be necessary to delete the CMake cache folder of each modified configuration, to force a full regeneration. In the \u003ccode\u003eCMake\u003c/code\u003e menu, under \u003ccode\u003eCache (\u0026lt;configuration name\u0026gt;)\u003c/code\u003e you\u0027ll find \u003ccode\u003eDelete Cache Folders\u003c/code\u003e.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eNow let\u0027s make a simple CMake project with a main file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003e# CMakeLists.txt\ncmake_minimum_required(VERSION 3.0)\nproject(test)\n\nfind_package(unofficial-sqlite3 CONFIG REQUIRED)\n\nadd_executable(main main.cpp)\n\ntarget_link_libraries(main PRIVATE unofficial::sqlite3::sqlite3)\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"cpp language-cpp\"\u003e// main.cpp\n#include \u0026lt;sqlite3.h\u0026gt;\n#include \u0026lt;stdio.h\u0026gt;\n\nint main()\n{\n    printf(\"%s\\n\", sqlite3_libversion());\n    return 0;\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, we build our project in the normal CMake way:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ePS D:\\src\\cmake-test\u0026gt; mkdir build \nPS D:\\src\\cmake-test\u0026gt; cd build\nPS D:\\src\\cmake-test\\build\u0026gt; cmake .. \"-DCMAKE_TOOLCHAIN_FILE=D:\\src\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake\"\n    // omitted CMake output here //\n-- Build files have been written to: D:/src/cmake-test/build\nPS D:\\src\\cmake-test\\build\u0026gt; cmake --build .\n    // omitted MSBuild output here //\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\n\nTime Elapsed 00:00:02.38\nPS D:\\src\\cmake-test\\build\u0026gt; .\\Debug\\main.exe\n3.15.0\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eNote: The correct sqlite3.dll is automatically copied to the output folder when building for x86-windows. You will need to distribute this along with your application.\u003c/em\u003e\u003c/p\u003e\n\u003ch5 id=\"handling-libraries-without-native-cmake-support\"\u003eHandling libraries without native cmake support\u003c/h5\u003e\n\u003cp\u003eUnlike other platforms, we do not automatically add the \u003ccode\u003einclude\u0026lt;/code\u0026gt; directory to your compilation line by default. If you\u0027re using a library that does not provide CMake integration, you will need to explicitly search for the files and add them yourself using \u003ca href=\"https://cmake.org/cmake/help/latest/command/find_path.html\"\u003e\u003ccode\u003efind_path()\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://cmake.org/cmake/help/latest/command/find_library.html\"\u003e\u003ccode\u003efind_library()\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003e# To find and use catch\nfind_path(CATCH_INCLUDE_DIR catch.hpp)\ninclude_directories(${CATCH_INCLUDE_DIR})\n\n# To find and use azure-storage-cpp\nfind_path(WASTORAGE_INCLUDE_DIR was/blob.h)\nfind_library(WASTORAGE_LIBRARY wastorage)\ninclude_directories(${WASTORAGE_INCLUDE_DIR})\nlink_libraries(${WASTORAGE_LIBRARY})\n\n# Note that we recommend using the target-specific directives for a cleaner cmake:\n#     target_include_directories(main ${LIBRARY})\n#     target_link_libraries(main PRIVATE ${LIBRARY})\u003c/code\u003e\u003c/pre\u003e",
        "Nav":  "#examples"
    },
    {
        "Path":  "/en/docs/examples/manifest-mode-cmake.html",
        "Name":  "Manifest Mode Cmake",
        "Source":  "\u003ch1 id=\"manifest-mode-cmake-example\"\u003eManifest Mode: CMake Example\u003c/h1\u003e\n\u003cp\u003eWe would like to add vcpkg manifest support to an existing cmake project!\u003cbr /\u003e\nLet\u0027s create a simple project that prints the fibonacci sequence up to a certain number,\u003cbr /\u003e\nusing some common dependencies.\u003c/p\u003e\n\u003ch2 id=\"initial-layout\"\u003eInitial Layout\u003c/h2\u003e\n\u003cp\u003eLet\u0027s create the following file layout:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003efibo/\n  src/\n    main.cxx\n  CMakeLists.txt\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd we wish to use \u003ca href=\"https://github.com/fmtlib/fmt\"\u003efmt\u003c/a\u003e, \u003ca href=\"https://github.com/ericniebler/range-v3\"\u003erange-v3\u003c/a\u003e,\u003cbr /\u003e\nand \u003ca href=\"https://github.com/jarro2783/cxxopts\"\u003ecxxopts\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eLet\u0027s write our \u003ccode\u003eCMakeLists.txt\u003c/code\u003e first:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003ecmake_minimum_required(VERSION 3.15)\n\nproject(fibo CXX)\n\nfind_package(fmt REQUIRED)\nfind_package(range-v3 REQUIRED)\nfind_package(cxxopts REQUIRED)\n\nadd_executable(fibo src/main.cxx)\n\ntarget_link_libraries(fibo\n  PRIVATE\n    fmt::fmt\n    range-v3::range-v3\n    cxxopts::cxxopts)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd then we should add \u003ccode\u003emain.cxx\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cxx language-cxx\"\u003e#include \u0026lt;cxxopts.hpp\u0026gt;\n#include \u0026lt;fmt/format.h\u0026gt;\n#include \u0026lt;range/v3/view.hpp\u0026gt;\n\nnamespace view = ranges::view;\n\nint fib(int x) {\n  int a = 0, b = 1;\n\n  for (int it : view::repeat(0) | view::take(x)) {\n    (void)it;\n    int tmp = a;\n    a += b;\n    b = tmp;\n  }\n\n  return a;\n}\n\nint main(int argc, char** argv) {\n  cxxopts::Options options(\"fibo\", \"Print the fibonacci sequence up to a value \u0027n\u0027\");\n    options.add_options()\n      (\"n,value\", \"The value to print to\", cxxopts::value\u0026lt;int\u0026gt;()-\u0026gt;default_value(\"10\"));\n\n  auto result = options.parse(argc, argv);\n  auto n = result[\"value\"].as\u0026lt;int\u0026gt;();\n\n  for (int x : view::iota(1) | view::take(n)) {\n    fmt::print(\"fib({}) = {}\\n\", x, fib(x));\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is a simple project of course, but it should give us a clean project to start with.\u003cbr /\u003e\nLet\u0027s try it out!\u003c/p\u003e\n\u003cp\u003eLet\u0027s assume you have \u003ccode\u003efmt\u003c/code\u003e, \u003ccode\u003erange-v3\u003c/code\u003e, and \u003ccode\u003ecxxopts\u003c/code\u003e installed with vcpkg classic mode;\u003cbr /\u003e\nthen, you can just do a simple:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmd language-cmd\"\u003eD:\\src\\fibo\u0026gt; cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=D:\\src\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake\n-- Building for: Visual Studio 16 2019\n-- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.19041.\n-- The CXX compiler identification is MSVC 19.27.29111.0\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/bin/Hostx64/x64/cl.exe - skipped\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Configuring done\n-- Generating done\n-- Build files have been written to: D:/src/fibo/build\nD:\\src\\fibo\u0026gt; cmake --build build\nMicrosoft (R) Build Engine version 16.7.0+b89cb5fde for .NET Framework\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Checking Build System\n  Building Custom Rule D:/src/fibo/CMakeLists.txt\n  main.cxx\n  The contents of \u0026lt;span\u0026gt; are available only with C++20 or later.\n  fibo.vcxproj -\u0026gt; D:\\src\\fibo\\build\\Debug\\fibo.exe\n  Building Custom Rule D:/src/fibo/CMakeLists.txt\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd now we can try out the \u003ccode\u003efibo\u003c/code\u003e binary!\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmd language-cmd\"\u003eD:\\src\\fibo\u0026gt; .\\build\\Debug\\fibo.exe -n 7 \nfib(1) = 1\nfib(2) = 1\nfib(3) = 2\nfib(4) = 3\nfib(5) = 5\nfib(6) = 8\nfib(7) = 13\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eit works!\u003c/p\u003e\n\u003ch2 id=\"converting-to-manifest-mode\"\u003eConverting to Manifest Mode\u003c/h2\u003e\n\u003cp\u003eWe now wish to use manifest mode, so all of our dependencies are managed for us! Let\u0027s write a \u003ccode\u003evcpkg.json\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"fibo\",\n  \"version-string\": \"0.1.0\",\n  \"dependencies\": [\n    \"cxxopts\",\n    \"fmt\",\n    \"range-v3\"\n  ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet\u0027s delete the build directory and rerun the build:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmd language-cmd\"\u003eD:\\src\\fibo\u0026gt; rmdir /S /Q build\nD:\\src\\fibo\u0026gt; cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=D:\\src\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake\n-- Running vcpkg install\nDetecting compiler hash for triplet x64-windows...\nThe following packages will be built and installed:\n    cxxopts[core]:x64-windows\n    fmt[core]:x64-windows\n    range-v3[core]:x64-windows\nStarting package 1/3: cxxopts:x64-windows\nBuilding package cxxopts[core]:x64-windows...\nUsing cached binary package: C:\\Users\\me\\AppData\\Local\\vcpkg/archives\\d2\\d2d1e5302cdfefef2fd090d8eda84cc0c1fbe6f1.zip\nBuilding package cxxopts[core]:x64-windows... done\nInstalling package cxxopts[core]:x64-windows...\nInstalling package cxxopts[core]:x64-windows... done\nElapsed time for package cxxopts:x64-windows: 50.64 ms\nStarting package 2/3: fmt:x64-windows\nBuilding package fmt[core]:x64-windows...\nUsing cached binary package: C:\\Users\\me\\AppData\\Local\\vcpkg/archives\\bf\\bf00d5214e912d71414b545b241f54ef87fdf6e5.zip\nBuilding package fmt[core]:x64-windows... done\nInstalling package fmt[core]:x64-windows...\nInstalling package fmt[core]:x64-windows... done\nElapsed time for package fmt:x64-windows: 225 ms\nStarting package 3/3: range-v3:x64-windows\nBuilding package range-v3[core]:x64-windows...\nUsing cached binary package: C:\\Users\\me\\AppData\\Local\\vcpkg/archives\\fe\\fe2cdedef6953bf954e8ddca471bf3cc8d9b06d7.zip\nBuilding package range-v3[core]:x64-windows... done\nInstalling package range-v3[core]:x64-windows...\nInstalling package range-v3[core]:x64-windows... done\nElapsed time for package range-v3:x64-windows: 1.466 s\n\nTotal elapsed time: 1.742 s\n\n-- Running vcpkg install - done\n-- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.19041.\n-- The CXX compiler identification is MSVC 19.27.29111.0\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.27.29110/bin/Hostx64/x64/cl.exe - skipped\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Configuring done\n-- Generating done\n-- Build files have been written to: D:/src/fibo/build\nD:\\src\\fibo\u0026gt; cmake --build build\nMicrosoft (R) Build Engine version 16.7.0+b89cb5fde for .NET Framework\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  Checking Build System\n  Building Custom Rule D:/src/fibo/CMakeLists.txt\n  main.cxx\n  The contents of \u0026lt;span\u0026gt; are available only with C++20 or later.\n  fibo.vcxproj -\u0026gt; D:\\src\\fibo\\build\\Debug\\fibo.exe\n  Building Custom Rule D:/src/fibo/CMakeLists.txt\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can see that with just a \u003cem\u003esingle file\u003c/em\u003e, we\u0027ve changed over to manifests without \u003cem\u003eany\u003c/em\u003e trouble.\u003cbr /\u003e\nThe build system doesn\u0027t change \u003cem\u003eat all\u003c/em\u003e! We just add a \u003ccode\u003evcpkg.json\u003c/code\u003e file, delete the build directory,\u003cbr /\u003e\nand reconfigure. And we\u0027re done!\u003c/p\u003e",
        "Nav":  "#examples"
    },
    {
        "Path":  "/en/docs/examples/modify-baseline-to-pin-old-boost.html",
        "Name":  "Modify Baseline To Pin Old Boost",
        "Source":  "\u003ch1 id=\"pin-old-boost-versions\"\u003ePin old Boost versions\u003c/h1\u003e\n\u003cp\u003eThis document will teach you how to set versions of meta-packages like \u003ccode\u003eboost\u003c/code\u003e or \u003ccode\u003eqt5\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhat is a meta-package?\u003c/strong\u003e  \u003cbr /\u003e\nIn vcpkg we call meta-packages to ports that by themselves don\u0027t install anything but that instead forward installation to another port or ports. The reasons for these meta-packages to exist are plenty: to install different versions of a library depending on platform (like the old OpenSSL port did), to allow for multiple versions to exist in the vcpkg registry at the same time (OpenCV), or to conveniently install/uninstall a catalog of related packages (Boost and Qt).  \u003c/p\u003e\n\u003cp\u003eIn the case of Boost, it is unlikely that a user requires all of the 140+ Boost libraries in their project. For the sake of convenience, vcpkg splits Boost into multiple sub-packages broken down to individual libraries. By doing so, users can limit the subset of Boost libraries that they depend on. \u003c/p\u003e\n\u003cp\u003eIf a user wants to install all of the Boost libraries available in vcpkg, they can do so by installing the \u003ccode\u003eboost\u003c/code\u003e meta-package. \u003c/p\u003e\n\u003cp\u003eDue to the nature of meta-packages, some unexpected issues arise when trying to use them with versioning. If a user writes the following manifest file:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003evcpkg.json\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n    \"name\": \"demo\",\n    \"version\": \"1.0.0\",\n    \"builtin-baseline\": \"787fe1418ea968913cc6daf11855ffd8b0b5e9d4\",\n    \"dependencies\": [ \"boost-tuple\" ],\n    \"overrides\": [ \n        { \"name\": \"boost\", \"version\": \"1.72.0\" }\n    ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe resulting installation plan is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eThe following packages will be built and installed:\n    boost-assert[core]:x64-windows -\u0026gt; 1.75.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-assert\\3393715b4ebe30fe1c3b68acf7f84363e611f156\n    boost-compatibility[core]:x64-windows -\u0026gt; 1.75.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-compatibility\\cda5675366367789659c59aca65fc57d03c51deb\n    boost-config[core]:x64-windows -\u0026gt; 1.75.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-config\\ca82ca1b9c1739c91f3cf42c68cee56c896ae6bd\n    boost-container-hash[core]:x64-windows -\u0026gt; 1.75.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-container-hash\\bf472c23d29c3d80b562c43471eb92cea998f372\n    boost-core[core]:x64-windows -\u0026gt; 1.75.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-core\\20a19f6ece37686a02eed33e1f58add8b7a2582a\n    boost-detail[core]:x64-windows -\u0026gt; 1.75.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-detail\\96744251f025f9b3c856a275dfc338031876777b\n    boost-integer[core]:x64-windows -\u0026gt; 1.75.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-integer\\de70ce0d1500df1eda3496c4f98f42f5db256b4a\n    boost-io[core]:x64-windows -\u0026gt; 1.75.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-io\\7bf3407372f8fc2a99321d24a0e952d44fe25bf3\n    boost-preprocessor[core]:x64-windows -\u0026gt; 1.75.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-preprocessor\\8d78b8ba2e9f54cb00137115ddd2ffec1c63c149\n    boost-static-assert[core]:x64-windows -\u0026gt; 1.75.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-static-assert\\2a41c4703c7122de25b1c60510c43edc9371f63d\n    boost-throw-exception[core]:x64-windows -\u0026gt; 1.75.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-throw-exception\\b13bdf32a20786a0165cc20205ef63765cac0627\n    boost-tuple[core]:x64-windows -\u0026gt; 1.75.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-tuple\\22e3d000a178a88992c430d8ae8a0244c7dea674\n    boost-type-traits[core]:x64-windows -\u0026gt; 1.75.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-type-traits\\8829793f6c6c913257314caa317599f8d253a5ca\n    boost-uninstall[core]:x64-windows -\u0026gt; 1.75.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-uninstall\\08933bad27b6d41caef0940c31e2069ecb6a079c\n    boost-utility[core]:x64-windows -\u0026gt; 1.75.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-utility\\47572946bf6a63c731b9c4142eecb8bef3d3b270\n    boost-vcpkg-helpers[core]:x64-windows -\u0026gt; 7#2 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-vcpkg-helpers\\2a21e5ab45d1ce41c185faf85dff0670ea6def1d\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt is reasonable to expect that overriding \u003ccode\u003eboost\u003c/code\u003e to version 1.72.0 results in all Boost packages being pinned to version 1.72.0. \u003cstrong\u003eHowever, vcpkg does not treat the \u003ccode\u003eboost\u003c/code\u003e meta-package any differently that any other port.\u003c/strong\u003e In other words, vcpkg has no notion that \u003ccode\u003eboost\u003c/code\u003e is related to all the other \u003ccode\u003eboost-*\u003c/code\u003e libraries, other than it depends on all of them. For this reason, all the other boost packages are installed at version 1.75.0, which is the baseline version.\u003c/p\u003e\n\u003cp\u003eBelow, we describe two methods to pin down Boost versions effectively.\u003c/p\u003e\n\u003ch2 id=\"method-1-pin-specific-packages\"\u003eMethod 1: Pin specific packages\u003c/h2\u003e\n\u003cp\u003eUse \u003ccode\u003e\"overrides\"\u003c/code\u003e to force specific versions in a package-by-package basis. \u003c/p\u003e\n\u003cp\u003e\u003ccode\u003evcpkg.json\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n    \"name\": \"demo\",\n    \"version\": \"1.0.0\",\n    \"builtin-baseline\": \"787fe1418ea968913cc6daf11855ffd8b0b5e9d4\",\n    \"dependencies\": [ \"boost-tuple\" ],\n    \"overrides\": [\n        { \"name\": \"boost-core\", \"version\": \"1.72\" },\n        { \"name\": \"boost-integer\", \"version\": \"1.72\" },\n        { \"name\": \"boost-io\", \"version\": \"1.72\" },\n        { \"name\": \"boost-tuple\", \"version\": \"1.72\" }     \n    ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis method allows you to quickly set the specific versions you want, but you will need to write an override for each package. Boost libraries are also heavily interdependent, which means that you may end up writing a lot of override lines.\u003c/p\u003e\n\u003cp\u003eThe second method makes it easy to pin the entire Boost collection and end up with a very simple manifest file.\u003c/p\u003e\n\u003ch2 id=\"method-2-modify-baseline\"\u003eMethod 2: Modify baseline\u003c/h2\u003e\n\u003cp\u003eAn easy way to set the version for the entirety of boost is to use the \u003ccode\u003e\"builtin-baseline\"\u003c/code\u003e property. \u003c/p\u003e\n\u003cp\u003eAs of right now, it is only possible to go back to Boost version \u003ccode\u003e1.75.0\u003c/code\u003e using a baseline. Since that was the contemporary Boost version when the versioning feature was merged. \u003cstrong\u003eBut, it is possible to modify the baseline to whatever you like and use that instead.\u003c/strong\u003e\u003c/p\u003e\n\u003ch3 id=\"step-1-create-a-new-branch\"\u003eStep 1: Create a new branch\u003c/h3\u003e\n\u003cp\u003eAs described in the versioning documentation. The value that goes in \u003ccode\u003e\"builtin-baseline\"\u003c/code\u003e is a Git commit in the vcpkg repository\u0027s history. Then it stands to reason, that if you want to customize the baseline you should be able to create a new commit with said custom baseline. \u003c/p\u003e\n\u003cp\u003eLet\u0027s start by creating a new branch to hold our modified baseline.  \u003cbr /\u003e\nIn the directory containing your clone of the vcpkg Git repository run:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit checkout -b custom-boost-baseline\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will create a new branch named \u003ccode\u003ecustom-boost-baseline\u003c/code\u003e and check it out immediately.\u003c/p\u003e\n\u003ch3 id=\"step-2-modify-the-baseline\"\u003eStep 2: Modify the baseline\u003c/h3\u003e\n\u003cp\u003eThe next step is to modify the baseline file, open the file in your editor of choice and modify the entries for the Boost libraries.\u003c/p\u003e\n\u003cp\u003eChange the \u003ccode\u003e\"baseline\"\u003c/code\u003e version to your desired version.  \u003cbr /\u003e\n\u003cem\u003eNOTE: Remember to also set the port versions to 0 (or your desired version).\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e${vcpkg-root}/versions/baseline.json\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"diff language-diff\"\u003e...\n     \"boost\": {\n-      \"baseline\": \"1.75.0\",\n+      \"baseline\": \"1.72.0\",\n       \"port-version\": 0\n     },\n     \"boost-accumulators\": {\n-      \"baseline\": \"1.75.0\",\n-      \"port-version\": 1\n+      \"baseline\": \"1.72.0\",\n+      \"port-version\": 0\n     },\n     \"boost-algorithm\": {\n-      \"baseline\": \"1.75.0\",\n+      \"baseline\": \"1.72.0\",\n       \"port-version\": 0\n     },\n     \"boost-align\": {\n-      \"baseline\": \"1.75.0\",\n+      \"baseline\": \"1.72.0\",\n       \"port-version\": 0\n     },\n...\n    \"boost-uninstall: {\n        \"baseline\": \"1.75.0\",\n        \"port-version\": 0\n    },\n...\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSome \u003ccode\u003eboost-\u003c/code\u003e packages are helpers used by vcpkg and are not part of Boost. For example, \u003ccode\u003e\"boost-uninstall\"\u003c/code\u003e is a vcpkg helper to conveniently uninstall all Boost libraries, but it didn\u0027t exist for Boost version \u003ccode\u003e1.72.0\u003c/code\u003e, in this case it is fine to leave it at \u003ccode\u003e1.75.0\u003c/code\u003e to avoid baseline errors (since all versions in \u003ccode\u003ebaseline.json\u003c/code\u003e must have existed). \u003c/p\u003e\n\u003ch3 id=\"step-3-commit-your-changes\"\u003eStep 3: Commit your changes\u003c/h3\u003e\n\u003cp\u003eAfter saving your modified file, run these commands to commit your changes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add versions/baseline.json\ngit commit -m \"Baseline Boost 1.72.0\"\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can set the commit message to whatever you want, just make it useful for you.\u003c/p\u003e\n\u003ch3 id=\"step-4-get-your-baseline-commit-sha\"\u003eStep 4: Get your baseline commit SHA\u003c/h3\u003e\n\u003cp\u003eOnce all your changes are ready, you can get the commit SHA by running:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit rev-parse HEAD\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe output of that command will be the commit SHA you need to put as the \u003ccode\u003e\"builtin-baseline\"\u003c/code\u003e in your project\u0027s manifest file. Copy the 40-hex digits and save them to use later in your manifest file.\u003c/p\u003e\n\u003ch3 id=\"step-5-optional-go-back-to-the-main-repository-branch\"\u003eStep 5: (Optional) Go back to the main repository branch\u003c/h3\u003e\n\u003cp\u003eOnce your changes have been commited locally, you can refer to the commit SHA regardless of the repository branch you\u0027re working on. So, let\u0027s go back to the main vcpkg repository branch.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit checkout master\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"step-6-create-your-manifest-file-with-your-custom-baseline\"\u003eStep 6: Create your manifest file with your custom baseline\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n    \"name\": \"demo\",\n    \"version\": \"1.0.0\",\n    \"builtin-baseline\": \"9b5cf7c3d9376ddf43429671282972ec4f99aa85\",\n    \"dependencies\": [ \"boost-tuple\" ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example, commit SHA \u003ccode\u003e9b5cf7c3d9376ddf43429671282972ec4f99aa85\u003c/code\u003e is the commit ID with the modified baseline. Even when a different branch (\u003ccode\u003emaster\u003c/code\u003e in this case) is checked out, Git is able to find the commit as long as the branch with the modified baseline exists (the \u003ccode\u003ecustom-boost-baseline\u003c/code\u003e branch we created in step 1).\u003c/p\u003e\n\u003cp\u003eWe run \u003ccode\u003evcpkg --feature-flags=\"manifests,versions\" install\u003c/code\u003e in the directory containing our manifest file and the output looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eThe following packages will be built and installed:\n    boost-assert[core]:x64-windows -\u0026gt; 1.72.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-assert\\6754398591f48435b28014ca0d60e5375a4c04d1\n    boost-compatibility[core]:x64-windows -\u0026gt; 1.72.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-compatibility\\9893ff3c554575bc712df4108a949e07b269f401\n    boost-config[core]:x64-windows -\u0026gt; 1.72.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-config\\de2784767046b06ec31eb718f10df512e51f2aad\n    boost-container-hash[core]:x64-windows -\u0026gt; 1.72.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-container-hash\\cc19fb0154bbef188f309f49b2664ec7623b96b6\n    boost-core[core]:x64-windows -\u0026gt; 1.72.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-core\\0eb5e20df9e267e9eca325be946f52ceb8a60229\n    boost-detail[core]:x64-windows -\u0026gt; 1.72.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-detail\\759d7c6a3f9dbaed0b0c69fa0bb764f7606bb02d\n    boost-integer[core]:x64-windows -\u0026gt; 1.72.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-integer\\173956c61a26e83b0f8b58b0baf60f06aeee637c\n    boost-preprocessor[core]:x64-windows -\u0026gt; 1.72.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-preprocessor\\86eb3938b7875f124feb845331dbe84cbab5d1c6\n    boost-static-assert[core]:x64-windows -\u0026gt; 1.72.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-static-assert\\e82d8f7f3ee07e927dc374f5a08ed6d6f4ef81f4\n    boost-throw-exception[core]:x64-windows -\u0026gt; 1.72.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-throw-exception\\64df295f7df41de4fcb219834889b126b5020def\n    boost-tuple[core]:x64-windows -\u0026gt; 1.72.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-tuple\\b3e1b01ffce6e367e4fed0a5538a8546abacb6b2\n    boost-type-traits[core]:x64-windows -\u0026gt; 1.72.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-type-traits\\5e44ec657660eccf4d3b2710b092dd238e1e7a2d\n    boost-uninstall[core]:x64-windows -\u0026gt; 1.75.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-uninstall\\08933bad27b6d41caef0940c31e2069ecb6a079c\n    boost-utility[core]:x64-windows -\u0026gt; 1.72.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-utility\\7d721b2458d5d595ac341eb54883274f38a4b8c2\n    boost-vcpkg-helpers[core]:x64-windows -\u0026gt; 7#2 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\boost-vcpkg-helpers\\2a21e5ab45d1ce41c185faf85dff0670ea6def1d\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice how simple our manifest file has become, instead of having a multitude of \u003ccode\u003e\"overrides\"\u003c/code\u003e you can pin down all Boost packages just by setting the \u003ccode\u003e\"builtin-baseline\"\u003c/code\u003e to be your modified baseline commit SHA.\u003c/p\u003e",
        "Nav":  "#examples"
    },
    {
        "Path":  "/en/docs/examples/overlay-triplets-linux-dynamic.html",
        "Name":  "Overlay Triplets Linux Dynamic",
        "Source":  "\u003ch1 id=\"overlay-triplets-example\"\u003eOverlay triplets example\u003c/h1\u003e\n\u003ch2 id=\"building-dynamic-libraries-on-linux\"\u003eBuilding dynamic libraries on Linux\u003c/h2\u003e\n\u003cp\u003eUsing \u003cstrong\u003evcpkg\u003c/strong\u003e you can build libraries for many configurations out of the box. However, this doesn\u0027t currently include shared libraries on Linux and Mac OS.\u003c/p\u003e\n\u003cp\u003eThis doesn\u0027t mean that you cannot use \u003cstrong\u003evcpkg\u003c/strong\u003e to build your dynamic libraries on these platforms! This document will guide you through creating your own custom triplets with \u003ccode\u003e--overlay-triplets\u003c/code\u003e to easily build dynamic libraries on Linux.\u003c/p\u003e\n\u003ch3 id=\"step-1-create-the-custom-triplet-files\"\u003eStep 1: Create the custom triplet files\u003c/h3\u003e\n\u003cp\u003eTo save time, copy the existing \u003ccode\u003ex64-linux.cmake\u003c/code\u003e triplet file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"sh language-sh\"\u003e~/git$ mkdir custom-triplets\n~/git$ cp vcpkg/triplets/x64-linux.cmake custom-triplets/x64-linux-dynamic.cmake\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd modify \u003ccode\u003ecustom-triplets/x64-linux-dynamic.cmake\u003c/code\u003e to match the contents below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003e# ~/git/custom-triplets/x64-linux-dynamic.cmake\nset(VCPKG_TARGET_ARCHITECTURE x64)\nset(VCPKG_CRT_LINKAGE dynamic)\nset(VCPKG_LIBRARY_LINKAGE dynamic) # This changed from static to dynamic\n\nset(VCPKG_CMAKE_SYSTEM_NAME Linux)\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"step-2-use---overlay-triplets-to-build-dynamic-libraries\"\u003eStep 2: Use \u003ccode\u003e--overlay-triplets\u003c/code\u003e to build dynamic libraries\u003c/h3\u003e\n\u003cp\u003eUse the \u003ccode\u003e--overlay-triplets\u003c/code\u003e option to include the triplets in the \u003ccode\u003ecustom-triplets\u003c/code\u003e directory. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e~/git$ vcpkg/vcpkg install sqlite3:x64-linux-dynamic --overlay-triplets=custom-triplets\nThe following packages will be built and installed:\n    sqlite3[core]:x64-linux-dynamic\nStarting package 1/1: sqlite3:x64-linux-dynamic\nBuilding package sqlite3[core]:x64-linux-dynamic...\n-- Loading triplet configuration from: /home/victor/git/custom-triplets/x64-linux-dynamic.cmake\n-- Downloading https://sqlite.org/2019/sqlite-amalgamation-3280000.zip...\n-- Extracting source /home/victor/git/vcpkg/downloads/sqlite-amalgamation-3280000.zip\n-- Applying patch fix-arm-uwp.patch\n-- Using source at /home/victor/git/vcpkg/buildtrees/sqlite3/src/3280000-6a3ff7ce92\n-- Configuring x64-linux-dynamic-dbg\n-- Configuring x64-linux-dynamic-rel\n-- Building x64-linux-dynamic-dbg\n-- Building x64-linux-dynamic-rel\n-- Performing post-build validation\n-- Performing post-build validation done\nBuilding package sqlite3[core]:x64-linux-dynamic... done\nInstalling package sqlite3[core]:x64-linux-dynamic...\nInstalling package sqlite3[core]:x64-linux-dynamic... done\nElapsed time for package sqlite3:x64-linux-dynamic: 44.82 s\n\nTotal elapsed time: 44.82 s\n\nThe package sqlite3:x64-linux-dynamic provides CMake targets:\n\n    find_package(unofficial-sqlite3 CONFIG REQUIRED)\n    target_link_libraries(main PRIVATE unofficial::sqlite3::sqlite3)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOverlay triplets enables your custom triplet files when using \u003ccode\u003evcpkg install\u003c/code\u003e, \u003ccode\u003evcpkg update\u003c/code\u003e, \u003ccode\u003evcpkg upgrade\u003c/code\u003e, and \u003ccode\u003evcpkg remove\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWhen using the \u003ccode\u003e--overlay-triplets\u003c/code\u003e option, a message like the following lets you know that a custom triplet is being used: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e-- Loading triplet configuration from: /home/custom-triplets/x64-linux-dynamic.cmake\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"overriding-default-triplets\"\u003eOverriding default triplets\u003c/h2\u003e\n\u003cp\u003eAs you may have noticed, the default triplets for Windows (\u003ccode\u003ex86-windows\u003c/code\u003e and \u003ccode\u003ex64-windows\u003c/code\u003e) install dynamic libraries, while a suffix (\u003ccode\u003e-static\u003c/code\u003e) is needed for static libraries. This is different with Linux and Mac OS where static libraries are built by \u003ccode\u003ex64-linux\u003c/code\u003e and \u003ccode\u003ex64-osx\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eUsing \u003ccode\u003e--overlay-triplets\u003c/code\u003e it is possible to override the default triplets to accomplish the same behavior on Linux:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ex64-linux\u003c/code\u003e: Builds dynamic libraries,\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ex64-linux-static\u003c/code\u003e: Builds static libraries.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"step-1-create-the-overlay-triplets\"\u003eStep 1: Create the overlay triplets\u003c/h3\u003e\n\u003cp\u003eUsing the custom triplet created in the previous example, rename \u003ccode\u003ecustom-triplets/x64-linux-dynamic.cmake\u003c/code\u003e to \u003ccode\u003ecustom-triplets/x64-linux.cmake\u003c/code\u003e. Then, copy the default \u003ccode\u003ex64-linux\u003c/code\u003e triplet (which builds static libraries) in your \u003ccode\u003ecustom-triplets\u003c/code\u003e folder and rename it to \u003ccode\u003ex64-linux-static.cmake\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"sh language-sh\"\u003e~/git$ mv custom-triplets/x64-linux-dynamic.cmake custom-triplets/x64-linux.cmake\n~/git$ cp vcpkg/triplets/x64-linux.cmake custom-triplets/x64-linux-static.cmake\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"step-2-use---overlay-triplets-to-override-default-triplets\"\u003eStep 2: Use \u003ccode\u003e--overlay-triplets\u003c/code\u003e to override default triplets\u003c/h3\u003e\n\u003cp\u003eUse the \u003ccode\u003e--overlay-triplets\u003c/code\u003e option to include the triplets in the \u003ccode\u003ecustom-triplets\u003c/code\u003e directory.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e~/git$ vcpkg/vcpkg install sqlite3:x64-linux --overlay-triplets=custom-triplets\nThe following packages will be built and installed:\n    sqlite3[core]:x64-linux\nStarting package 1/1: sqlite3:x64-linux\nBuilding package sqlite3[core]:x64-linux...\n-- Loading triplet configuration from: /home/victor/git/custom-triplets/x64-linux.cmake\n-- Downloading https://sqlite.org/2019/sqlite-amalgamation-3280000.zip...\n-- Extracting source /home/victor/git/vcpkg/downloads/sqlite-amalgamation-3280000.zip\n-- Applying patch fix-arm-uwp.patch\n-- Using source at /home/victor/git/vcpkg/buildtrees/sqlite3/src/3280000-6a3ff7ce92\n-- Configuring x64-linux-dbg\n-- Configuring x64-linux-rel\n-- Building x64-linux-dbg\n-- Building x64-linux-rel\n-- Performing post-build validation\n-- Performing post-build validation done\nBuilding package sqlite3[core]:x64-linux... done\nInstalling package sqlite3[core]:x64-linux...\nInstalling package sqlite3[core]:x64-linux... done\nElapsed time for package sqlite3:x64-linux: 44.82 s\n\nTotal elapsed time: 44.82 s\n\nThe package sqlite3:x64-linux provides CMake targets:\n\n    find_package(unofficial-sqlite3 CONFIG REQUIRED)\n    target_link_libraries(main PRIVATE unofficial::sqlite3::sqlite3)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that the default triplet is masked by your custom triplet:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e-- Loading triplet configuration from: /home/victor/git/custom-triplets/x64-linux.cmake\u003c/code\u003e\u003c/pre\u003e",
        "Nav":  "#examples"
    },
    {
        "Path":  "/en/docs/examples/packaging-github-repos.html",
        "Name":  "Packaging Github Repos",
        "Source":  "\u003ch2 id=\"packaging-github-repos-example-libogg\"\u003ePackaging Github Repos Example: libogg\u003c/h2\u003e\n\u003ch3 id=\"create-the-manifest-file\"\u003eCreate the manifest file\u003c/h3\u003e\n\u003cp\u003eThe manifest file (called \u003ccode\u003evcpkg.json\u003c/code\u003e) is a json file describing the package\u0027s metadata.\u003c/p\u003e\n\u003cp\u003eFor libogg, we\u0027ll create the file \u003ccode\u003eports/libogg/vcpkg.json\u003c/code\u003e with the following content:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"libogg\",\n  \"version-string\": \"1.3.3\",\n  \"description\": \"Ogg is a multimedia container format, and the native file and stream format for the Xiph.org multimedia codecs.\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can format the manifest file to our specifications with \u003ccode\u003evcpkg format-manifest ports/libogg/vcpkg.json\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"create-the-portfile\"\u003eCreate the portfile\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003eportfile.cmake\u003c/code\u003e describes how to build and install the package. First we download the project from Github with \u003ca href=\"../maintainers/vcpkg_from_github.md\"\u003e\u003ccode\u003evcpkg_from_github\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_from_github(\n    OUT_SOURCE_PATH SOURCE_PATH\n    REPO xiph/ogg\n    REF v1.3.3\n    SHA512 0bd6095d647530d4cb1f509eb5e99965a25cc3dd9b8125b93abd6b248255c890cf20710154bdec40568478eb5c4cde724abfb2eff1f3a04e63acef0fbbc9799b\n    HEAD_REF master\n)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe important parts to update are \u003ccode\u003eREPO\u003c/code\u003e for the GitHub repository path, \u003ccode\u003eREF\u003c/code\u003e for a stable tag/commit to use, and \u003ccode\u003eSHA512\u003c/code\u003e with the checksum of the downloaded zipfile (you can get this easily by setting it to \u003ccode\u003e1\u003c/code\u003e, trying to install the package, and copying the checksum).\u003c/p\u003e\n\u003cp\u003eFinally, we configure the project with CMake, install the package, and copy over the license file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_configure_cmake(\n    SOURCE_PATH ${SOURCE_PATH}\n    PREFER_NINJA\n)\nvcpkg_install_cmake()\nfile(INSTALL ${SOURCE_PATH}/COPYING DESTINATION ${CURRENT_PACKAGES_DIR}/share/libogg RENAME copyright)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCheck the documentation for \u003ca href=\"../maintainers/vcpkg_configure_cmake.md\"\u003e\u003ccode\u003evcpkg_configure_cmake\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"../maintainers/vcpkg_install_cmake.md\"\u003e\u003ccode\u003evcpkg_install_cmake\u003c/code\u003e\u003c/a\u003e if your package needs additional options. \u003c/p\u003e\n\u003cp\u003eNow you can run \u003ccode\u003evcpkg install libogg\u003c/code\u003e to build and install the package.\u003c/p\u003e\n\u003ch3 id=\"suggested-example-portfiles\"\u003eSuggested example portfiles\u003c/h3\u003e\n\u003cp\u003eIn the \u003ccode\u003eports/\u003c/code\u003e directory are many libraries that can be used as examples, including many that are not based on CMake.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHeader only libraries\u003cul\u003e\n\u003cli\u003erapidjson\u003c/li\u003e\n\u003cli\u003erange-v3\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eMSBuild-based\u003cul\u003e\n\u003cli\u003empg123\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eNon-CMake, custom buildsystem\u003cul\u003e\n\u003cli\u003eopenssl\u003c/li\u003e\n\u003cli\u003effmpeg\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e",
        "Nav":  "#examples"
    },
    {
        "Path":  "/en/docs/examples/packaging-zipfiles.html",
        "Name":  "Packaging Zipfiles",
        "Source":  "\u003ch2 id=\"packaging-zipfiles-example-zlib\"\u003ePackaging Zipfiles Example: zlib\u003c/h2\u003e\n\u003ch3 id=\"bootstrap-with-create\"\u003eBootstrap with \u003ccode\u003ecreate\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eFirst, locate a globally accessible archive of the library\u0027s sources. Zip, gzip, and bzip are all supported. Strongly prefer official sources or mirrors over unofficial mirrors.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eLooking at zlib\u0027s website, the URL \u003ca href=\"http://zlib.net/zlib-1.2.11.tar.gz\"\u003ehttp://zlib.net/zlib-1.2.11.tar.gz\u003c/a\u003e looks appropriate.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eSecond, determine a suitable package name. This should be ASCII, lowercase, and recognizable to someone who knows the library\u0027s \"human name\". If the library is already packaged in another package manager, prefer that name.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSince zlib is already packaged as zlib, we will use the name zlib2 for this example.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eFinally, if the server\u0027s name for the archive is not very descriptive (such as downloading a zipped commit or branch from GitHub), choose a nice archive name of the form \u003ccode\u003e\u0026lt;packagename\u0026gt;-\u0026lt;version\u0026gt;.zip\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u003ccode\u003ezlib1211.zip\u003c/code\u003e is a fine name, so no change needed.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eAll this information can then be passed into the \u003ccode\u003ecreate\u003c/code\u003e command, which will download the sources and bootstrap the packaging process inside \u003ccode\u003eports/\u0026lt;packagename\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ePS D:\\src\\vcpkg\u0026gt; .\\vcpkg create zlib2 http://zlib.net/zlib-1.2.11.tar.gz zlib1211.tar.gz\n-- Generated portfile: D:/src/vcpkg/ports/zlib2/portfile.cmake\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"create-the-manifest-file\"\u003eCreate the manifest file\u003c/h3\u003e\n\u003cp\u003eIn addition to the generated \u003ccode\u003eports/\u0026lt;package\u0026gt;/portfile.cmake\u003c/code\u003e, we also need a \u003ccode\u003eports/\u0026lt;package\u0026gt;/vcpkg.json\u003c/code\u003e file. This file is a simple set of fields describing the package\u0027s metadata.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFor zlib2, we\u0027ll create the file \u003ccode\u003eports/zlib2/vcpkg.json\u003c/code\u003e with the following contents:\u003c/em\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"zlib2\",\n  \"version-string\": \"1.2.11\",\n  \"description\": \"A Massively Spiffy Yet Delicately Unobtrusive Compression Library\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"tweak-the-generated-portfile\"\u003eTweak the generated portfile\u003c/h3\u003e\n\u003cp\u003eThe generated \u003ccode\u003eportfile.cmake\u003c/code\u003e will need some editing to correctly package most libraries in the wild, however we can start by trying out the build.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ePS D:\\src\\vcpkg\u0026gt; .\\vcpkg install zlib2\nComputing installation plan...\nThe following packages will be built and installed:\n    zlib2[core]:x64-uwp\nStarting package 1/1: zlib2:x64-uwp\nBuilding package zlib2[core]:x64-uwp...\n-- Using cached C:/src/vcpkg/downloads/zlib1211.tar.gz\n-- Cleaning sources at C:/src/vcpkg/buildtrees/zlib2/src/1.2.11-deec42f53b.clean. Pass --editable to vcpkg to reuse sources.\n-- Extracting source C:/src/vcpkg/downloads/zlib1211.tar.gz\n-- Applying patch cmake_dont_build_more_than_needed.patch\n-- Using source at C:/src/vcpkg/buildtrees/zlib2/src/1.2.11-deec42f53b.clean\n-- Configuring x64-uwp\n-- Building x64-uwp-dbg\n-- Building x64-uwp-rel\n-- Installing: C:/src/vcpkg/packages/zlib2_x64-uwp/share/zlib2/copyright\n-- Performing post-build validation\nInclude files should not be duplicated into the /debug/include directory. If this cannot be disabled in the project cmake, use\n    file(REMOVE_RECURSE ${CURRENT_PACKAGES_DIR}/debug/include)\n/debug/share should not exist. Please reorganize any important files, then use\n    file(REMOVE_RECURSE ${CURRENT_PACKAGES_DIR}/debug/share)\nThe software license must be available at ${CURRENT_PACKAGES_DIR}/share/zlib2/copyright\nFound 3 error(s). Please correct the portfile:\n    D:\\src\\vcpkg\\ports\\zlib2\\portfile.cmake\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt this point, it is a matter of reading the error messages and log files while steadily improving the quality of the portfile. Zlib required providing a discrete copy of the LICENSE to copy into the package, suppressing the build and installation of executables and headers, and removing the static libraries after they were installed.\u003c/p\u003e\n\u003ch3 id=\"suggested-example-portfiles\"\u003eSuggested example portfiles\u003c/h3\u003e\n\u003cp\u003eIn the \u003ccode\u003eports/\u003c/code\u003e directory are many libraries that can be used as examples, including many that are not based on CMake.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHeader only libraries\u003cul\u003e\n\u003cli\u003erapidjson\u003c/li\u003e\n\u003cli\u003erange-v3\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eMSBuild-based\u003cul\u003e\n\u003cli\u003empg123\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eNon-CMake, custom buildsystem\u003cul\u003e\n\u003cli\u003eopenssl\u003c/li\u003e\n\u003cli\u003effmpeg\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e",
        "Nav":  "#examples"
    },
    {
        "Path":  "/en/docs/examples/patching.html",
        "Name":  "patching",
        "Source":  "\u003ch2 id=\"patching-example-patching-libpng-to-work-for-x64-uwp\"\u003ePatching Example: Patching libpng to work for x64-uwp\u003c/h2\u003e\n\u003ch3 id=\"initial-error-logs\"\u003eInitial error logs\u003c/h3\u003e\n\u003cp\u003eFirst, try building:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ePS D:\\src\\vcpkg\u0026gt; vcpkg install libpng:x64-uwp --editable\nComputing installation plan...\nThe following packages will be built and installed:\n    libpng[core]:x64-uwp\nStarting package 1/1: libpng:x64-uwp\nBuilding package libpng[core]:x64-uwp...\n-- Using cached D:/src/vcpkg/downloads/glennrp-libpng-v1.6.37.tar.gz\n-- Extracting source D:/src/vcpkg/downloads/glennrp-libpng-v1.6.37.tar.gz\n-- Using source at D:/src/vcpkg/buildtrees/libpng/src/v1.6.37-c993153cdf\n-- Configuring x64-uwp\n-- Building x64-uwp-rel\nCMake Error at scripts/cmake/execute_required_process.cmake:14 (message):\n  Command failed: C:/Program Files/CMake/bin/cmake.exe;--build;.;--config;Release\n\n  Working Directory: D:/src/vcpkg/buildtrees/libpng/x64-uwp-rel\n\n  See logs for more information:\n\n      D:\\src\\vcpkg\\buildtrees\\libpng\\build-x64-uwp-rel-out.log\n      D:\\src\\vcpkg\\buildtrees\\libpng\\build-x64-uwp-rel-err.log\n\nCall Stack (most recent call first):\n  scripts/cmake/vcpkg_build_cmake.cmake:3 (execute_required_process)\n  ports/libpng/portfile.cmake:22 (vcpkg_build_cmake)\n  scripts/ports.cmake:84 (include)\n\n\nError: build command failed\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, looking at the above logs (build-???-out.log and build-???-err.log).\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e// build-x64-uwp-rel-out.log\n...\n\"D:\\src\\vcpkg\\buildtrees\\libpng\\x64-uwp-rel\\ALL_BUILD.vcxproj\" (default target) (1) -\u0026gt;\n\"D:\\src\\vcpkg\\buildtrees\\libpng\\x64-uwp-rel\\png.vcxproj\" (default target) (3) -\u0026gt;\n(ClCompile target) -\u0026gt; \n  D:\\src\\vcpkg\\buildtrees\\libpng\\src\\v1.6.37-c993153cdf\\pngerror.c(775): warning C4013: \u0027ExitProcess\u0027 undefined; assuming extern returning int [D:\\src\\vcpkg\\buildtrees\\libpng\\x64-uwp-rel\\png.vcxproj]\n\n\n\"D:\\src\\vcpkg\\buildtrees\\libpng\\x64-uwp-rel\\ALL_BUILD.vcxproj\" (default target) (1) -\u0026gt;\n\"D:\\src\\vcpkg\\buildtrees\\libpng\\x64-uwp-rel\\png.vcxproj\" (default target) (3) -\u0026gt;\n(Link target) -\u0026gt; \n  pngerror.obj : error LNK2019: unresolved external symbol _ExitProcess referenced in function _png_longjmp [D:\\src\\vcpkg\\buildtrees\\libpng\\x64-uwp-rel\\png.vcxproj]\n  D:\\src\\vcpkg\\buildtrees\\libpng\\x64-uwp-rel\\Release\\libpng16.dll : fatal error LNK1120: 1 unresolved externals [D:\\src\\vcpkg\\buildtrees\\libpng\\x64-uwp-rel\\png.vcxproj]\n\n    1 Warning(s)\n    2 Error(s)\n\nTime Elapsed 00:00:04.19\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"identify-the-problematic-code\"\u003eIdentify the problematic code\u003c/h3\u003e\n\u003cp\u003eTaking a look at \u003ca href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms682658(v=vs.85).aspx\"\u003eMSDN\u003c/a\u003e shows that \u003ccode\u003eExitProcess\u003c/code\u003e is only available for desktop apps. Additionally, it\u0027s useful to see the surrounding context:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"c language-c\"\u003e/* buildtrees\\libpng\\src\\v1.6.37-c993153cdf\\pngerror.c:769 */\n    /* If control reaches this point, png_longjmp() must not return. The only\n    * choice is to terminate the whole process (or maybe the thread); to do\n    * this the ANSI-C abort() function is used unless a different method is\n    * implemented by overriding the default configuration setting for\n    * PNG_ABORT().\n    */\n    PNG_ABORT();\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA recursive search for \u003ccode\u003ePNG_ABORT\u003c/code\u003e reveals the definition:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ePS D:\\src\\vcpkg\\buildtrees\\libpng\\src\\v1.6.37-c993153cdf\u0026gt; findstr /snipl \"PNG_ABORT\" *\nCHANGES:701:  Added PNG_SETJMP_SUPPORTED, PNG_SETJMP_NOT_SUPPORTED, and PNG_ABORT() macros\nlibpng-manual.txt:432:errors will result in a call to PNG_ABORT() which defaults to abort().\nlibpng-manual.txt:434:You can #define PNG_ABORT() to a function that does something\nlibpng-manual.txt:2753:errors will result in a call to PNG_ABORT() which defaults to abort().\nlibpng-manual.txt:2755:You can #define PNG_ABORT() to a function that does something\nlibpng-manual.txt:4226:PNG_NO_SETJMP, in which case it is handled via PNG_ABORT()),\nlibpng.3:942:errors will result in a call to PNG_ABORT() which defaults to abort().\nlibpng.3:944:You can #define PNG_ABORT() to a function that does something\nlibpng.3:3263:errors will result in a call to PNG_ABORT() which defaults to abort().\nlibpng.3:3265:You can #define PNG_ABORT() to a function that does something\nlibpng.3:4736:PNG_NO_SETJMP, in which case it is handled via PNG_ABORT()),\npng.h:994: * will use it; otherwise it will call PNG_ABORT().  This function was\npngerror.c:773:    * PNG_ABORT().\npngerror.c:775:   PNG_ABORT();\npngpriv.h:459:#ifndef PNG_ABORT\npngpriv.h:461:#    define PNG_ABORT() ExitProcess(0)\npngpriv.h:463:#    define PNG_ABORT() abort()\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis already gives us some great clues, but the full definition tells the complete story.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"c language-c\"\u003e/* buildtrees\\libpng\\src\\v1.6.37-c993153cdf\\pngpriv.h:459 */\n#ifndef PNG_ABORT\n#  ifdef _WINDOWS_\n#    define PNG_ABORT() ExitProcess(0)\n#  else\n#    define PNG_ABORT() abort()\n#  endif\n#endif\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eabort()\u003c/code\u003e is a standard CRT call and certainly available in UWP, so we just need to convince libpng to be more platform agnostic. The easiest and most reliable way to achieve this is to patch the code; while in this particular case we could pass in a compiler flag to override \u003ccode\u003ePNG_ABORT\u003c/code\u003e because this is a private header, in general it is more reliable to avoid adding more required compiler switches when possible (especially when it isn\u0027t already exposed as a CMake option).\u003c/p\u003e\n\u003ch3 id=\"patching-the-code-to-improve-compatibility\"\u003ePatching the code to improve compatibility\u003c/h3\u003e\n\u003cp\u003eWe recommend using git to create the patch file, since you\u0027ll already have it installed.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ePS D:\\src\\vcpkg\\buildtrees\\libpng\\src\\v1.6.37-c993153cdf\u0026gt; git init .\nInitialized empty Git repository in D:/src/vcpkg/buildtrees/libpng/src/v1.6.37-c993153cdf/.git/\n\nPS D:\\src\\vcpkg\\buildtrees\\libpng\\src\\v1.6.37-c993153cdf\u0026gt; git add .\nwarning: LF will be replaced by CRLF in ANNOUNCE.\nThe file will have its original line endings in your working directory.\n...\n\nPS D:\\src\\vcpkg\\buildtrees\\libpng\\src\\v1.6.37-c993153cdf\u0026gt; git commit -m \"temp\"\n[master (root-commit) 68f253f] temp\n 422 files changed, 167717 insertions(+)\n...\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can modify \u003ccode\u003epngpriv.h\u003c/code\u003e to use \u003ccode\u003eabort()\u003c/code\u003e everywhere.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"c language-c\"\u003e/* buildtrees\\libpng\\src\\v1.6.37-c993153cdf\\pngpriv.h:459 */\n#ifndef PNG_ABORT\n#  define PNG_ABORT() abort()\n#endif\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe output of \u003ccode\u003egit diff\u003c/code\u003e is already in patch format, so we just need to save the patch into the \u003ccode\u003eports/libpng\u003c/code\u003e directory.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ePS buildtrees\\libpng\\src\\v1.6.37-c993153cdf\u0026gt; git diff --ignore-space-at-eol | out-file -enc ascii ..\\..\\..\\..\\ports\\libpng\\use-abort-on-all-platforms.patch\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFinally, we need to apply the patch after extracting the source.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003e# ports\\libpng\\portfile.cmake\n...\nvcpkg_extract_source_archive_ex(\n  OUT_SOURCE_PATH SOURCE_PATH\n  ARCHIVE ${ARCHIVE}\n  PATCHES \n    \"use-abort-on-all-platforms.patch\"\n)\n\nvcpkg_configure_cmake(\n...\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"verification\"\u003eVerification\u003c/h3\u003e\n\u003cp\u003eTo be completely sure this works from scratch, we need to remove the package and rebuild it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ePS D:\\src\\vcpkg\u0026gt; vcpkg remove libpng:x64-uwp\nPackage libpng:x64-uwp was successfully removed\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we try a fresh, from scratch install.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ePS D:\\src\\vcpkg\u0026gt; vcpkg install libpng:x64-uwp\nComputing installation plan...\nThe following packages will be built and installed:\n    libpng[core]:x64-uwp\nStarting package 1/1: libpng:x64-uwp\nBuilding package libpng[core]:x64-uwp...\nCould not locate cached archive: C:\\Users\\me\\AppData\\Local\\vcpkg/archives\\f4\\f44b54f818f78b9a4ccd34b3666f566f94286850.zip\n-- Using cached D:/src/vcpkg/downloads/glennrp-libpng-v1.6.37.tar.gz\n-- Extracting source D:/src/vcpkg/downloads/glennrp-libpng-v1.6.37.tar.gz\n-- Applying patch use_abort.patch\n-- Applying patch cmake.patch\n-- Applying patch pkgconfig.patch\n-- Applying patch pkgconfig.2.patch\n-- Using source at D:/src/vcpkg/buildtrees/libpng/src/v1.6.37-10db9f58e4.clean\n-- Configuring x64-uwp\n-- Building x64-uwp-dbg\n-- Building x64-uwp-rel\n-- Fixing pkgconfig file: D:/src/vcpkg/packages/libpng_x64-uwp/lib/pkgconfig/libpng.pc\n-- Fixing pkgconfig file: D:/src/vcpkg/packages/libpng_x64-uwp/lib/pkgconfig/libpng16.pc\n-- Fixing pkgconfig file: D:/src/vcpkg/packages/libpng_x64-uwp/debug/lib/pkgconfig/libpng.pc\n-- Fixing pkgconfig file: D:/src/vcpkg/packages/libpng_x64-uwp/debug/lib/pkgconfig/libpng16.pc\n-- Installing: D:/src/vcpkg/packages/libpng_x64-uwp/share/libpng/copyright\n-- Performing post-build validation\n-- Performing post-build validation done\nStored binary cache: C:\\Users\\me\\AppData\\Local\\vcpkg/archives\\f4\\f44b54f818f78b9a4ccd34b3666f566f94286850.zip\nBuilding package libpng[core]:x64-uwp... done\nInstalling package libpng[core]:x64-uwp...\nInstalling package libpng[core]:x64-uwp... done\nElapsed time for package libpng:x64-uwp: 11.94 s\n\nTotal elapsed time: 11.95 s\n\nThe package libpng:x64-uwp provides CMake targets:\n\n    find_package(libpng CONFIG REQUIRED)\n    target_link_libraries(main PRIVATE png)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFinally, to fully commit and publish the changes, we need to bump the port version in \u003ccode\u003evcpkg.json\u003c/code\u003e,\u003cbr /\u003e\nand add the patch file to source control, then make a Pull Request!\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"libpng\",\n  \"version\": \"1.6.37\",\n  \"port-version\": 1,\n  \"dependencies\": [\n    \"zlib\"\n  ]\n}\u003c/code\u003e\u003c/pre\u003e",
        "Nav":  "#examples"
    },
    {
        "Path":  "/en/docs/maintainers/control-files.html",
        "Name":  "Control Files",
        "Source":  "\u003ch1 id=\"control-files\"\u003eCONTROL files\u003c/h1\u003e\n\u003cp\u003eCONTROL files are retained for backwards compatibility with earlier versions of vcpkg;\u003cbr /\u003e\nall new features are added only to vcpkg.json, and we recommend using vcpkg.json for any newly authored port.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eCONTROL\u003c/code\u003e file contains metadata about the port.  The syntax is based on \u003ca href=\"https://www.debian.org/doc/debian-policy/ch-controlfields.html\"\u003ethe Debian \u003ccode\u003econtrol\u003c/code\u003e format\u003c/a\u003e although we only support the subset of fields documented here.\u003c/p\u003e\n\u003cp\u003eField names are case-sensitive and start the line without leading whitespace.  Paragraphs are separated by one or more empty lines.\u003c/p\u003e\n\u003ch2 id=\"source-paragraph\"\u003eSource Paragraph\u003c/h2\u003e\n\u003cp\u003eThe first paragraph in a \u003ccode\u003eCONTROL\u003c/code\u003e file is the Source paragraph.  It must have a \u003ccode\u003eSource\u003c/code\u003e, \u003ccode\u003eVersion\u003c/code\u003e, and \u003ccode\u003eDescription\u003c/code\u003e field. The full set of fields is documented below.\u003c/p\u003e\n\u003ch3 id=\"examples\"\u003eExamples:\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003eSource: ace\nVersion: 6.5.5\nDescription: The ADAPTIVE Communication Environment\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003eSource: vtk\nVersion: 8.2.0\nPort-Version: 2\nDescription: Software system for 3D computer graphics, image processing, and visualization\nBuild-Depends: zlib, libpng, tiff, libxml2, jsoncpp, glew, freetype, expat, hdf5, libjpeg-turbo, proj4, lz4, libtheora, atlmfc (windows), eigen3, double-conversion, pugixml, libharu, sqlite3, netcdf-c\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"recognized-fields\"\u003eRecognized fields\u003c/h3\u003e\n\u003ch4 id=\"source\"\u003eSource\u003c/h4\u003e\n\u003cp\u003eThe name of the port.\u003c/p\u003e\n\u003cp\u003eWhen adding new ports be aware that the name may conflict with other projects that are not a part of vcpkg.  For example \u003ccode\u003ejson\u003c/code\u003e conflicts with too many other projects so you should add a scope to the name such as \u003ccode\u003etaocpp-json\u003c/code\u003e to make it unique.  Verify there are no conflicts on a search engine as well as on other package collections.\u003c/p\u003e\n\u003cp\u003ePackage collections to check for conflicts:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://repology.org/projects/\"\u003eRepology\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.debian.org/distrib/packages\"\u003eDebian packages\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://pkgs.org/\"\u003ePackages search\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"version\"\u003eVersion\u003c/h4\u003e\n\u003cp\u003eThe library version.\u003c/p\u003e\n\u003cp\u003eThis field is an alphanumeric string that may also contain \u003ccode\u003e.\u003c/code\u003e, \u003ccode\u003e_\u003c/code\u003e, or \u003ccode\u003e-\u003c/code\u003e. No attempt at ordering versions is made; all versions are treated as bit strings and are only evaluated for equality.\u003c/p\u003e\n\u003cp\u003eFor tagged-release ports, we follow the following convention:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIf the port follows a scheme like \u003ccode\u003eva.b.c\u003c/code\u003e, we remove the leading \u003ccode\u003ev\u003c/code\u003e. In this case, it becomes \u003ccode\u003ea.b.c\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIf the port includes its own name in the version like \u003ccode\u003ecurl-7_65_1\u003c/code\u003e, we remove the leading name: \u003ccode\u003e7_65_1\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor rolling-release ports, we use the date that the \u003cem\u003ecommit was accessed by you\u003c/em\u003e, formatted as \u003ccode\u003eYYYY-MM-DD\u003c/code\u003e. Stated another way: if someone had a time machine and went to that date, they would see this commit as the latest master.\u003c/p\u003e\n\u003cp\u003eFor example, given:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe latest commit was made on 2019-04-19\u003c/li\u003e\n\u003cli\u003eThe current version string is \u003ccode\u003e2019-02-14-1\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eToday\u0027s date is 2019-06-01.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThen if you update the source version today, you should give it version \u003ccode\u003e2019-06-01\u003c/code\u003e.\u003c/p\u003e\n\u003ch4 id=\"port-version\"\u003ePort-Version\u003c/h4\u003e\n\u003cp\u003eThe version of the port.\u003c/p\u003e\n\u003cp\u003eThis field is a non-negative integer. It allows one to version the port file separately from the version of the underlying library; if you make a change to a port, without changing the underlying version of the library, you should increment this field by one (starting at \u003ccode\u003e0\u003c/code\u003e, which is equivalent to no \u003ccode\u003ePort-Version\u003c/code\u003e field). When the version of the underlying library is upgraded, this field should be set back to \u003ccode\u003e0\u003c/code\u003e (i.e., delete the \u003ccode\u003ePort-Version\u003c/code\u003e field).\u003c/p\u003e\n\u003ch5 id=\"examples-1\"\u003eExamples:\u003c/h5\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003eVersion: 1.0.5\nPort-Version: 2\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003eVersion: 2019-03-21\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id=\"description\"\u003eDescription\u003c/h4\u003e\n\u003cp\u003eA description of the library.\u003c/p\u003e\n\u003cp\u003eBy convention the first line of the description is a summary of the library.  An optional detailed description follows.  The detailed description can be multiple lines, all starting with whitespace.\u003c/p\u003e\n\u003ch5 id=\"examples-2\"\u003eExamples:\u003c/h5\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003eDescription: C++ header-only JSON library\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003eDescription: Mosquitto is an open source message broker that implements the MQ Telemetry Transport protocol versions 3.1 and 3.1.1.\n  MQTT provides a lightweight method of carrying out messaging using a publish/subscribe model. This makes it suitable for \"machine\n  to machine\" messaging such as with low power sensors or mobile devices such as phones, embedded computers or microcontrollers like the Arduino.\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e`\u003c/p\u003e\n\u003ch4 id=\"homepage\"\u003eHomepage\u003c/h4\u003e\n\u003cp\u003eThe URL of the homepage for the library where a user is able to find additional documentation or the original source code.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003eHomepage: https://github.com/Microsoft/vcpkg\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id=\"build-depends\"\u003eBuild-Depends\u003c/h4\u003e\n\u003cp\u003eComma separated list of vcpkg ports the library has a dependency on.\u003c/p\u003e\n\u003cp\u003eVcpkg does not distinguish between build-only dependencies and runtime dependencies. The complete list of dependencies needed to successfully use the library should be specified.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eFor example: websocketpp is a header only library, and thus does not require any dependencies at install time. However, downstream users need boost and openssl to make use of the library. Therefore, websocketpp lists boost and openssl as dependencies\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eIf the port is dependent on optional features of another library those can be specified using the \u003ccode\u003eportname[featurelist]\u003c/code\u003e syntax. If the port does not require any features from the dependency, this should be specifed as \u003ccode\u003eportname[core]\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eDependencies can be filtered based on the target triplet to support differing requirements. These filters use the same syntax as the Supports field below and are surrounded in parentheses following the portname and feature list.\u003c/p\u003e\n\u003ch5 id=\"example\"\u003eExample:\u003c/h5\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003eBuild-Depends: rapidjson, curl[core,openssl] (!windows), curl[core,winssl] (windows)\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id=\"default-features\"\u003eDefault-Features\u003c/h4\u003e\n\u003cp\u003eComma separated list of optional port features to install by default.\u003c/p\u003e\n\u003cp\u003eThis field is optional.\u003c/p\u003e\n\u003ch5 id=\"example-1\"\u003eExample:\u003c/h5\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003eDefault-Features: dynamodb, s3, kinesis\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ca name=\"Supports\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"supports\"\u003eSupports\u003c/h4\u003e\n\u003cp\u003eExpression that evaluates to true when the port is expected to build successfully for a triplet.\u003c/p\u003e\n\u003cp\u003eCurrently, this field is only used in the CI testing to skip ports. In the future, this mechanism is intended to warn users in advance that a given install tree is not expected to succeed. Therefore, this field should be used optimistically; in cases where a port is expected to succeed 10% of the time, it should still be marked \"supported\".\u003c/p\u003e\n\u003cp\u003eThe grammar for the supports expression uses standard operators:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e!expr\u003c/code\u003e - negation\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eexpr|expr\u003c/code\u003e - or (\u003ccode\u003e||\u003c/code\u003e is also supported)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eexpr\u0026amp;expr\u003c/code\u003e - and (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e is also supported)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e(expr)\u003c/code\u003e - grouping/precedence\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe predefined expressions are computed from standard triplet settings:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ex64\u003c/code\u003e - \u003ccode\u003eVCPKG_TARGET_ARCHITECTURE\u003c/code\u003e == \u003ccode\u003e\"x64\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ex86\u003c/code\u003e - \u003ccode\u003eVCPKG_TARGET_ARCHITECTURE\u003c/code\u003e == \u003ccode\u003e\"x86\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003earm\u003c/code\u003e - \u003ccode\u003eVCPKG_TARGET_ARCHITECTURE\u003c/code\u003e == \u003ccode\u003e\"arm\"\u003c/code\u003e or \u003ccode\u003eVCPKG_TARGET_ARCHITECTURE\u003c/code\u003e == \u003ccode\u003e\"arm64\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003earm64\u003c/code\u003e - \u003ccode\u003eVCPKG_TARGET_ARCHITECTURE\u003c/code\u003e == \u003ccode\u003e\"arm64\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewindows\u003c/code\u003e - \u003ccode\u003eVCPKG_CMAKE_SYSTEM_NAME\u003c/code\u003e == \u003ccode\u003e\"\"\u003c/code\u003e or \u003ccode\u003eVCPKG_CMAKE_SYSTEM_NAME\u003c/code\u003e == \u003ccode\u003e\"WindowsStore\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003euwp\u003c/code\u003e - \u003ccode\u003eVCPKG_CMAKE_SYSTEM_NAME\u003c/code\u003e == \u003ccode\u003e\"WindowsStore\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elinux\u003c/code\u003e - \u003ccode\u003eVCPKG_CMAKE_SYSTEM_NAME\u003c/code\u003e == \u003ccode\u003e\"Linux\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eosx\u003c/code\u003e - \u003ccode\u003eVCPKG_CMAKE_SYSTEM_NAME\u003c/code\u003e == \u003ccode\u003e\"Darwin\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eandroid\u003c/code\u003e - \u003ccode\u003eVCPKG_CMAKE_SYSTEM_NAME\u003c/code\u003e == \u003ccode\u003e\"Android\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estatic\u003c/code\u003e - \u003ccode\u003eVCPKG_LIBRARY_LINKAGE\u003c/code\u003e == \u003ccode\u003e\"static\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewasm32\u003c/code\u003e - \u003ccode\u003eVCPKG_TARGET_ARCHITECTURE\u003c/code\u003e == \u003ccode\u003e\"wasm32\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eemscripten\u003c/code\u003e - \u003ccode\u003eVCPKG_CMAKE_SYSTEM_NAME\u003c/code\u003e == \u003ccode\u003e\"Emscripten\"\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese predefined expressions can be overridden in the triplet file via the \u003ca href=\"../users/triplets.md\"\u003e\u003ccode\u003eVCPKG_DEP_INFO_OVERRIDE_VARS\u003c/code\u003e\u003c/a\u003e option.\u003c/p\u003e\n\u003cp\u003eThis field is optional and defaults to true.\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eImplementers\u0027 Note: these terms are computed from the triplet via the \u003ccode\u003evcpkg_get_dep_info\u003c/code\u003e mechanism.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch5 id=\"example-2\"\u003eExample:\u003c/h5\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003eSupports: !(uwp|arm)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"feature-paragraphs\"\u003eFeature Paragraphs\u003c/h2\u003e\n\u003cp\u003eMultiple optional features can be specified in the \u003ccode\u003eCONTROL\u003c/code\u003e files.  It must have a \u003ccode\u003eFeature\u003c/code\u003e and \u003ccode\u003eDescription\u003c/code\u003e field.  It can optionally have a \u003ccode\u003eBuild-Depends\u003c/code\u003e field.  It must be separated from other paragraphs by one or more empty lines.\u003c/p\u003e\n\u003ch3 id=\"example-3\"\u003eExample:\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003eSource: vtk\nVersion: 8.2.0-2\nDescription: Software system for 3D computer graphics, image processing, and visualization\nBuild-Depends: zlib, libpng, tiff, libxml2, jsoncpp, glew, freetype, expat, hdf5, libjpeg-turbo, proj4, lz4, libtheora, atlmfc (windows), eigen3, double-conversion, pugixml, libharu, sqlite3, netcdf-c\n\nFeature: openvr\nDescription: OpenVR functionality for VTK\nBuild-Depends: sdl2, openvr\n\nFeature: qt\nDescription: Qt functionality for VTK\nBuild-Depends: qt5\n\nFeature: mpi\nDescription: MPI functionality for VTK\nBuild-Depends: mpi, hdf5[parallel]\n\nFeature: python\nDescription: Python functionality for VTK\nBuild-Depends: python3\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"recognized-fields-1\"\u003eRecognized fields\u003c/h3\u003e\n\u003ch4 id=\"feature\"\u003eFeature\u003c/h4\u003e\n\u003cp\u003eThe name of the feature.\u003c/p\u003e\n\u003ch4 id=\"description-1\"\u003eDescription\u003c/h4\u003e\n\u003cp\u003eA description of the feature using the same syntax as the port  \u003ccode\u003eDescription\u003c/code\u003e field.\u003c/p\u003e\n\u003ch4 id=\"build-depends-1\"\u003eBuild-Depends\u003c/h4\u003e\n\u003cp\u003eThe list of dependencies required to build and use this feature.\u003c/p\u003e\n\u003cp\u003eOn installation the dependencies from all selected features are combined to produce the full dependency list for the build. This field follows the same syntax as \u003ccode\u003eBuild-Depends\u003c/code\u003e in the Source Paragraph.\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/execute_process.html",
        "Name":  "execute_process",
        "Source":  "\u003ch1 id=\"execute_process\"\u003eexecute_process\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/execute_process.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIntercepts all calls to execute_process() inside portfiles and fails when Download Mode\u003cbr /\u003e\nis enabled.\u003c/p\u003e\n\u003cp\u003eIn order to execute a process in Download Mode call \u003ccode\u003evcpkg_execute_in_download_mode()\u003c/code\u003e instead.\u003c/p\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/execute_process.cmake\"\u003escripts/cmake/execute_process.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/maintainer-guide.html",
        "Name":  "Maintainer Guide",
        "Source":  "\u003ch1 id=\"maintainer-guidelines-and-policies\"\u003eMaintainer Guidelines and Policies\u003c/h1\u003e\n\u003cp\u003eThis document lists a set of policies that you should apply when adding or updating a port recipe.\u003cbr /\u003e\nIt is intended to serve the role of\u003cbr /\u003e\n\u003ca href=\"https://www.debian.org/doc/debian-policy/\"\u003eDebian\u0027s Policy Manual\u003c/a\u003e,\u003cbr /\u003e\n\u003ca href=\"https://docs.brew.sh/Maintainer-Guidelines\"\u003eHomebrew\u0027s Maintainer Guidelines\u003c/a\u003e, and\u003cbr /\u003e\n\u003ca href=\"https://docs.brew.sh/Formula-Cookbook\"\u003eHomebrew\u0027s Formula Cookbook\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"pr-structure\"\u003ePR Structure\u003c/h2\u003e\n\u003ch3 id=\"make-separate-pull-requests-per-port\"\u003eMake separate Pull Requests per port\u003c/h3\u003e\n\u003cp\u003eWhenever possible, separate changes into multiple PRs.\u003cbr /\u003e\nThis makes them significantly easier to review and prevents issues with one set of changes from holding up every other change.\u003c/p\u003e\n\u003ch3 id=\"avoid-trivial-changes-in-untouched-files\"\u003eAvoid trivial changes in untouched files\u003c/h3\u003e\n\u003cp\u003eFor example, avoid reformatting or renaming variables in portfiles that otherwise have no reason to be modified for the issue at hand.\u003cbr /\u003e\nHowever, if you need to modify the file for the primary purpose of the PR (updating the library),\u003cbr /\u003e\nthen obviously beneficial changes like fixing typos are appreciated!\u003c/p\u003e\n\u003ch3 id=\"check-names-against-other-repositories\"\u003eCheck names against other repositories\u003c/h3\u003e\n\u003cp\u003eA good service to check many at once is \u003ca href=\"https://repology.org/\"\u003eRepology\u003c/a\u003e.\u003cbr /\u003e\nIf the library you are adding could be confused with another one,\u003cbr /\u003e\nconsider renaming to make it clear.\u003c/p\u003e\n\u003ch3 id=\"use-github-draft-prs\"\u003eUse GitHub Draft PRs\u003c/h3\u003e\n\u003cp\u003eGitHub Draft PRs are a great way to get CI or human feedback on work that isn\u0027t yet ready to merge.\u003cbr /\u003e\nMost new PRs should be opened as drafts and converted to normal PRs once the CI passes.\u003c/p\u003e\n\u003cp\u003eMore information about GitHub Draft PRs:\u003cbr /\u003e\n\u003ca href=\"https://github.blog/2019-02-14-introducing-draft-pull-requests/\"\u003ehttps://github.blog/2019-02-14-introducing-draft-pull-requests/\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"portfiles\"\u003ePortfiles\u003c/h2\u003e\n\u003ch3 id=\"avoid-deprecated-helper-functions\"\u003eAvoid deprecated helper functions\u003c/h3\u003e\n\u003cp\u003eAt this time, the following helpers are deprecated:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003evcpkg_extract_source_archive()\u003c/code\u003e should be replaced by \u003ca href=\"vcpkg_extract_source_archive_ex.md\"\u003e\u003ccode\u003evcpkg_extract_source_archive_ex()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003evcpkg_apply_patches()\u003c/code\u003e should be replaced by the \u003ccode\u003ePATCHES\u003c/code\u003e arguments to the \"extract\" helpers (e.g. \u003ca href=\"vcpkg_from_github.md\"\u003e\u003ccode\u003evcpkg_from_github()\u003c/code\u003e\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003evcpkg_build_msbuild()\u003c/code\u003e should be replaced by \u003ca href=\"vcpkg_install_msbuild.md\"\u003e\u003ccode\u003evcpkg_install_msbuild()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003evcpkg_copy_tool_dependencies()\u003c/code\u003e should be replaced by \u003ca href=\"vcpkg_copy_tools.md\"\u003e\u003ccode\u003evcpkg_copy_tools()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"avoid-excessive-comments-in-portfiles\"\u003eAvoid excessive comments in portfiles\u003c/h3\u003e\n\u003cp\u003eIdeally, portfiles should be short, simple, and as declarative as possible.\u003cbr /\u003e\nRemove any boiler plate comments introduced by the \u003ccode\u003ecreate\u003c/code\u003e command before submitting a PR.\u003c/p\u003e\n\u003ch2 id=\"features\"\u003eFeatures\u003c/h2\u003e\n\u003ch3 id=\"do-not-use-features-to-implement-alternatives\"\u003eDo not use features to implement alternatives\u003c/h3\u003e\n\u003cp\u003eFeatures must be treated as additive functionality. If port[featureA] installs and port[featureB] installs, then port[featureA,featureB] must install. Moreover, if a second port depends on [featureA] and a third port depends on [featureB], installing both the second and third ports should have their dependencies satisfied.\u003c/p\u003e\n\u003cp\u003eLibraries in this situation must choose one of the available options as expressed in vcpkg, and users who want a different setting must use overlay ports at this time.\u003c/p\u003e\n\u003cp\u003eExisting examples we would not accept today retained for backwards compatibility:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003elibgit2\u003c/code\u003e, \u003ccode\u003elibzip\u003c/code\u003e, \u003ccode\u003eopen62541\u003c/code\u003e all have features for selecting a TLS or crypto backend. Note that \u003ccode\u003ecurl\u003c/code\u003e has different crypto backend options but allows selecting between them at runtime, meaning the above tenet is maintained.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edarknet\u003c/code\u003e has \u003ccode\u003eopencv2\u003c/code\u003e, \u003ccode\u003eopencv3\u003c/code\u003e, features to control which version of opencv to use for its dependencies.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"a-feature-may-engage-preview-or-beta-functionality\"\u003eA feature may engage preview or beta functionality\u003c/h3\u003e\n\u003cp\u003eNotwithstanding the above, if there is a preview branch or similar where the preview functionality has a high probability of not disrupting the non-preview functionality (for example, no API removals), a feature is acceptable to model this setting.\u003c/p\u003e\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe Azure SDKs (of the form \u003ccode\u003eazure-Xxx\u003c/code\u003e) have a \u003ccode\u003epublic-preview\u003c/code\u003e feature.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eimgui\u003c/code\u003e has an \u003ccode\u003eexperimental-docking\u003c/code\u003e feature which engages their preview docking branch which uses a merge commit attached to each of their public numbered releases.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"do-not-use-features-to-control-alternatives-in-published-interfaces\"\u003eDo not use features to control alternatives in published interfaces\u003c/h3\u003e\n\u003cp\u003eIf a consumer of a port depends on only the core functionality of that port, with high probability they must not be broken by turning on the feature. This is even more important when the alternative is not directly controlled by the consumer, but by compiler settings like \u003ccode\u003e/std:c++17\u003c/code\u003e / \u003ccode\u003e-std=c++17\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eExisting examples we would not accept today retained for backwards compatibility:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eredis-plus-plus[cxx17]\u003c/code\u003e controls a polyfill but does not bake the setting into the installed tree.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eace[wchar]\u003c/code\u003e changes all APIs to accept \u003ccode\u003econst wchar_t*\u003c/code\u003e rather than \u003ccode\u003econst char*\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"a-feature-may-replace-polyfills-with-aliases-provided-that-replacement-is-baked-into-the-installed-tree\"\u003eA feature may replace polyfills with aliases provided that replacement is baked into the installed tree\u003c/h3\u003e\n\u003cp\u003eNotwithstanding the above, ports may remove polyfills with a feature, as long as:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eTurning on the feature changes the polyfills to aliases of the polyfilled entity\u003c/li\u003e\n\u003cli\u003eThe state of the polyfill is baked into the installed headers, such that ABI mismatch \"impossible\" runtime errors are unlikely\u003c/li\u003e\n\u003cli\u003eIt is possible for a consumer of the port to write code which works in both modes, for example by using a typedef which is either polyfilled or not\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eabseil[cxx17]\u003c/code\u003e changes \u003ccode\u003eabsl::string_view\u003c/code\u003e to a replacement or \u003ccode\u003estd::string_view\u003c/code\u003e; the patch\u003cbr /\u003e\n\u003ca href=\"https://github.com/microsoft/vcpkg/blob/981e65ce0ac1f6c86e5a5ded7824db8780173c76/ports/abseil/fix-cxx-standard.patch\"\u003ehttps://github.com/microsoft/vcpkg/blob/981e65ce0ac1f6c86e5a5ded7824db8780173c76/ports/abseil/fix-cxx-standard.patch\u003c/a\u003e implements the baking requirement\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"recommended-solutions\"\u003eRecommended solutions\u003c/h3\u003e\n\u003cp\u003eIf it\u0027s critical to expose the underlying alternatives, we recommend providing messages at build time to instruct the user on how to copy the port into a private overlay:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003eset(USING_DOG 0)\nmessage(STATUS \"This version of LibContosoFrobnicate uses the Kittens backend. To use the Dog backend instead, create an overlay port of this with USING_DOG set to 1 and the `kittens` dependency replaced with `dog`.\")\nmessage(STATUS \"This recipe is at ${CMAKE_CURRENT_LIST_DIR}\")\nmessage(STATUS \"See the overlay ports documentation at https://github.com/microsoft/vcpkg/blob/master/docs/specifications/ports-overlay.md\")\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"build-techniques\"\u003eBuild Techniques\u003c/h2\u003e\n\u003ch3 id=\"do-not-use-vendored-dependencies\"\u003eDo not use vendored dependencies\u003c/h3\u003e\n\u003cp\u003eDo not use embedded copies of libraries.\u003cbr /\u003e\nAll dependencies should be split out and packaged separately so they can be updated and maintained.\u003c/p\u003e\n\u003ch3 id=\"prefer-using-cmake\"\u003ePrefer using CMake\u003c/h3\u003e\n\u003cp\u003eWhen multiple buildsystems are available, prefer using CMake.\u003cbr /\u003e\nAdditionally, when appropriate, it can be easier and more maintainable to rewrite alternative buildsystems into CMake using \u003ccode\u003efile(GLOB)\u003c/code\u003e directives.\u003c/p\u003e\n\u003cp\u003eExamples: \u003ca href=\"../../ports/abseil/portfile.cmake\"\u003eabseil\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"choose-either-static-or-shared-binaries\"\u003eChoose either static or shared binaries\u003c/h3\u003e\n\u003cp\u003eBy default, \u003ccode\u003evcpkg_configure_cmake()\u003c/code\u003e will pass in the appropriate setting for \u003ccode\u003eBUILD_SHARED_LIBS\u003c/code\u003e,\u003cbr /\u003e\nhowever for libraries that don\u0027t respect that variable, you can switch on \u003ccode\u003eVCPKG_LIBRARY_LINKAGE\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003estring(COMPARE EQUAL \"${VCPKG_LIBRARY_LINKAGE}\" \"static\" KEYSTONE_BUILD_STATIC)\nstring(COMPARE EQUAL \"${VCPKG_LIBRARY_LINKAGE}\" \"dynamic\" KEYSTONE_BUILD_SHARED)\n\nvcpkg_configure_cmake(\n    SOURCE_PATH ${SOURCE_PATH}\n    PREFER_NINJA\n    OPTIONS\n        -DKEYSTONE_BUILD_STATIC=${KEYSTONE_BUILD_STATIC}\n        -DKEYSTONE_BUILD_SHARED=${KEYSTONE_BUILD_SHARED}\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"when-defining-features-explicitly-control-dependencies\"\u003eWhen defining features, explicitly control dependencies\u003c/h3\u003e\n\u003cp\u003eWhen defining a feature that captures an optional dependency,\u003cbr /\u003e\nensure that the dependency will not be used accidentally when the feature is not explicitly enabled.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003eif (\"zlib\" IN_LIST FEATURES)\n  set(CMAKE_DISABLE_FIND_PACKAGE_ZLIB OFF)\nelse()\n  set(CMAKE_DISABLE_FIND_PACKAGE_ZLIB ON)\nendif()\n\nvcpkg_configure_cmake(\n  SOURCE_PATH ${SOURCE_PATH}\n  PREFER_NINJA\n  OPTIONS\n    -CMAKE_DISABLE_FIND_PACKAGE_ZLIB=${CMAKE_DISABLE_FIND_PACKAGE_ZLIB}\n)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe snippet below using \u003ccode\u003evcpkg_check_features()\u003c/code\u003e is equivalent,  \u003ca href=\"vcpkg_check_features.md\"\u003esee the documentation\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_check_features(OUT_FEATURE_OPTIONS FEATURE_OPTIONS\n  INVERTED_FEATURES\n    \"zlib\"    CMAKE_DISABLE_FIND_PACKAGE_ZLIB\n)\n\nvcpkg_configure_cmake(\n    SOURCE_PATH ${SOURCE_PATH}\n    PREFER_NINJA\n    OPTIONS\n      ${FEATURE_OPTIONS}\n)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that \u003ccode\u003eZLIB\u003c/code\u003e in the above is case-sensitive. See the \u003ca href=\"https://cmake.org/cmake/help/v3.15/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.html\"\u003ecmake documentation\u003c/a\u003e for more details.\u003c/p\u003e\n\u003ch3 id=\"place-conflicting-libs-in-a-manual-link-directory\"\u003ePlace conflicting libs in a \u003ccode\u003emanual-link\u003c/code\u003e directory\u003c/h3\u003e\n\u003cp\u003eA lib is considered conflicting if it does any of the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDefine \u003ccode\u003emain\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eDefine malloc\u003c/li\u003e\n\u003cli\u003eDefine symbols that are also declared in other libraries\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eConflicting libs are typically by design and not considered a defect.  Because some build systems link against everything in the lib directory, these should be moved into a subdirectory named \u003ccode\u003emanual-link\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"manifests-and-control-files\"\u003eManifests and CONTROL files\u003c/h2\u003e\n\u003cp\u003eWhen adding a new port, use the new manifest syntax for defining a port;\u003cbr /\u003e\nyou may also change over to manifests when modifying an existing port.\u003cbr /\u003e\nYou may do so easily by running the \u003ccode\u003evcpkg format-manifest\u003c/code\u003e command, which will convert existing CONTROL\u003cbr /\u003e\nfiles into manifest files. Do not convert CONTROL files that have not been modified.\u003c/p\u003e\n\u003ch2 id=\"versioning\"\u003eVersioning\u003c/h2\u003e\n\u003ch3 id=\"follow-common-conventions-for-the-version-field\"\u003eFollow common conventions for the \u003ccode\u003e\"version\"\u003c/code\u003e field\u003c/h3\u003e\n\u003cp\u003eSee our \u003ca href=\"manifest-files.md#version-fields\"\u003emanifest files document\u003c/a\u003e for a full explanation of our conventions.\u003c/p\u003e\n\u003ch3 id=\"update-the-port-version-field-in-the-manifest-file-of-any-modified-ports\"\u003eUpdate the \u003ccode\u003e\"port-version\"\u003c/code\u003e field in the manifest file of any modified ports\u003c/h3\u003e\n\u003cp\u003eVcpkg uses this field to determine whether a given port is out-of-date and should be changed whenever the port\u0027s behavior changes.\u003c/p\u003e\n\u003cp\u003eOur convention is to use the \u003ccode\u003e\"port-version\"\u003c/code\u003e field for changes to the port that don\u0027t change the upstream version, and to reset the \u003ccode\u003e\"port-version\"\u003c/code\u003e back to zero when an update to the upstream version is made.\u003c/p\u003e\n\u003cp\u003eFor Example:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eZlib\u0027s package version is currently \u003ccode\u003e1.2.1\u003c/code\u003e, with no explicit \u003ccode\u003e\"port-version\"\u003c/code\u003e (equivalent to a \u003ccode\u003e\"port-version\"\u003c/code\u003e of \u003ccode\u003e0\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eYou\u0027ve discovered that the wrong copyright file has been deployed, and fixed that in the portfile.\u003c/li\u003e\n\u003cli\u003eYou should update the \u003ccode\u003e\"port-version\"\u003c/code\u003e field in the manifest file to \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSee our \u003ca href=\"manifest-files.md#port-version\"\u003emanifest files document\u003c/a\u003e for a full explanation of our conventions.\u003c/p\u003e\n\u003ch3 id=\"update-the-version-files-in-versions-of-any-modified-ports\"\u003eUpdate the version files in \u003ccode\u003eversions/\u003c/code\u003e of any modified ports\u003c/h3\u003e\n\u003cp\u003eVcpkg uses a set of metadata files to power its versioning feature.\u003cbr /\u003e\nThese files are located in the following locations:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e${VCPKG_ROOT}/versions/baseline.json\u003c/code\u003e, (this file is common to all ports) and\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e${VCPKG_ROOT}/versions/${first-letter-of-portname}-/${portname}.json\u003c/code\u003e (one per port).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor example, for \u003ccode\u003ezlib\u003c/code\u003e the relevant files are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e${VCPKG_ROOT}/versions/baseline.json\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e${VCPKG_ROOT}/versions/z-/zlib.json\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe expect that each time you update a port, you also update its version files.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe recommended method to update these files is to run the \u003ccode\u003ex-add-version\u003c/code\u003e command, e.g.:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evcpkg x-add-version zlib\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you\u0027re updating multiple ports at the same time, instead you can run:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evcpkg x-add-version --all\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo update the files for all modified ports at once.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eNOTE: These commands require you to have committed your changes to the ports before running them. The reason is that the Git SHA of the port directory is required in these version files. But don\u0027t worry, the \u003ccode\u003ex-add-version\u003c/code\u003e command will warn you if you have local changes that haven\u0027t been committed.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eSee our \u003ca href=\"https://github.com/vicroms/vcpkg/blob/versioning-spec/docs/specifications/versioning.md\"\u003eversioning specification\u003c/a\u003e and \u003ca href=\"https://github.com/strega-nil/vcpkg/blob/git-registries/docs/specifications/registries-2.md\"\u003eregistries specification\u003c/a\u003e to learn how vcpkg interacts with these files.\u003c/p\u003e\n\u003ch2 id=\"patching\"\u003ePatching\u003c/h2\u003e\n\u003ch3 id=\"prefer-options-over-patching\"\u003ePrefer options over patching\u003c/h3\u003e\n\u003cp\u003eIt is preferable to set options in a call to \u003ccode\u003evcpkg_configure_xyz()\u003c/code\u003e over patching the settings directly.\u003c/p\u003e\n\u003cp\u003eCommon options that allow avoiding patching:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e[MSBUILD] \u003ccode\u003e\u0026lt;PropertyGroup\u0026gt;\u003c/code\u003e settings inside the project file can be overridden via \u003ccode\u003e/p:\u003c/code\u003e parameters\u003c/li\u003e\n\u003cli\u003e[CMAKE] Calls to \u003ccode\u003efind_package(XYz)\u003c/code\u003e in CMake scripts can be disabled via \u003ca href=\"https://cmake.org/cmake/help/v3.15/variable/CMAKE_DISABLE_FIND_PACKAGE_PackageName.html\"\u003e\u003ccode\u003e-DCMAKE_DISABLE_FIND_PACKAGE_XYz=ON\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e[CMAKE] Cache variables (declared as \u003ccode\u003eset(VAR \"value\" CACHE STRING \"Documentation\")\u003c/code\u003e or \u003ccode\u003eoption(VAR \"Documentation\" \"Default Value\")\u003c/code\u003e) can be overridden by just passing them in on the command line as \u003ccode\u003e-DVAR:STRING=Foo\u003c/code\u003e. One notable exception is if the \u003ccode\u003eFORCE\u003c/code\u003e parameter is passed to \u003ccode\u003eset()\u003c/code\u003e. See also the \u003ca href=\"https://cmake.org/cmake/help/v3.15/command/set.html\"\u003eCMake \u003ccode\u003eset\u003c/code\u003e documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"prefer-patching-over-overriding-vcpkg_variable-values\"\u003ePrefer patching over overriding \u003ccode\u003eVCPKG_\u0026lt;VARIABLE\u0026gt;\u003c/code\u003e values\u003c/h3\u003e\n\u003cp\u003eSome variables prefixed with \u003ccode\u003eVCPKG_\u0026lt;VARIABLE\u0026gt;\u003c/code\u003e have an equivalent \u003ccode\u003eCMAKE_\u0026lt;VARIABLE\u0026gt;\u003c/code\u003e.\u003cbr /\u003e\nHowever, not all of them are passed to the internal package build \u003ca href=\"../../scripts/toolchains/windows.cmake\"\u003e(see implementation: Windows toolchain)\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eConsider the following example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003eset(VCPKG_C_FLAGS \"-O2 ${VCPKG_C_FLAGS}\")\nset(VCPKG_CXX_FLAGS \"-O2 ${VCPKG_CXX_FLAGS}\")\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUsing \u003ccode\u003evcpkg\u003c/code\u003e\u0027s built-in toolchains this works, because the value of \u003ccode\u003eVCPKG_\u0026lt;LANG\u0026gt;_FLAGS\u003c/code\u003e is forwarded to the appropriate \u003ccode\u003eCMAKE_LANG_FLAGS\u003c/code\u003e variable. But, a custom toolchain that is not aware of \u003ccode\u003evcpkg\u003c/code\u003e\u0027s variables will not forward them.\u003c/p\u003e\n\u003cp\u003eBecause of this, it is preferable to patch the buildsystem directly when setting \u003ccode\u003eCMAKE_\u0026lt;LANG\u0026gt;_FLAGS\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"minimize-patches\"\u003eMinimize patches\u003c/h3\u003e\n\u003cp\u003eWhen making changes to a library, strive to minimize the final diff. This means you should \u003cem\u003enot\u003c/em\u003e reformat the upstream source code when making changes that affect a region. Also, when disabling a conditional, it is better to add a \u003ccode\u003eAND FALSE\u003c/code\u003e or \u003ccode\u003e\u0026amp;\u0026amp; 0\u003c/code\u003e to the condition than to delete every line of the conditional.\u003c/p\u003e\n\u003cp\u003eThis helps to keep the size of the vcpkg repository down as well as improves the likelihood that the patch will apply to future code versions.\u003c/p\u003e\n\u003ch3 id=\"do-not-implement-features-in-patches\"\u003eDo not implement features in patches\u003c/h3\u003e\n\u003cp\u003eThe purpose of patching in vcpkg is to enable compatibility with compilers, libraries, and platforms. It is not to implement new features in lieu of following proper Open Source procedure (submitting an Issue/PR/etc).\u003c/p\u003e\n\u003ch2 id=\"do-not-build-testsdocsexamples-by-default\"\u003eDo not build tests/docs/examples by default\u003c/h2\u003e\n\u003cp\u003eWhen submitting a new port, check for any options like \u003ccode\u003eBUILD_TESTS\u003c/code\u003e or \u003ccode\u003eWITH_TESTS\u003c/code\u003e or \u003ccode\u003ePOCO_ENABLE_SAMPLES\u003c/code\u003e and ensure the additional binaries are disabled. This minimizes build times and dependencies for the average user.\u003c/p\u003e\n\u003cp\u003eOptionally, you can add a \u003ccode\u003etest\u003c/code\u003e feature which enables building the tests, however this should not be in the \u003ccode\u003eDefault-Features\u003c/code\u003e list.\u003c/p\u003e\n\u003ch2 id=\"enable-existing-users-of-the-library-to-switch-to-vcpkg\"\u003eEnable existing users of the library to switch to vcpkg\u003c/h2\u003e\n\u003ch3 id=\"do-not-add-cmake_windows_export_all_symbols\"\u003eDo not add \u003ccode\u003eCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eUnless the author of the library is already using it, we should not use this CMake functionality because it interacts poorly with C++ templates and breaks certain compiler features. Libraries that don\u0027t provide a .def file and do not use __declspec() declarations simply do not support shared builds for Windows and should be marked as such with \u003ccode\u003evcpkg_check_linkage(ONLY_STATIC_LIBRARY)\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"do-not-rename-binaries-outside-the-names-given-by-upstream\"\u003eDo not rename binaries outside the names given by upstream\u003c/h3\u003e\n\u003cp\u003eThis means that if the upstream library has different names in release and debug (libx versus libxd), then the debug library should not be renamed to \u003ccode\u003elibx\u003c/code\u003e. Vice versa, if the upstream library has the same name in release and debug, we should not introduce a new name.\u003c/p\u003e\n\u003cp\u003eImportant caveat:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eStatic and shared variants often should be renamed to a common scheme. This enables consumers to use a common name and be ignorant of the downstream linkage. This is safe because we only make one at a time available.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNote that if a library generates CMake integration files (\u003ccode\u003efoo-config.cmake\u003c/code\u003e), renaming must be done through patching the CMake build itself instead of simply calling \u003ccode\u003efile(RENAME)\u003c/code\u003e on the output archives/LIBs.\u003c/p\u003e\n\u003cp\u003eFinally, DLL files on Windows should never be renamed post-build because it breaks the generated LIBs.\u003c/p\u003e\n\u003ch2 id=\"code-format\"\u003eCode format\u003c/h2\u003e\n\u003ch3 id=\"vcpkg-internal-code\"\u003eVcpkg internal code\u003c/h3\u003e\n\u003cp\u003eWe require the C++ code inside vcpkg to follow the clang-format, if you change them. Please perform the following steps after modification:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse Visual Studio:\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003eConfigure your \u003ca href=\"https://devblogs.microsoft.com/cppblog/clangformat-support-in-visual-studio-2017-15-7-preview-1/\"\u003eclang-format tools\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eOpen the modified file.\u003c/li\u003e\n\u003cli\u003eUse shortcut keys Ctrl+K, Ctrl+D to format the current file.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eUse tools:\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003eInstall \u003ca href=\"https://releases.llvm.org/download.html#10.0.0\"\u003ellvm clang-format\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRun command:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class=\"cmd language-cmd\"\u003e\u0026gt; LLVM_PATH/bin/clang-format.exe -style=file -i changed_file.cpp\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"manifests\"\u003eManifests\u003c/h3\u003e\n\u003cp\u003eWe require that the manifest file be formatted. Use the following command to format all manifest files:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmd language-cmd\"\u003e\u0026gt; vcpkg format-manifest --all\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"useful-implementation-notes\"\u003eUseful implementation notes\u003c/h2\u003e\n\u003ch3 id=\"portfiles-are-run-in-script-mode\"\u003ePortfiles are run in Script Mode\u003c/h3\u003e\n\u003cp\u003eWhile \u003ccode\u003eportfile.cmake\u003c/code\u003e\u0027s and \u003ccode\u003eCMakeLists.txt\u003c/code\u003e\u0027s share a common syntax and core CMake language constructs, portfiles run in \"Script Mode\", whereas \u003ccode\u003eCMakeLists.txt\u003c/code\u003e files run in \"Build Mode\" (unofficial term). The most important difference between these two modes is that \"Script Mode\" does not have a concept of \"Target\" -- any behaviors that depend on the \"target\" machine (\u003ccode\u003eCMAKE_CXX_COMPILER\u003c/code\u003e, \u003ccode\u003eCMAKE_EXECUTABLE_SUFFIX\u003c/code\u003e, \u003ccode\u003eCMAKE_SYSTEM_NAME\u003c/code\u003e, etc) will not be correct.\u003c/p\u003e\n\u003cp\u003ePortfiles have direct access to variables set in the triplet file, but \u003ccode\u003eCMakeLists.txt\u003c/code\u003es do not (though there is often a translation that happens -- \u003ccode\u003eVCPKG_LIBRARY_LINKAGE\u003c/code\u003e versus \u003ccode\u003eBUILD_SHARED_LIBS\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003ePortfiles and CMake builds invoked by portfiles are run in different processes. Conceptually:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e+----------------------------+       +------------------------------------+\n| CMake.exe                  |       | CMake.exe                          |\n+----------------------------+       +------------------------------------+\n| Triplet file               | ====\u0026gt; | Toolchain file                     |\n| (x64-windows.cmake)        |       | (scripts/buildsystems/vcpkg.cmake) |\n+----------------------------+       +------------------------------------+\n| Portfile                   | ====\u0026gt; | CMakeLists.txt                     |\n| (ports/foo/portfile.cmake) |       | (buildtrees/../CMakeLists.txt)     |\n+----------------------------+       +------------------------------------+\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo determine the host in a portfile, the standard CMake variables are fine (\u003ccode\u003eCMAKE_HOST_WIN32\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eTo determine the target in a portfile, the vcpkg triplet variables should be used (\u003ccode\u003eVCPKG_CMAKE_SYSTEM_NAME\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eSee also our \u003ca href=\"../users/triplets.md\"\u003etriplet documentation\u003c/a\u003e for a full enumeration of possible settings.\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/manifest-files.html",
        "Name":  "Manifest Files",
        "Source":  "\u003ch1 id=\"manifest-files---vcpkgjson\"\u003eManifest files - \u003ccode\u003evcpkg.json\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003eThe \u003ccode\u003evcpkg.json\u003c/code\u003e file contains metadata about the port.\u003cbr /\u003e\nIt\u0027s a JSON file, and replaces the existing CONTROL file metadata structure.\u003cbr /\u003e\nIt must have a top level object, and all fields are case sensitive.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples:\u003c/h2\u003e\n\u003cp\u003eThe most important fields in a manifest, the ones which are required for all ports,\u003cbr /\u003e\nare the \u003ccode\u003e\"name\"\u003c/code\u003e field, and a version field (for now, just \u003ccode\u003e\"version-string\"\u003c/code\u003e).\u003cbr /\u003e\nThere\u0027s more information about these fields below.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"ace\",\n  \"version-string\": \"6.5.5\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"vtk\",\n  \"version-string\": \"8.2.0\",\n  \"port-version\": 2,\n  \"description\": \"Software system for 3D computer graphics, image processing, and visualization\",\n  \"dependencies\": [\n    {\n      \"name\": \"atlmfc\",\n      \"platform\": \"windows\"\n    },\n    \"double-conversion\",\n    \"eigen3\",\n    \"expat\",\n    \"freetype\",\n    \"glew\",\n    \"hdf5\",\n    \"jsoncpp\",\n    \"libharu\",\n    \"libjpeg-turbo\",\n    \"libpng\",\n    \"libtheora\",\n    \"libxml2\",\n    \"lz4\",\n    \"netcdf-c\",\n    \"proj4\",\n    \"pugixml\",\n    \"sqlite3\",\n    \"tiff\",\n    \"zlib\"\n  ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"fields\"\u003eFields\u003c/h2\u003e\n\u003ch3 id=\"name\"\u003e\u003ccode\u003e\"name\"\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThe name of the port.\u003c/p\u003e\n\u003cp\u003eWhen adding new ports be aware that the name may conflict with other projects that are not a part of vcpkg.  For example \u003ccode\u003ejson\u003c/code\u003e conflicts with too many other projects so you should add a scope to the name such as \u003ccode\u003etaocpp-json\u003c/code\u003e to make it unique.  Verify there are no conflicts on a search engine as well as on other package collections.\u003c/p\u003e\n\u003cp\u003ePackage collections to check for conflicts:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://repology.org/projects/\"\u003eRepology\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.debian.org/distrib/packages\"\u003eDebian packages\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://pkgs.org/\"\u003ePackages search\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eA name must be an identifier: i.e., it must only consist of lowercase ascii alphabetic characters,\u003cbr /\u003e\nnumbers, and hyphens, and it must not begin nor end with a hyphen.\u003c/p\u003e\n\u003ch3 id=\"version-fields\"\u003eVersion fields\u003c/h3\u003e\n\u003cp\u003eThe library version. There is currently only one kind of version, a \u003ccode\u003e\"version-string\"\u003c/code\u003e -\u003cbr /\u003e\nhowever, more version kinds will be added later. Additionally,\u003cbr /\u003e\n\u003ccode\u003e\"port-version\"\u003c/code\u003e is used to differentiate between port changes that don\u0027t change the underlying library version.\u003c/p\u003e\n\u003ch4 id=\"version-string\"\u003e\u003ccode\u003e\"version-string\"\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis field is an ascii string, and may contain alphanumeric characters, \u003ccode\u003e.\u003c/code\u003e, \u003ccode\u003e_\u003c/code\u003e, or \u003ccode\u003e-\u003c/code\u003e. No attempt at ordering versions is made; all versions are treated as byte strings and are only evaluated for equality.\u003c/p\u003e\n\u003cp\u003eFor tagged-release ports, we follow the following convention:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIf the library follows a scheme like \u003ccode\u003eva.b.c\u003c/code\u003e, we remove the leading \u003ccode\u003ev\u003c/code\u003e. In this case, it becomes \u003ccode\u003ea.b.c\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIf the library includes its own name in the version like \u003ccode\u003ecurl-7_65_1\u003c/code\u003e, we remove the leading name: \u003ccode\u003e7_65_1\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eIf the library is versioned by dates, format the resulting version string just like the upstream library;\u003cbr /\u003e\nfor example, Abseil formats their dates \u003ccode\u003elts_2020_02_25\u003c/code\u003e, so the \u003ccode\u003e\"version-string\"\u003c/code\u003e should be \u003ccode\u003e\"lts_2020_02_25\"\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFor rolling-release ports, we use the date that the \u003cem\u003ecommit was accessed by you\u003c/em\u003e, formatted as \u003ccode\u003eYYYY-MM-DD\u003c/code\u003e. Stated another way: if someone had a time machine and went to that date, they would see this commit as the latest master.\u003c/p\u003e\n\u003cp\u003eFor example, given:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe latest commit was made on 2019-04-19\u003c/li\u003e\n\u003cli\u003eThe current version string is \u003ccode\u003e2019-02-14\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eToday\u0027s date is 2019-06-01.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThen if you update the source version today, you should give it version \u003ccode\u003e2019-06-01\u003c/code\u003e.\u003c/p\u003e\n\u003ch4 id=\"port-version\"\u003e\u003ccode\u003e\"port-version\"\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThe version of the port, aside from the library version.\u003c/p\u003e\n\u003cp\u003eThis field is a non-negative integer.\u003cbr /\u003e\nIt allows one to version the port file separately from the version of the underlying library;\u003cbr /\u003e\nif you make a change to a port, without changing the underlying version of the library,\u003cbr /\u003e\nyou should increment this field by one (starting at \u003ccode\u003e0\u003c/code\u003e, which is equivalent to no \u003ccode\u003e\"port-version\"\u003c/code\u003e field).\u003cbr /\u003e\nWhen the version of the underlying library is upgraded,\u003cbr /\u003e\nthis field should be set back to \u003ccode\u003e0\u003c/code\u003e (i.e., delete the \u003ccode\u003e\"port-version\"\u003c/code\u003e field).\u003c/p\u003e\n\u003ch4 id=\"examples-1\"\u003eExamples:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"version\": \"1.0.5\",\n  \"port-version\": 2\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"version\": \"2019-03-21\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"description\"\u003e\u003ccode\u003e\"description\"\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eA description of the library.\u003c/p\u003e\n\u003cp\u003eThis field can either be a single string, which should be a summary of the library,\u003cbr /\u003e\nor can be an array, with the first line being a summary and the remaining lines being the detailed description -\u003cbr /\u003e\none string per line.\u003c/p\u003e\n\u003ch4 id=\"examples-2\"\u003eExamples:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"description\": \"C++ header-only JSON library\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"description\": [\n    \"Mosquitto is an open source message broker that implements the MQ Telemetry Transport protocol versions 3.1 and 3.1.1.\",\n    \"MQTT provides a lightweight method of carrying out messaging using a publish/subscribe model.\"\n    \"This makes it suitable for \u0027machine to machine\u0027 messaging such as with low power sensors or mobile devices such as phones, embedded computers or microcontrollers like the Arduino.\"\n  ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"homepage\"\u003e\u003ccode\u003e\"homepage\"\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThe URL of the homepage for the library where a user is able to find additional documentation or the original source code.\u003c/p\u003e\n\u003ch3 id=\"documentation\"\u003e\u003ccode\u003e\"documentation\"\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThe URL where a user would be able to find official documentation for the library. Optional.\u003c/p\u003e\n\u003ch3 id=\"maintainers\"\u003e\u003ccode\u003e\"maintainers\"\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eA list of strings that define the set of maintainers of a package.\u003cbr /\u003e\nIt\u0027s recommended that these take the form of \u003ccode\u003eGivenname Surname \u0026lt;email\u0026gt;\u003c/code\u003e,\u003cbr /\u003e\nbut this field is not checked for consistency.\u003c/p\u003e\n\u003cp\u003eOptional.\u003c/p\u003e\n\u003ch4 id=\"example\"\u003eExample:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"homepage\": \"https://github.com/microsoft/vcpkg\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"dependencies\"\u003e\u003ccode\u003e\"dependencies\"\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eAn array of ports the library has a dependency on.\u003c/p\u003e\n\u003cp\u003evcpkg does not distinguish between build-only dependencies and runtime dependencies.\u003cbr /\u003e\nThe complete list of dependencies needed to successfully use the library should be specified.\u003c/p\u003e\n\u003cp\u003eFor example: websocketpp is a header only library, and thus does not require any dependencies at install time.\u003cbr /\u003e\nHowever, downstream users need boost and openssl to make use of the library.\u003cbr /\u003e\nTherefore, websocketpp lists boost and openssl as dependencies.\u003c/p\u003e\n\u003cp\u003eEach dependency may be either an identifier, or an object.\u003cbr /\u003e\nFor many dependencies, just listing the name of the library should be fine;\u003cbr /\u003e\nhowever, if one needs to add extra information to that dependency, one may use the dependency object.\u003cbr /\u003e\nFor a dependency object, the \u003ccode\u003e\"name\"\u003c/code\u003e field is used to designate the library;\u003cbr /\u003e\nfor example the dependency object \u003ccode\u003e{ \"name\": \"zlib\" }\u003c/code\u003e is equivalent to just writing \u003ccode\u003e\"zlib\"\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf the port is dependent on optional features of another library,\u003cbr /\u003e\nthose can be specified using the \u003ccode\u003e\"features\"\u003c/code\u003e field of the dependency object.\u003cbr /\u003e\nIf the port does not require any features from the dependency,\u003cbr /\u003e\nthis should be specifed with the \u003ccode\u003e\"default-features\"\u003c/code\u003e fields set to \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eDependencies can also be filtered based on the target triplet to support differing requirements.\u003cbr /\u003e\nThese filters use the same syntax as the \u003ccode\u003e\"supports\"\u003c/code\u003e field below,\u003cbr /\u003e\nand are specified in the \u003ccode\u003e\"platform\"\u003c/code\u003e field.\u003c/p\u003e\n\u003ch4 id=\"example-1\"\u003eExample:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"dependencies\": [\n    {\n      \"name\": \"curl\",\n      \"default-features\": false,\n      \"features\": [\n        \"winssl\"\n      ],\n      \"platform\": \"windows\"\n    },\n    {\n      \"name\": \"curl\",\n      \"default-features\": false,\n      \"features\": [\n        \"openssl\"\n      ],\n      \"platform\": \"!windows\"\n    },\n    \"rapidjson\"\n  ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"features\"\u003e\u003ccode\u003e\"features\"\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eMultiple optional features can be specified in manifest files, in the \u003ccode\u003e\"features\"\u003c/code\u003e object field.\u003cbr /\u003e\nThis field is a map from the feature name, to the feature\u0027s information.\u003cbr /\u003e\nEach one must have a \u003ccode\u003e\"description\"\u003c/code\u003e field, and may also optionally have a \u003ccode\u003e\"dependencies\"\u003c/code\u003e field.\u003c/p\u003e\n\u003cp\u003eA feature\u0027s name must be an identifier -\u003cbr /\u003e\nin other words, lowercase alphabetic characters, digits, and hyphens,\u003cbr /\u003e\nneither starting nor ending with a hyphen.\u003c/p\u003e\n\u003cp\u003eA feature\u0027s \u003ccode\u003e\"description\"\u003c/code\u003e is a description of the feature,\u003cbr /\u003e\nand is the same kind of thing as the port \u003ccode\u003e\"description\"\u003c/code\u003e field.\u003c/p\u003e\n\u003cp\u003eA feature\u0027s \u003ccode\u003e\"dependencies\"\u003c/code\u003e field contains the list of extra dependencies required to build and use this feature;\u003cbr /\u003e\nthis field isn\u0027t required if the feature doesn\u0027t require any extra dependencies.\u003cbr /\u003e\nOn installation the dependencies from all selected features are combined to produce the full dependency list for the build.\u003c/p\u003e\n\u003ch4 id=\"example-2\"\u003eExample:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"vtk\",\n  \"version-string\": \"8.2.0\",\n  \"port-version\": 2,\n  \"description\": \"Software system for 3D computer graphics, image processing, and visualization\",\n  \"dependencies\": [\n    {\n      \"name\": \"atlmfc\",\n      \"platform\": \"windows\"\n    },\n    \"double-conversion\",\n    \"eigen3\",\n    \"expat\",\n    \"freetype\",\n    \"glew\",\n    \"hdf5\",\n    \"jsoncpp\",\n    \"libharu\",\n    \"libjpeg-turbo\",\n    \"libpng\",\n    \"libtheora\",\n    \"libxml2\",\n    \"lz4\",\n    \"netcdf-c\",\n    \"proj4\",\n    \"pugixml\",\n    \"sqlite3\",\n    \"tiff\",\n    \"zlib\"\n  ],\n  \"features\": {\n    \"mpi\": {\n      \"description\": \"MPI functionality for VTK\",\n      \"dependencies\": [\n        {\n          \"name\": \"hdf5\",\n          \"features\": [\n            \"parallel\"\n          ]\n        },\n        \"mpi\"\n      ]\n    },\n    \"openvr\": {\n      \"description\": \"OpenVR functionality for VTK\",\n      \"dependencies\": [\n        \"openvr\",\n        \"sdl2\"\n      ]\n    },\n    \"python\": {\n      \"description\": \"Python functionality for VTK\",\n      \"dependencies\": [\n        \"python3\"\n      ]\n    },\n    \"qt\": {\n      \"description\": \"Qt functionality for VTK\",\n      \"dependencies\": [\n        \"qt5\"\n      ]\n    }\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"default-features\"\u003e\u003ccode\u003e\"default-features\"\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eAn array of feature names that the library uses by default, if nothing else is specified.\u003c/p\u003e\n\u003ch4 id=\"example-3\"\u003eExample:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"default-features\": [\n    \"kinesis\"\n  ],\n  \"features\": {\n    \"dynamodb\": {\n      \"description\": \"Build dynamodb support\",\n      \"dependencies\": [\n        \"dynamodb\"\n      ]\n    },\n    \"kinesis\": {\n      \"description\": \"build kinesis support\"\n    }\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"supports\"\u003e\u003ccode\u003e\"supports\"\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eA string, formatted as a platform expression,\u003cbr /\u003e\nthat evaluates to true when the port should build successfully for a triplet.\u003c/p\u003e\n\u003cp\u003eThis field is used in the CI testing to skip ports,\u003cbr /\u003e\nand warns users in advance that a given install tree is not expected to succeed.\u003cbr /\u003e\nTherefore, this field should be used optimistically;\u003cbr /\u003e\nin cases where a port is expected to succeed 10% of the time, it should still be marked \"supported\".\u003c/p\u003e\n\u003cp\u003eThe grammar for this top-level platform expression, in \u003ca href=\"https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form\"\u003eEBNF\u003c/a\u003e, is as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"ebnf language-ebnf\"\u003ewhitespace-character =\n| ? U+0009 \"CHARACTER TABULATION\" ?\n| ? U+000A \"LINE FEED\" ?\n| ? U+000D \"CARRIAGE RETURN\" ?\n| ? U+0020 \"SPACE\" ? ;\noptional-whitespace = { whitespace-character } ;\n\nlowercase-alpha =\n| \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" | \"j\" | \"k\" | \"l\" | \"m\"\n| \"n\" | \"o\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" | \"z\" ;\ndigit =\n| \"0\" | \"1\" | \"2\" | \"3\" | \"4\"\n| \"5\" | \"6\" | \"7\" | \"8\" | \"9\" ;\nidentifier-character =\n| lowercase-alpha\n| digit ;\n\nplatform-expression =\n| platform-expression-not\n| platform-expression-and\n| platform-expression-or ;\n\nplatform-expression-identifier = \n| identifier-character, { identifier-character }, optional-whitespace ;\n\nplatform-expression-simple =\n| platform-expression-identifier\n| \"(\", optional-whitespace, platform-expression, \")\", optional-whitespace ;\n\nplatform-expression-not =\n| platform-expression-simple\n| \"!\", optional-whitespace, platform-expression-simple ;\n\nplatform-expression-and =\n| platform-expression-not, { \"\u0026amp;\", optional-whitespace, platform-expression-not } ;\n\nplatform-expression-or =\n| platform-expression-not, { \"|\", optional-whitespace, platform-expression-not } ;\n\ntop-level-platform-expression = optional-whitespace, platform-expression ;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBasically, there are four kinds of expressions -- identifiers, negations, ands, and ors.\u003cbr /\u003e\nNegations may only negate an identifier or a grouped expression.\u003cbr /\u003e\nAnds and ors are a list of \u003ccode\u003e\u0026amp;\u003c/code\u003e or \u003ccode\u003e|\u003c/code\u003e separated identifiers, negated expressions, and grouped expressions.\u003cbr /\u003e\nOne may not mix \u003ccode\u003e\u0026amp;\u003c/code\u003e and \u003ccode\u003e|\u003c/code\u003e without parentheses for grouping.\u003c/p\u003e\n\u003cp\u003eThese predefined identifier expressions are computed from standard triplet settings:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ex64\u003c/code\u003e - \u003ccode\u003eVCPKG_TARGET_ARCHITECTURE\u003c/code\u003e == \u003ccode\u003e\"x64\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ex86\u003c/code\u003e - \u003ccode\u003eVCPKG_TARGET_ARCHITECTURE\u003c/code\u003e == \u003ccode\u003e\"x86\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003earm\u003c/code\u003e - \u003ccode\u003eVCPKG_TARGET_ARCHITECTURE\u003c/code\u003e == \u003ccode\u003e\"arm\"\u003c/code\u003e or \u003ccode\u003eVCPKG_TARGET_ARCHITECTURE\u003c/code\u003e == \u003ccode\u003e\"arm64\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003earm64\u003c/code\u003e - \u003ccode\u003eVCPKG_TARGET_ARCHITECTURE\u003c/code\u003e == \u003ccode\u003e\"arm64\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewindows\u003c/code\u003e - \u003ccode\u003eVCPKG_CMAKE_SYSTEM_NAME\u003c/code\u003e == \u003ccode\u003e\"\"\u003c/code\u003e or \u003ccode\u003eVCPKG_CMAKE_SYSTEM_NAME\u003c/code\u003e == \u003ccode\u003e\"WindowsStore\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emingw\u003c/code\u003e - \u003ccode\u003eVCPKG_CMAKE_SYSTEM_NAME\u003c/code\u003e == \u003ccode\u003e\"MinGW\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003euwp\u003c/code\u003e - \u003ccode\u003eVCPKG_CMAKE_SYSTEM_NAME\u003c/code\u003e == \u003ccode\u003e\"WindowsStore\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elinux\u003c/code\u003e - \u003ccode\u003eVCPKG_CMAKE_SYSTEM_NAME\u003c/code\u003e == \u003ccode\u003e\"Linux\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eosx\u003c/code\u003e - \u003ccode\u003eVCPKG_CMAKE_SYSTEM_NAME\u003c/code\u003e == \u003ccode\u003e\"Darwin\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eandroid\u003c/code\u003e - \u003ccode\u003eVCPKG_CMAKE_SYSTEM_NAME\u003c/code\u003e == \u003ccode\u003e\"Android\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estatic\u003c/code\u003e - \u003ccode\u003eVCPKG_LIBRARY_LINKAGE\u003c/code\u003e == \u003ccode\u003e\"static\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewasm32\u003c/code\u003e - \u003ccode\u003eVCPKG_TARGET_ARCHITECTURE\u003c/code\u003e == \u003ccode\u003e\"wasm32\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eemscripten\u003c/code\u003e - \u003ccode\u003eVCPKG_CMAKE_SYSTEM_NAME\u003c/code\u003e == \u003ccode\u003e\"Emscripten\"\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese predefined identifier expressions can be overridden in the triplet file,\u003cbr /\u003e\nvia the \u003ca href=\"../users/triplets.md\"\u003e\u003ccode\u003eVCPKG_DEP_INFO_OVERRIDE_VARS\u003c/code\u003e\u003c/a\u003e option,\u003cbr /\u003e\nand new identifier expressions can be added via the same mechanism.\u003c/p\u003e\n\u003cp\u003eThis field is optional and defaults to true.\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eImplementers\u0027 Note: these terms are computed from the triplet via the \u003ccode\u003evcpkg_get_dep_info\u003c/code\u003e mechanism.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4 id=\"example-4\"\u003eExample:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"supports\": \"!uwp \u0026amp; !(arm \u0026amp; !arm64)\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis means \"doesn\u0027t support uwp, nor arm32 (but does support arm64)\".\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/portfile-functions.html",
        "Name":  "Portfile Functions",
        "Source":  "\u003c!-- Run regenerate.ps1 to extract scripts documentation --\u003e\n\u003ch1 id=\"portfile-helper-functions\"\u003ePortfile helper functions\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"execute_process.md\"\u003eexecute_process\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_acquire_msys.md\"\u003evcpkg_acquire_msys\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_add_to_path.md\"\u003evcpkg_add_to_path\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_apply_patches.md\"\u003evcpkg_apply_patches\u003c/a\u003e (deprecated)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_build_cmake.md\"\u003evcpkg_build_cmake\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_build_gn.md\"\u003evcpkg_build_gn\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_build_make.md\"\u003evcpkg_build_make\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_build_msbuild.md\"\u003evcpkg_build_msbuild\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_build_ninja.md\"\u003evcpkg_build_ninja\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_build_nmake.md\"\u003evcpkg_build_nmake\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_build_qmake.md\"\u003evcpkg_build_qmake\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_buildpath_length_warning.md\"\u003evcpkg_buildpath_length_warning\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_check_features.md\"\u003evcpkg_check_features\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_check_linkage.md\"\u003evcpkg_check_linkage\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_clean_executables_in_bin.md\"\u003evcpkg_clean_executables_in_bin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_clean_msbuild.md\"\u003evcpkg_clean_msbuild\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_common_definitions.md\"\u003evcpkg_common_definitions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_configure_cmake.md\"\u003evcpkg_configure_cmake\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_configure_gn.md\"\u003evcpkg_configure_gn\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_configure_make.md\"\u003evcpkg_configure_make\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_configure_meson.md\"\u003evcpkg_configure_meson\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_configure_qmake.md\"\u003evcpkg_configure_qmake\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_copy_pdbs.md\"\u003evcpkg_copy_pdbs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_copy_tool_dependencies.md\"\u003evcpkg_copy_tool_dependencies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_copy_tools.md\"\u003evcpkg_copy_tools\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_download_distfile.md\"\u003evcpkg_download_distfile\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_execute_build_process.md\"\u003evcpkg_execute_build_process\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_execute_in_download_mode.md\"\u003evcpkg_execute_in_download_mode\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_execute_required_process.md\"\u003evcpkg_execute_required_process\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_execute_required_process_repeat.md\"\u003evcpkg_execute_required_process_repeat\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_extract_source_archive.md\"\u003evcpkg_extract_source_archive\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_extract_source_archive_ex.md\"\u003evcpkg_extract_source_archive_ex\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_fail_port_install.md\"\u003evcpkg_fail_port_install\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_find_acquire_program.md\"\u003evcpkg_find_acquire_program\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_find_fortran.md\"\u003evcpkg_find_fortran\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_fixup_cmake_targets.md\"\u003evcpkg_fixup_cmake_targets\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_fixup_pkgconfig.md\"\u003evcpkg_fixup_pkgconfig\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_from_bitbucket.md\"\u003evcpkg_from_bitbucket\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_from_git.md\"\u003evcpkg_from_git\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_from_github.md\"\u003evcpkg_from_github\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_from_gitlab.md\"\u003evcpkg_from_gitlab\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_from_sourceforge.md\"\u003evcpkg_from_sourceforge\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_get_program_files_platform_bitness.md\"\u003evcpkg_get_program_files_platform_bitness\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_get_windows_sdk.md\"\u003evcpkg_get_windows_sdk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_install_cmake.md\"\u003evcpkg_install_cmake\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_install_gn.md\"\u003evcpkg_install_gn\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_install_make.md\"\u003evcpkg_install_make\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_install_meson.md\"\u003evcpkg_install_meson\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_install_msbuild.md\"\u003evcpkg_install_msbuild\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_install_nmake.md\"\u003evcpkg_install_nmake\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_install_qmake.md\"\u003evcpkg_install_qmake\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_minimum_required.md\"\u003evcpkg_minimum_required\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"vcpkg_replace_string.md\"\u003evcpkg_replace_string\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"internal-functions\"\u003eInternal Functions\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"internal/vcpkg_internal_get_cmake_vars.md\"\u003evcpkg_internal_get_cmake_vars\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"internal/z_vcpkg_apply_patches.md\"\u003ez_vcpkg_apply_patches\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"internal/z_vcpkg_function_arguments.md\"\u003ez_vcpkg_function_arguments\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"internal/z_vcpkg_prettify_command_line.md\"\u003ez_vcpkg_prettify_command_line\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"scripts-from-ports\"\u003eScripts from Ports\u003c/h2\u003e\n\u003ch3 id=\"vcpkg-cmakeportsvcpkg-cmakemd\"\u003e\u003ca href=\"ports/vcpkg-cmake.md\"\u003evcpkg-cmake\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"ports/vcpkg-cmake/vcpkg_cmake_build.md\"\u003evcpkg_cmake_build\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"ports/vcpkg-cmake/vcpkg_cmake_configure.md\"\u003evcpkg_cmake_configure\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"ports/vcpkg-cmake/vcpkg_cmake_install.md\"\u003evcpkg_cmake_install\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"vcpkg-cmake-configportsvcpkg-cmake-configmd\"\u003e\u003ca href=\"ports/vcpkg-cmake-config.md\"\u003evcpkg-cmake-config\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"ports/vcpkg-cmake-config/vcpkg_cmake_config_fixup.md\"\u003evcpkg_cmake_config_fixup\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/pr-review-checklist.html",
        "Name":  "Pr Review Checklist",
        "Source":  "\u003ch1 id=\"vcpkg-pr-checklist\"\u003eVcpkg PR Checklist\u003c/h1\u003e\n\u003cp\u003eRevision: 1\u003c/p\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eThis document provides an annotated checklist which vcpkg team members use to apply the \"reviewed\" label on incoming pull requests. If a pull request violates any of these points, we may ask contributors to make necessary changes before we can merge the changeset.\u003c/p\u003e\n\u003cp\u003eFeel free to create an issue or pull request if you feel that this checklist can be improved. Please increment the revision number when modifying the checklist content.\u003c/p\u003e\n\u003ch2 id=\"checklist\"\u003eChecklist\u003c/h2\u003e\n\u003cp\u003eYou can link any of these checklist items in a GitHub comment by copying the link address attached to each item code.\u003c/p\u003e\n\u003cp\u003e\u003cdetails id=\"c000001\"\u003e\u003cbr /\u003e\n\u003csummary\u003e\u003ca href=\"#c000001\"\u003ec000001\u003c/a\u003e: No deprecated helper functions are used\u003c/summary\u003e\u003c/p\u003e\n\u003cp\u003eSee our \u003ca href=\"maintainer-guide.md#Avoid-deprecated-helper-functions\"\u003eMaintainer Guidelines and Policies\u003c/a\u003e for more information.\u003c/p\u003e\n\u003cp\u003e\u003c/details\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdetails id=\"c000002\"\u003e\u003cbr /\u003e\n\u003csummary\u003e\u003ca href=\"#c000002\"\u003ec000002\u003c/a\u003e: \u003ccode\u003e\"port-version\"\u003c/code\u003e field is updated\u003c/summary\u003e\u003c/p\u003e\n\u003cp\u003eSee our \u003ca href=\"maintainer-guide.md#versioning\"\u003eMaintainer Guidelines and Policies\u003c/a\u003e for more information.\u003c/p\u003e\n\u003cp\u003e\u003c/details\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdetails id=\"c000003\"\u003e\u003cbr /\u003e\n\u003csummary\u003e\u003ca href=\"#c000003\"\u003ec000003\u003c/a\u003e: New ports contain a \u003ccode\u003e\"description\"\u003c/code\u003e field written in English\u003c/summary\u003e\u003c/p\u003e\n\u003cp\u003eA description only one or a few sentences long is helpful. Consider using the library\u0027s official description from their \u003ccode\u003eREADME.md\u003c/code\u003e or similar if possible. Automatic translations are acceptable and we are happy to clean up translations to English for our contributors.\u003c/p\u003e\n\u003cp\u003eSee our \u003ca href=\"manifest-files.md#description\"\u003emanifest file documentation\u003c/a\u003e for more information.\u003c/p\u003e\n\u003cp\u003e\u003c/details\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdetails id=\"c000004\"\u003e\u003cbr /\u003e\n\u003csummary\u003e\u003ca href=\"#c000004\"\u003ec000004\u003c/a\u003e: No unnecessary comments are present in the changeset\u003c/summary\u003e\u003c/p\u003e\n\u003cp\u003eSee our \u003ca href=\"maintainer-guide.md#Avoid-excessive-comments-in-portfiles\"\u003eMaintainer Guidelines and Policies\u003c/a\u003e for more information.\u003c/p\u003e\n\u003cp\u003e\u003c/details\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdetails id=\"c000005\"\u003e\u003cbr /\u003e\n\u003csummary\u003e\u003ca href=\"#c000005\"\u003ec000005\u003c/a\u003e: Downloaded archives are versioned if available\u0026lt;/summary\u003c/p\u003e\n\u003cp\u003eTo ensure archive content does not change, archives downloaded preferably have an associated version tag that can be incremented alongside the port\u0027s \u003ccode\u003e\"version\"\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003c/details\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdetails id=\"c000006\"\u003e\u003cbr /\u003e\n\u003csummary\u003e\u003ca href=\"#c000006\"\u003ec000006\u003c/a\u003e: New ports pass CI checks for triplets that the library officially supports\u003c/summary\u003e\u003c/p\u003e\n\u003cp\u003eTo ensure vcpkg ports are of a high quality, we ask that incoming ports support the official platforms for the library in question.\u003c/p\u003e\n\u003cp\u003e\u003c/details\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdetails id=\"c000007\"\u003e\u003cbr /\u003e\n\u003csummary\u003e\u003ca href=\"#c000007\"\u003ec000007\u003c/a\u003e: Patches fix issues that are vcpkg-specific only\u003c/summary\u003e\u003c/p\u003e\n\u003cp\u003eIf possible, patches to the library source code should be upstreamed to the library\u0027s official repository. Opening up a pull request on the library\u0027s repository will help to improve the library for everyone, not just vcpkg users.\u003c/p\u003e\n\u003cp\u003e\u003c/details\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdetails id=\"c000008\"\u003e\u003cbr /\u003e\n\u003csummary\u003e\u003ca href=\"#c000008\"\u003ec000008\u003c/a\u003e: New ports download source code from the official source if available\u003c/summary\u003e\u003c/p\u003e\n\u003cp\u003eTo respect library authors and keep code secure, please have ports download source code from the official source. We may make exceptions if the original source code is not available and there is substantial community interest in maintaining the library in question.\u003c/p\u003e\n\u003cp\u003e\u003c/details\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdetails id=\"c000009\"\u003e\u003cbr /\u003e\n\u003csummary\u003e\u003ca href=\"#c000009\"\u003ec000009\u003c/a\u003e: Ports and port features are named correctly\u003c/summary\u003e\u003c/p\u003e\n\u003cp\u003eFor user accessibility, we prefer names of ports and port features to be intuitive and close to their counterparts in official sources and other package managers. If you are unsure about the naming of a port or port feature, we recommend checking repology.org, packages.ubuntu.com, or searching for additional information using a search engine. We can also help our contributors with this, so feel free to ask for naming suggestions if you are unsure.\u003c/p\u003e\n\u003cp\u003e\u003c/details\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdetails id=\"c000010\"\u003e\u003cbr /\u003e\n\u003csummary\u003e\u003ca href=\"#c000010\"\u003ec000010\u003c/a\u003e: Library targets are exported when appropriate\u003c/summary\u003e\u003c/p\u003e\n\u003cp\u003eTo provide users with a seamless build system integration, please be sure to export and provide a means of finding the library targets intended to be used downstream. Targets not meant to be exported should be be marked private and not exported.\u003c/p\u003e\n\u003cp\u003e\u003c/details\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdetails id=\"c000011\"\u003e\u003cbr /\u003e\n\u003csummary\u003e\u003ca href=\"#c000011\"\u003ec000011\u003c/a\u003e: Ports do not use applications which modify the user\u0027s system\u003c/summary\u003e\u003c/p\u003e\n\u003cp\u003ePorts should uphold vcpkg\u0027s contract of not modifying the user\u0027s system by avoiding applications which do so. Examples of these applications are \u003ccode\u003esudo\u003c/code\u003e, \u003ccode\u003eapt\u003c/code\u003e, \u003ccode\u003ebrew\u003c/code\u003e, or \u003ccode\u003epip\u003c/code\u003e. Please use an alternative to these types of programs wherever possible.\u003c/p\u003e\n\u003cp\u003e\u003c/details\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdetails id=\"c000012\"\u003e\u003cbr /\u003e\n\u003csummary\u003e\u003ca href=\"#c000012\"\u003ec000012\u003c/a\u003e: Ports with system dependencies include an information message during installation\u003c/summary\u003e\u003c/p\u003e\n\u003cp\u003eSome ports have library and tool dependencies that do not exist within vcpkg. For these missing dependencies, we ask that contributors add a message to the top of the port\u0027s \u003ccode\u003eportfile.cmake\u003c/code\u003e stating the missing dependencies and how to acquire them. We ask that the message is displayed before any major work is done to ensure that users can \"early out\" of the installation process as soon as possible in case they are missing the dependency.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003emessage(\n\"${PORT} currently requires the following libraries from the system package manager:\n    autoconf libtool\nThese can be installed on Ubuntu systems via sudo apt install autoconf libtool\"\n)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/details\u003e\u003c/p\u003e\n\u003cp\u003e\u003cdetails id=\"c000013\"\u003e\u003cbr /\u003e\n\u003csummary\u003e\u003ca href=\"#c000013\"\u003ec000013\u003c/a\u003e: Manifest files are used instead of CONTROL files for new ports\u003c/summary\u003e\u003c/p\u003e\n\u003cp\u003eMany existing ports use the CONTROL file syntax; while this syntax will be supported for some time to come,\u003cbr /\u003e\nnew ports should not use these. Any newly added port \u003cem\u003emust\u003c/em\u003e use the manifest files.\u003c/p\u003e\n\u003cp\u003eWe also recommend, when significant modifications are made to ports, that one switches to manifest files;\u003cbr /\u003e\nhowever, this is not required. You may find \u003ccode\u003evcpkg format-manifest\u003c/code\u003e useful.\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_acquire_msys.html",
        "Name":  "vcpkg_acquire_msys",
        "Source":  "\u003ch1 id=\"vcpkg_acquire_msys\"\u003evcpkg_acquire_msys\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_acquire_msys.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDownload and prepare an MSYS2 instance.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_acquire_msys(\u0026lt;MSYS_ROOT_VAR\u0026gt;\n    PACKAGES \u0026lt;package\u0026gt;...\n    [NO_DEFAULT_PACKAGES]\n    [DIRECT_PACKAGES \u0026lt;URL\u0026gt; \u0026lt;SHA512\u0026gt; \u0026lt;URL\u0026gt; \u0026lt;SHA512\u0026gt; ...]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"msys_root_var\"\u003eMSYS_ROOT_VAR\u003c/h3\u003e\n\u003cp\u003eAn out-variable that will be set to the path to MSYS2.\u003c/p\u003e\n\u003ch3 id=\"packages\"\u003ePACKAGES\u003c/h3\u003e\n\u003cp\u003eA list of packages to acquire in msys.\u003c/p\u003e\n\u003cp\u003eTo ensure a package is available: \u003ccode\u003evcpkg_acquire_msys(MSYS_ROOT PACKAGES make automake1.16)\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"no_default_packages\"\u003eNO_DEFAULT_PACKAGES\u003c/h3\u003e\n\u003cp\u003eExclude the normal base packages.\u003c/p\u003e\n\u003cp\u003eThe list of base packages includes: bash, coreutils, sed, grep, gawk, diffutils, make, and pkg-config\u003c/p\u003e\n\u003ch3 id=\"direct_packages\"\u003eDIRECT_PACKAGES\u003c/h3\u003e\n\u003cp\u003eA list of URL/SHA512 pairs to acquire in msys.\u003c/p\u003e\n\u003cp\u003eThis parameter can be used by a port to privately extend the list of msys packages to be acquired.\u003cbr /\u003e\nThe URLs can be found on the msys2 website[1] and should be a direct archive link:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehttps://repo.msys2.org/mingw/i686/mingw-w64-i686-gettext-0.19.8.1-9-any.pkg.tar.zst\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e[1] \u003ca href=\"https://packages.msys2.org/search\"\u003ehttps://packages.msys2.org/search\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cp\u003eA call to \u003ccode\u003evcpkg_acquire_msys\u003c/code\u003e will usually be followed by a call to \u003ccode\u003ebash.exe\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_acquire_msys(MSYS_ROOT)\nset(BASH ${MSYS_ROOT}/usr/bin/bash.exe)\n\nvcpkg_execute_required_process(\n    COMMAND ${BASH} --noprofile --norc \"${CMAKE_CURRENT_LIST_DIR}\\\\build.sh\"\n    WORKING_DIRECTORY ${CURRENT_BUILDTREES_DIR}/${TARGET_TRIPLET}-rel\n    LOGNAME build-${TARGET_TRIPLET}-rel\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/ffmpeg/portfile.cmake\"\u003effmpeg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/icu/portfile.cmake\"\u003eicu\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/libvpx/portfile.cmake\"\u003elibvpx\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_acquire_msys.cmake\"\u003escripts/cmake/vcpkg_acquire_msys.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_add_to_path.html",
        "Name":  "vcpkg_add_to_path",
        "Source":  "\u003ch1 id=\"vcpkg_add_to_path\"\u003evcpkg_add_to_path\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_add_to_path.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAdd a directory or directories to the PATH environment variable\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_add_to_path([PREPEND] [\u0026lt;path\u0026gt;...])\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003evcpkg_add_to_path\u003c/code\u003e adds all of the paths passed to it to the PATH environment variable.\u003cbr /\u003e\nIf PREPEND is passed, then those paths are prepended to the PATH environment variable,\u003cbr /\u003e\nso that they are searched first; otherwise, those paths are appended, so they are\u003cbr /\u003e\nsearched after the paths which are already in the environment variable.\u003c/p\u003e\n\u003cp\u003eThe paths are added in the order received, so that the first path is always searched\u003cbr /\u003e\nbefore a later path.\u003c/p\u003e\n\u003cp\u003eIf no paths are passed, then nothing will be done.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples:\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/curl/portfile.cmake#L75\"\u003ecurl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/folly/portfile.cmake#L15\"\u003efolly\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/z3/portfile.cmake#L13\"\u003ez3\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_add_to_path.cmake\"\u003escripts/cmake/vcpkg_add_to_path.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_apply_patches.html",
        "Name":  "vcpkg_apply_patches",
        "Source":  "\u003ch1 id=\"vcpkg_apply_patches\"\u003evcpkg_apply_patches\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eThis function has been deprecated in favor of the \u003ccode\u003ePATCHES\u003c/code\u003e argument to \u003ccode\u003evcpkg_from_github()\u003c/code\u003e et al.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_apply_patches.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eApply a set of patches to a source tree.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_apply_patches(\n    SOURCE_PATH \u0026lt;${SOURCE_PATH}\u0026gt;\n    [QUIET]\n    PATCHES \u0026lt;patch1.patch\u0026gt;...\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_apply_patches.cmake\"\u003escripts/cmake/vcpkg_apply_patches.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_buildpath_length_warning.html",
        "Name":  "vcpkg_buildpath_length_warning",
        "Source":  "\u003ch1 id=\"vcpkg_buildpath_length_warning\"\u003evcpkg_buildpath_length_warning\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_buildpath_length_warning.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWarns the user if their vcpkg installation path might be too long for the package they\u0027re installing.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_buildpath_length_warning(\u0026lt;N\u0026gt;)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003evcpkg_buildpath_length_warning\u003c/code\u003e warns the user if the number of bytes in the\u003cbr /\u003e\npath to \u003ccode\u003ebuildtrees\u003c/code\u003e is bigger than \u003ccode\u003eN\u003c/code\u003e. Note that this is simply a warning,\u003cbr /\u003e\nand isn\u0027t relied on for correctness.\u003c/p\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_buildpath_length_warning.cmake\"\u003escripts/cmake/vcpkg_buildpath_length_warning.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_build_cmake.html",
        "Name":  "vcpkg_build_cmake",
        "Source":  "\u003ch1 id=\"vcpkg_build_cmake\"\u003evcpkg_build_cmake\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_build_cmake.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThis function has been deprecated in favor of \u003ccode\u003evcpkg_cmake_build\u003c/code\u003e from the vcpkg-cmake port.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eBuild a cmake project.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_build_cmake([DISABLE_PARALLEL] [TARGET \u0026lt;target\u0026gt;])\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters:\u003c/h2\u003e\n\u003ch3 id=\"disable_parallel\"\u003eDISABLE_PARALLEL\u003c/h3\u003e\n\u003cp\u003eThe underlying buildsystem will be instructed to not parallelize\u003c/p\u003e\n\u003ch3 id=\"target\"\u003eTARGET\u003c/h3\u003e\n\u003cp\u003eThe target passed to the cmake build command (\u003ccode\u003ecmake --build . --target \u0026lt;target\u0026gt;\u003c/code\u003e). If not specified, no target will\u003cbr /\u003e\nbe passed.\u003c/p\u003e\n\u003ch3 id=\"add_bin_to_path\"\u003eADD_BIN_TO_PATH\u003c/h3\u003e\n\u003cp\u003eAdds the appropriate Release and Debug \u003ccode\u003ebin\u0026lt;/code\u0026gt; directories to the path during the build such that executables can run against the in-tree DLLs.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes:\u003c/h2\u003e\n\u003cp\u003eThis command should be preceeded by a call to \u003ca href=\"vcpkg_configure_cmake.md\"\u003e\u003ccode\u003evcpkg_configure_cmake()\u003c/code\u003e\u003c/a\u003e.\u003cbr /\u003e\nYou can use the alias \u003ca href=\"vcpkg_configure_cmake.md\"\u003e\u003ccode\u003evcpkg_install_cmake()\u003c/code\u003e\u003c/a\u003e function if your CMake script supports the\u003cbr /\u003e\n\"install\" target\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples:\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/zlib/portfile.cmake\"\u003ezlib\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/cpprestsdk/portfile.cmake\"\u003ecpprestsdk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/poco/portfile.cmake\"\u003epoco\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/opencv/portfile.cmake\"\u003eopencv\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_build_cmake.cmake\"\u003escripts/cmake/vcpkg_build_cmake.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_build_gn.html",
        "Name":  "vcpkg_build_gn",
        "Source":  "\u003ch1 id=\"vcpkg_build_gn\"\u003evcpkg_build_gn\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_build_gn.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBuild a GN project\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_build_gn(\n    [TARGETS \u0026lt;target\u0026gt;...]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters:\u003c/h2\u003e\n\u003ch3 id=\"targets\"\u003eTARGETS\u003c/h3\u003e\n\u003cp\u003eOnly build the specified targets.\u003c/p\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_build_gn.cmake\"\u003escripts/cmake/vcpkg_build_gn.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_build_make.html",
        "Name":  "vcpkg_build_make",
        "Source":  "\u003ch1 id=\"vcpkg_build_make\"\u003evcpkg_build_make\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_build_make.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBuild a linux makefile project.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_build_make([BUILD_TARGET \u0026lt;target\u0026gt;]\n                 [ADD_BIN_TO_PATH]\n                 [ENABLE_INSTALL]\n                 [MAKEFILE \u0026lt;makefileName\u0026gt;]\n                 [LOGFILE_ROOT \u0026lt;logfileroot\u0026gt;])\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"build_target\"\u003eBUILD_TARGET\u003c/h3\u003e\n\u003cp\u003eThe target passed to the make build command (\u003ccode\u003e./make \u0026lt;target\u0026gt;\u003c/code\u003e). If not specified, the \u0027all\u0027 target will\u003cbr /\u003e\nbe passed.\u003c/p\u003e\n\u003ch3 id=\"add_bin_to_path\"\u003eADD_BIN_TO_PATH\u003c/h3\u003e\n\u003cp\u003eAdds the appropriate Release and Debug \u003ccode\u003ebin\u0026lt;/code\u0026gt; directories to the path during the build such that executables can run against the in-tree DLLs.\u003c/p\u003e\n\u003ch3 id=\"enable_install\"\u003eENABLE_INSTALL\u003c/h3\u003e\n\u003cp\u003eIF the port supports the install target use vcpkg_install_make() instead of vcpkg_build_make()\u003c/p\u003e\n\u003ch3 id=\"makefile\"\u003eMAKEFILE\u003c/h3\u003e\n\u003cp\u003eSpecifies the Makefile as a relative path from the root of the sources passed to \u003ccode\u003evcpkg_configure_make()\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"build_target-1\"\u003eBUILD_TARGET\u003c/h3\u003e\n\u003cp\u003eThe target passed to the make build command (\u003ccode\u003e./make \u0026lt;target\u0026gt;\u003c/code\u003e). Defaults to \u0027all\u0027.\u003c/p\u003e\n\u003ch3 id=\"install_target\"\u003eINSTALL_TARGET\u003c/h3\u003e\n\u003cp\u003eThe target passed to the make build command (\u003ccode\u003e./make \u0026lt;target\u0026gt;\u003c/code\u003e) if \u003ccode\u003eENABLE_INSTALL\u003c/code\u003e is used. Defaults to \u0027install\u0027.\u003c/p\u003e\n\u003ch3 id=\"disable_parallel\"\u003eDISABLE_PARALLEL\u003c/h3\u003e\n\u003cp\u003eThe underlying buildsystem will be instructed to not parallelize\u003c/p\u003e\n\u003ch3 id=\"subpath\"\u003eSUBPATH\u003c/h3\u003e\n\u003cp\u003eAdditional subdir to invoke make in. Useful if only parts of a port should be built. \u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes:\u003c/h2\u003e\n\u003cp\u003eThis command should be preceeded by a call to \u003ca href=\"vcpkg_configure_make.md\"\u003e\u003ccode\u003evcpkg_configure_make()\u003c/code\u003e\u003c/a\u003e.\u003cbr /\u003e\nYou can use the alias \u003ca href=\"vcpkg_install_make.md\"\u003e\u003ccode\u003evcpkg_install_make()\u003c/code\u003e\u003c/a\u003e function if your makefile supports the\u003cbr /\u003e\n\"install\" target\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/x264/portfile.cmake\"\u003ex264\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/tcl/portfile.cmake\"\u003etcl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/freexl/portfile.cmake\"\u003efreexl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/libosip2/portfile.cmake\"\u003elibosip2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_build_make.cmake\"\u003escripts/cmake/vcpkg_build_make.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_build_msbuild.html",
        "Name":  "vcpkg_build_msbuild",
        "Source":  "\u003ch1 id=\"vcpkg_build_msbuild\"\u003evcpkg_build_msbuild\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_build_msbuild.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBuild a msbuild-based project. Deprecated in favor of \u003ccode\u003evcpkg_install_msbuild()\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_build_msbuild(\n    PROJECT_PATH \u0026lt;${SOURCE_PATH}/port.sln\u0026gt;\n    [RELEASE_CONFIGURATION \u0026lt;Release\u0026gt;]\n    [DEBUG_CONFIGURATION \u0026lt;Debug\u0026gt;]\n    [TARGET \u0026lt;Build\u0026gt;]\n    [TARGET_PLATFORM_VERSION \u0026lt;10.0.15063.0\u0026gt;]\n    [PLATFORM \u0026lt;${TRIPLET_SYSTEM_ARCH}\u0026gt;]\n    [PLATFORM_TOOLSET \u0026lt;${VCPKG_PLATFORM_TOOLSET}\u0026gt;]\n    [OPTIONS \u0026lt;/p:ZLIB_INCLUDE_PATH=X\u0026gt;...]\n    [OPTIONS_RELEASE \u0026lt;/p:ZLIB_LIB=X\u0026gt;...]\n    [OPTIONS_DEBUG \u0026lt;/p:ZLIB_LIB=X\u0026gt;...]\n    [USE_VCPKG_INTEGRATION]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"use_vcpkg_integration\"\u003eUSE_VCPKG_INTEGRATION\u003c/h3\u003e\n\u003cp\u003eApply the normal \u003ccode\u003eintegrate install\u003c/code\u003e integration for building the project.\u003c/p\u003e\n\u003cp\u003eBy default, projects built with this command will not automatically link libraries or have header paths set.\u003c/p\u003e\n\u003ch3 id=\"project_path\"\u003ePROJECT_PATH\u003c/h3\u003e\n\u003cp\u003eThe path to the solution (\u003ccode\u003e.sln\u003c/code\u003e) or project (\u003ccode\u003e.vcxproj\u003c/code\u003e) file.\u003c/p\u003e\n\u003ch3 id=\"release_configuration\"\u003eRELEASE_CONFIGURATION\u003c/h3\u003e\n\u003cp\u003eThe configuration (\u003ccode\u003e/p:Configuration\u003c/code\u003e msbuild parameter) used for Release builds.\u003c/p\u003e\n\u003ch3 id=\"debug_configuration\"\u003eDEBUG_CONFIGURATION\u003c/h3\u003e\n\u003cp\u003eThe configuration (\u003ccode\u003e/p:Configuration\u003c/code\u003e msbuild parameter)\u003cbr /\u003e\nused for Debug builds.\u003c/p\u003e\n\u003ch3 id=\"target_platform_version\"\u003eTARGET_PLATFORM_VERSION\u003c/h3\u003e\n\u003cp\u003eThe WindowsTargetPlatformVersion (\u003ccode\u003e/p:WindowsTargetPlatformVersion\u003c/code\u003e msbuild parameter)\u003c/p\u003e\n\u003ch3 id=\"target\"\u003eTARGET\u003c/h3\u003e\n\u003cp\u003eThe MSBuild target to build. (\u003ccode\u003e/t:\u0026lt;TARGET\u0026gt;\u003c/code\u003e)\u003c/p\u003e\n\u003ch3 id=\"platform\"\u003ePLATFORM\u003c/h3\u003e\n\u003cp\u003eThe platform (\u003ccode\u003e/p:Platform\u003c/code\u003e msbuild parameter) used for the build.\u003c/p\u003e\n\u003ch3 id=\"platform_toolset\"\u003ePLATFORM_TOOLSET\u003c/h3\u003e\n\u003cp\u003eThe platform toolset (\u003ccode\u003e/p:PlatformToolset\u003c/code\u003e msbuild parameter) used for the build.\u003c/p\u003e\n\u003ch3 id=\"options\"\u003eOPTIONS\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to msbuild for all builds.\u003c/p\u003e\n\u003ch3 id=\"options_release\"\u003eOPTIONS_RELEASE\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to msbuild for Release builds. These are in addition to \u003ccode\u003eOPTIONS\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"options_debug\"\u003eOPTIONS_DEBUG\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to msbuild for Debug builds. These are in addition to \u003ccode\u003eOPTIONS\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/chakracore/portfile.cmake\"\u003echakracore\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_build_msbuild.cmake\"\u003escripts/cmake/vcpkg_build_msbuild.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_build_ninja.html",
        "Name":  "vcpkg_build_ninja",
        "Source":  "\u003ch1 id=\"vcpkg_build_ninja\"\u003evcpkg_build_ninja\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_build_ninja.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBuild a ninja project\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_build_ninja(\n    [TARGETS \u0026lt;target\u0026gt;...]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters:\u003c/h2\u003e\n\u003ch3 id=\"targets\"\u003eTARGETS\u003c/h3\u003e\n\u003cp\u003eOnly build the specified targets.\u003c/p\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_build_ninja.cmake\"\u003escripts/cmake/vcpkg_build_ninja.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_build_nmake.html",
        "Name":  "vcpkg_build_nmake",
        "Source":  "\u003ch1 id=\"vcpkg_build_nmake\"\u003evcpkg_build_nmake\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_build_nmake.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBuild a msvc makefile project.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_build_nmake(\n    SOURCE_PATH \u0026lt;${SOURCE_PATH}\u0026gt;\n    [NO_DEBUG]\n    [TARGET \u0026lt;all\u0026gt;]\n    [PROJECT_SUBPATH \u0026lt;${SUBPATH}\u0026gt;]\n    [PROJECT_NAME \u0026lt;${MAKEFILE_NAME}\u0026gt;]\n    [PRERUN_SHELL \u0026lt;${SHELL_PATH}\u0026gt;]\n    [PRERUN_SHELL_DEBUG \u0026lt;${SHELL_PATH}\u0026gt;]\n    [PRERUN_SHELL_RELEASE \u0026lt;${SHELL_PATH}\u0026gt;]\n    [OPTIONS \u0026lt;-DUSE_THIS_IN_ALL_BUILDS=1\u0026gt;...]\n    [OPTIONS_RELEASE \u0026lt;-DOPTIMIZE=1\u0026gt;...]\n    [OPTIONS_DEBUG \u0026lt;-DDEBUGGABLE=1\u0026gt;...]\n    [TARGET \u0026lt;target\u0026gt;])\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"source_path\"\u003eSOURCE_PATH\u003c/h3\u003e\n\u003cp\u003eSpecifies the directory containing the source files.\u003cbr /\u003e\nBy convention, this is usually set in the portfile as the variable \u003ccode\u003eSOURCE_PATH\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"project_subpath\"\u003ePROJECT_SUBPATH\u003c/h3\u003e\n\u003cp\u003eSpecifies the sub directory containing the \u003ccode\u003emakefile.vc\u003c/code\u003e/\u003ccode\u003emakefile.mak\u003c/code\u003e/\u003ccode\u003emakefile.msvc\u003c/code\u003e or other msvc makefile.\u003c/p\u003e\n\u003ch3 id=\"project_name\"\u003ePROJECT_NAME\u003c/h3\u003e\n\u003cp\u003eSpecifies the name of msvc makefile name.\u003cbr /\u003e\nDefault is \u003ccode\u003emakefile.vc\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"no_debug\"\u003eNO_DEBUG\u003c/h3\u003e\n\u003cp\u003eThis port doesn\u0027t support debug mode.\u003c/p\u003e\n\u003ch3 id=\"enable_install\"\u003eENABLE_INSTALL\u003c/h3\u003e\n\u003cp\u003eInstall binaries after build.\u003c/p\u003e\n\u003ch3 id=\"prerun_shell\"\u003ePRERUN_SHELL\u003c/h3\u003e\n\u003cp\u003eScript that needs to be called before build\u003c/p\u003e\n\u003ch3 id=\"prerun_shell_debug\"\u003ePRERUN_SHELL_DEBUG\u003c/h3\u003e\n\u003cp\u003eScript that needs to be called before debug build\u003c/p\u003e\n\u003ch3 id=\"prerun_shell_release\"\u003ePRERUN_SHELL_RELEASE\u003c/h3\u003e\n\u003cp\u003eScript that needs to be called before release build\u003c/p\u003e\n\u003ch3 id=\"options\"\u003eOPTIONS\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to generate during the generation.\u003c/p\u003e\n\u003ch3 id=\"options_release\"\u003eOPTIONS_RELEASE\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to generate during the Release generation. These are in addition to \u003ccode\u003eOPTIONS\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"options_debug\"\u003eOPTIONS_DEBUG\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to generate during the Debug generation. These are in addition to \u003ccode\u003eOPTIONS\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"target\"\u003eTARGET\u003c/h3\u003e\n\u003cp\u003eThe target passed to the nmake build command (\u003ccode\u003enmake/nmake install\u003c/code\u003e). If not specified, no target will\u003cbr /\u003e\nbe passed.\u003c/p\u003e\n\u003ch3 id=\"add_bin_to_path\"\u003eADD_BIN_TO_PATH\u003c/h3\u003e\n\u003cp\u003eAdds the appropriate Release and Debug \u003ccode\u003ebin\u0026lt;/code\u0026gt; directories to the path during the build such that executables can run against the in-tree DLLs.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes:\u003c/h2\u003e\n\u003cp\u003eThis command should be preceeded by a call to \u003ca href=\"vcpkg_configure_nmake.md\"\u003e\u003ccode\u003evcpkg_configure_nmake()\u003c/code\u003e\u003c/a\u003e.\u003cbr /\u003e\nYou can use the alias \u003ca href=\"vcpkg_install_nmake.md\"\u003e\u003ccode\u003evcpkg_install_nmake()\u003c/code\u003e\u003c/a\u003e function if your makefile supports the\u003cbr /\u003e\n\"install\" target\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/tcl/portfile.cmake\"\u003etcl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/freexl/portfile.cmake\"\u003efreexl\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_build_nmake.cmake\"\u003escripts/cmake/vcpkg_build_nmake.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_build_qmake.html",
        "Name":  "vcpkg_build_qmake",
        "Source":  "\u003ch1 id=\"vcpkg_build_qmake\"\u003evcpkg_build_qmake\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_build_qmake.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBuild a qmake-based project, previously configured using vcpkg_configure_qmake.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_build_qmake()\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_build_qmake.cmake\"\u003escripts/cmake/vcpkg_build_qmake.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_check_features.html",
        "Name":  "vcpkg_check_features",
        "Source":  "\u003ch1 id=\"vcpkg_check_features\"\u003evcpkg_check_features\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_check_features.md\"\u003evcpkg repo\u003c/a\u003e.\u003cbr /\u003e\nCheck if one or more features are a part of a package installation.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_check_features(\n    OUT_FEATURE_OPTIONS \u0026lt;out-var\u0026gt;\n    [PREFIX \u0026lt;prefix\u0026gt;]\n    [FEATURES\n        [\u0026lt;feature-name\u0026gt; \u0026lt;feature-var\u0026gt;]...\n        ]\n    [INVERTED_FEATURES\n        [\u0026lt;feature-name\u0026gt; \u0026lt;feature-var\u0026gt;]...\n        ]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e\u0026lt;out-var\u0026gt;\u003c/code\u003e should be set to \u003ccode\u003eFEATURE_OPTIONS\u003c/code\u003e by convention.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003evcpkg_check_features()\u003c/code\u003e will:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003efor each \u003ccode\u003e\u0026lt;feature-name\u0026gt;\u003c/code\u003e passed in \u003ccode\u003eFEATURES\u003c/code\u003e:\u003cul\u003e\n\u003cli\u003eif the feature is set, add \u003ccode\u003e-D\u0026lt;feature-var\u0026gt;=ON\u003c/code\u003e to \u003ccode\u003e\u0026lt;out-var\u0026gt;\u003c/code\u003e,\u003cbr /\u003e\nand set \u003ccode\u003e\u0026lt;prefix\u0026gt;_\u0026lt;feature-var\u0026gt;\u003c/code\u003e to ON.\u003c/li\u003e\n\u003cli\u003eif the feature is not set, add \u003ccode\u003e-D\u0026lt;feature-var\u0026gt;=OFF\u003c/code\u003e to \u003ccode\u003e\u0026lt;out-var\u0026gt;\u003c/code\u003e,\u003cbr /\u003e\nand set \u003ccode\u003e\u0026lt;prefix\u0026gt;_\u0026lt;feature-var\u0026gt;\u003c/code\u003e to OFF.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003efor each \u003ccode\u003e\u0026lt;feature-name\u0026gt;\u003c/code\u003e passed in \u003ccode\u003eINVERTED_FEATURES\u003c/code\u003e:\u003cul\u003e\n\u003cli\u003eif the feature is set, add \u003ccode\u003e-D\u0026lt;feature-var\u0026gt;=OFF\u003c/code\u003e to \u003ccode\u003e\u0026lt;out-var\u0026gt;\u003c/code\u003e,\u003cbr /\u003e\nand set \u003ccode\u003e\u0026lt;prefix\u0026gt;_\u0026lt;feature-var\u0026gt;\u003c/code\u003e to OFF.\u003c/li\u003e\n\u003cli\u003eif the feature is not set, add \u003ccode\u003e-D\u0026lt;feature-var\u0026gt;=ON\u003c/code\u003e to \u003ccode\u003e\u0026lt;out-var\u0026gt;\u003c/code\u003e,\u003cbr /\u003e\nand set \u003ccode\u003e\u0026lt;prefix\u0026gt;_\u0026lt;feature-var\u0026gt;\u003c/code\u003e to ON.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf \u003ccode\u003e\u0026lt;prefix\u0026gt;\u003c/code\u003e is not passed, then the feature vars set are simply \u003ccode\u003e\u0026lt;feature-var\u0026gt;\u003c/code\u003e,\u003cbr /\u003e\nnot \u003ccode\u003e_\u0026lt;feature-var\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf \u003ccode\u003eINVERTED_FEATURES\u003c/code\u003e is not passed, then the \u003ccode\u003eFEATURES\u003c/code\u003e keyword is optional.\u003cbr /\u003e\nThis behavior is deprecated.\u003c/p\u003e\n\u003cp\u003eIf the same \u003ccode\u003e\u0026lt;feature-var\u0026gt;\u003c/code\u003e is passed multiple times,\u003cbr /\u003e\nthen \u003ccode\u003evcpkg_check_features\u003c/code\u003e will cause a fatal error,\u003cbr /\u003e\nsince that is a bug.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003ch3 id=\"example-1-regular-features\"\u003eExample 1: Regular features\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003e$ ./vcpkg install mimalloc[asm,secure]\n\n# ports/mimalloc/portfile.cmake\nvcpkg_check_features(OUT_FEATURE_OPTIONS FEATURE_OPTIONS\n    FEATURES\n        asm       MI_SEE_ASM\n        override  MI_OVERRIDE\n        secure    MI_SECURE\n)\n\nvcpkg_configure_cmake(\n    SOURCE_PATH ${SOURCE_PATH}\n    PREFER_NINJA\n    OPTIONS\n        # Expands to \"-DMI_SEE_ASM=ON;-DMI_OVERRIDE=OFF;-DMI_SECURE=ON\"\n        ${FEATURE_OPTIONS}\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"example-2-inverted-features\"\u003eExample 2: Inverted features\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003e$ ./vcpkg install cpprestsdk[websockets]\n\n# ports/cpprestsdk/portfile.cmake\nvcpkg_check_features(\n    INVERTED_FEATURES\n        brotli      CPPREST_EXCLUDE_BROTLI\n        websockets  CPPREST_EXCLUDE_WEBSOCKETS\n)\n\nvcpkg_configure_cmake(\n    SOURCE_PATH ${SOURCE_PATH}\n    PREFER_NINJA\n    OPTIONS\n        # Expands to \"-DCPPREST_EXCLUDE_BROTLI=ON;-DCPPREST_EXCLUDE_WEBSOCKETS=OFF\"\n        ${FEATURE_OPTIONS}\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"example-3-set-multiple-options-for-same-feature\"\u003eExample 3: Set multiple options for same feature\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003e$ ./vcpkg install pcl[cuda]\n\n# ports/pcl/portfile.cmake\nvcpkg_check_features(\n    FEATURES\n        cuda  WITH_CUDA\n        cuda  BUILD_CUDA\n        cuda  BUILD_GPU\n)\n\nvcpkg_configure_cmake(\n    SOURCE_PATH ${SOURCE_PATH}\n    PREFER_NINJA\n    OPTIONS\n        # Expands to \"-DWITH_CUDA=ON;-DBUILD_CUDA=ON;-DBUILD_GPU=ON\"\n        ${FEATURE_OPTIONS}\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"example-4-use-regular-and-inverted-features\"\u003eExample 4: Use regular and inverted features\u003c/h3\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003e$ ./vcpkg install rocksdb[tbb]\n\n# ports/rocksdb/portfile.cmake\nvcpkg_check_features(\n    FEATURES\n        tbb   WITH_TBB\n    INVERTED_FEATURES\n        tbb   ROCKSDB_IGNORE_PACKAGE_TBB\n)\n\nvcpkg_configure_cmake(\n    SOURCE_PATH ${SOURCE_PATH}\n    PREFER_NINJA\n    OPTIONS\n        # Expands to \"-DWITH_TBB=ON;-DROCKSDB_IGNORE_PACKAGE_TBB=OFF\"\n        ${FEATURE_OPTIONS}\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"examples-in-portfiles\"\u003eExamples in portfiles\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/microsoft/vcpkg/blob/master/ports/cpprestsdk/portfile.cmake\"\u003ecpprestsdk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/microsoft/vcpkg/blob/master/ports/pcl/portfile.cmake\"\u003epcl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/microsoft/vcpkg/blob/master/ports/rocksdb/portfile.cmake\"\u003erocksdb\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_check_features.cmake\"\u003escripts/cmake/vcpkg_check_features.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_check_linkage.html",
        "Name":  "vcpkg_check_linkage",
        "Source":  "\u003ch1 id=\"vcpkg_check_linkage\"\u003evcpkg_check_linkage\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_check_linkage.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAsserts the available library and CRT linkage options for the port.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_check_linkage(\n    [ONLY_STATIC_LIBRARY | ONLY_DYNAMIC_LIBRARY]\n    [ONLY_STATIC_CRT | ONLY_DYNAMIC_CRT]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"only_static_library\"\u003eONLY_STATIC_LIBRARY\u003c/h3\u003e\n\u003cp\u003eIndicates that this port can only be built with static library linkage.\u003c/p\u003e\n\u003cp\u003eNote: If the user requested a dynamic build ONLY_STATIC_LIBRARY will result in a note being printed, not a fatal error.\u003c/p\u003e\n\u003ch3 id=\"only_dynamic_library\"\u003eONLY_DYNAMIC_LIBRARY\u003c/h3\u003e\n\u003cp\u003eIndicates that this port can only be built with dynamic/shared library linkage.\u003c/p\u003e\n\u003ch3 id=\"only_static_crt\"\u003eONLY_STATIC_CRT\u003c/h3\u003e\n\u003cp\u003eIndicates that this port can only be built with static CRT linkage.\u003c/p\u003e\n\u003ch3 id=\"only_dynamic_crt\"\u003eONLY_DYNAMIC_CRT\u003c/h3\u003e\n\u003cp\u003eIndicates that this port can only be built with dynamic/shared CRT linkage.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cp\u003eThis command will either alter the settings for \u003ccode\u003eVCPKG_LIBRARY_LINKAGE\u003c/code\u003e or fail, depending on what was requested by the user versus what the library supports.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/abseil/portfile.cmake\"\u003eabseil\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_check_linkage.cmake\"\u003escripts/cmake/vcpkg_check_linkage.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_clean_executables_in_bin.html",
        "Name":  "vcpkg_clean_executables_in_bin",
        "Source":  "\u003ch1 id=\"vcpkg_clean_executables_in_bin\"\u003evcpkg_clean_executables_in_bin\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_clean_executables_in_bin.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eRemove specified executables found in \u003ccode\u003e${CURRENT_PACKAGES_DIR}/bin\u003c/code\u003e and \u003ccode\u003e${CURRENT_PACKAGES_DIR}/debug/bin\u003c/code\u003e. If, after all specified executables have been removed, and the \u003ccode\u003ebin\u003c/code\u003e and \u003ccode\u003edebug/bin\u003c/code\u003e directories are empty, then also delete \u003ccode\u003ebin\u003c/code\u003e and \u003ccode\u003edebug/bin\u003c/code\u003e directories.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_clean_executables_in_bin(\n    FILE_NAMES \u0026lt;file1\u0026gt;...\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"file_names\"\u003eFILE_NAMES\u003c/h3\u003e\n\u003cp\u003eA list of executable filenames without extension.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cp\u003eGenerally, there is no need to call this function manually. Instead, pass an extra \u003ccode\u003eAUTO_CLEAN\u003c/code\u003e argument when calling \u003ccode\u003evcpkg_copy_tools\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/microsoft/vcpkg/blob/master/ports/czmq/portfile.cmake\"\u003eczmq\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_clean_executables_in_bin.cmake\"\u003escripts/cmake/vcpkg_clean_executables_in_bin.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_clean_msbuild.html",
        "Name":  "vcpkg_clean_msbuild",
        "Source":  "\u003ch1 id=\"vcpkg_clean_msbuild\"\u003evcpkg_clean_msbuild\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_clean_msbuild.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eClean intermediate files generated by \u003ccode\u003evcpkg_install_msbuild()\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_clean_msbuild()\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/xalan-c/portfile.cmake\"\u003exalan-c\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_clean_msbuild.cmake\"\u003escripts/cmake/vcpkg_clean_msbuild.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_common_definitions.html",
        "Name":  "vcpkg_common_definitions",
        "Source":  "\u003ch1 id=\"vcpkg_common_definitions\"\u003evcpkg_common_definitions\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_common_definitions.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis file defines the following variabls which are commonly needed or used in portfiles:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003eVCPKG_TARGET_IS_\u0026lt;target\u0026gt;                 with \u0026lt;target\u0026gt; being one of the following: WINDOWS, UWP, LINUX, OSX, ANDROID, FREEBSD, OPENBSD. only defined if \u0026lt;target\u0026gt;\nVCPKG_HOST_IS_\u0026lt;target\u0026gt;                   with \u0026lt;host\u0026gt; being one of the following: WINDOWS, LINUX, OSX, FREEBSD, OPENBSD. only defined if \u0026lt;host\u0026gt;\nVCPKG_HOST_PATH_SEPARATOR                Host specific path separator (USAGE: \"\u0026lt;something\u0026gt;${VCPKG_HOST_PATH_SEPARATOR}\u0026lt;something\u0026gt;\"; only use and pass variables with VCPKG_HOST_PATH_SEPARATOR within \"\")\nVCPKG_HOST_EXECUTABLE_SUFFIX             executable suffix of the host\nVCPKG_TARGET_EXECUTABLE_SUFFIX           executable suffix of the target\nVCPKG_TARGET_STATIC_LIBRARY_PREFIX       static library prefix for target (same as CMAKE_STATIC_LIBRARY_PREFIX)\nVCPKG_TARGET_STATIC_LIBRARY_SUFFIX       static library suffix for target (same as CMAKE_STATIC_LIBRARY_SUFFIX)\nVCPKG_TARGET_SHARED_LIBRARY_PREFIX       shared library prefix for target (same as CMAKE_SHARED_LIBRARY_PREFIX)\nVCPKG_TARGET_SHARED_LIBRARY_SUFFIX       shared library suffix for target (same as CMAKE_SHARED_LIBRARY_SUFFIX)\nVCPKG_TARGET_IMPORT_LIBRARY_PREFIX       import library prefix for target (same as CMAKE_IMPORT_LIBRARY_PREFIX)\nVCPKG_TARGET_IMPORT_LIBRARY_SUFFIX       import library suffix for target (same as CMAKE_IMPORT_LIBRARY_SUFFIX)\nVCPKG_FIND_LIBRARY_PREFIXES              target dependent prefixes used for find_library calls in portfiles\nVCPKG_FIND_LIBRARY_SUFFIXES              target dependent suffixes used for find_library calls in portfiles\nVCPKG_SYSTEM_LIBRARIES                   list of libraries are provide by the toolchain and are not managed by vcpkg\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCMAKE_STATIC_LIBRARY_(PREFIX|SUFFIX), CMAKE_SHARED_LIBRARY_(PREFIX|SUFFIX) and CMAKE_IMPORT_LIBRARY_(PREFIX|SUFFIX) are defined for the target\u003cbr /\u003e\nFurthermore the variables CMAKE_FIND_LIBRARY_(PREFIXES|SUFFIXES) are also defined for the target so that\u003cbr /\u003e\nportfiles are able to use find_library calls to discover dependent libraries within the current triplet for ports.\u003c/p\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_common_definitions.cmake\"\u003escripts/cmake/vcpkg_common_definitions.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_configure_cmake.html",
        "Name":  "vcpkg_configure_cmake",
        "Source":  "\u003ch1 id=\"vcpkg_configure_cmake\"\u003evcpkg_configure_cmake\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_configure_cmake.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThis function has been deprecated in favor of \u003ccode\u003evcpkg_cmake_configure\u003c/code\u003e from the vcpkg-cmake port.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eConfigure CMake for Debug and Release builds of a project.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_configure_cmake(\n    SOURCE_PATH \u0026lt;${SOURCE_PATH}\u0026gt;\n    [PREFER_NINJA]\n    [DISABLE_PARALLEL_CONFIGURE]\n    [NO_CHARSET_FLAG]\n    [GENERATOR \u0026lt;\"NMake Makefiles\"\u0026gt;]\n    [OPTIONS \u0026lt;-DUSE_THIS_IN_ALL_BUILDS=1\u0026gt;...]\n    [OPTIONS_RELEASE \u0026lt;-DOPTIMIZE=1\u0026gt;...]\n    [OPTIONS_DEBUG \u0026lt;-DDEBUGGABLE=1\u0026gt;...]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"source_path\"\u003eSOURCE_PATH\u003c/h3\u003e\n\u003cp\u003eSpecifies the directory containing the \u003ccode\u003eCMakeLists.txt\u003c/code\u003e.\u003cbr /\u003e\nBy convention, this is usually set in the portfile as the variable \u003ccode\u003eSOURCE_PATH\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"prefer_ninja\"\u003ePREFER_NINJA\u003c/h3\u003e\n\u003cp\u003eIndicates that, when available, Vcpkg should use Ninja to perform the build.\u003cbr /\u003e\nThis should be specified unless the port is known to not work under Ninja.\u003c/p\u003e\n\u003ch3 id=\"disable_parallel_configure\"\u003eDISABLE_PARALLEL_CONFIGURE\u003c/h3\u003e\n\u003cp\u003eDisables running the CMake configure step in parallel.\u003cbr /\u003e\nThis is needed for libraries which write back into their source directory during configure.\u003c/p\u003e\n\u003cp\u003eThis also disables CMAKE_DISABLE_SOURCE_CHANGES.\u003c/p\u003e\n\u003ch3 id=\"no_charset_flag\"\u003eNO_CHARSET_FLAG\u003c/h3\u003e\n\u003cp\u003eDisables passing \u003ccode\u003eutf-8\u003c/code\u003e as the default character set to \u003ccode\u003eCMAKE_C_FLAGS\u003c/code\u003e and \u003ccode\u003eCMAKE_CXX_FLAGS\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis is needed for libraries that set their own source code\u0027s character set.\u003c/p\u003e\n\u003ch3 id=\"generator\"\u003eGENERATOR\u003c/h3\u003e\n\u003cp\u003eSpecifies the precise generator to use.\u003c/p\u003e\n\u003cp\u003eThis is useful if some project-specific buildsystem has been wrapped in a cmake script that won\u0027t perform an actual build.\u003cbr /\u003e\nIf used for this purpose, it should be set to \u003ccode\u003e\"NMake Makefiles\"\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"options\"\u003eOPTIONS\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to CMake during the configuration.\u003c/p\u003e\n\u003ch3 id=\"options_release\"\u003eOPTIONS_RELEASE\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to CMake during the Release configuration. These are in addition to \u003ccode\u003eOPTIONS\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"options_debug\"\u003eOPTIONS_DEBUG\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to CMake during the Debug configuration. These are in addition to \u003ccode\u003eOPTIONS\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"logname\"\u003eLOGNAME\u003c/h3\u003e\n\u003cp\u003eName of the log to write the output of the configure call to.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cp\u003eThis command supplies many common arguments to CMake. To see the full list, examine the source.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/zlib/portfile.cmake\"\u003ezlib\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/cpprestsdk/portfile.cmake\"\u003ecpprestsdk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/poco/portfile.cmake\"\u003epoco\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/opencv/portfile.cmake\"\u003eopencv\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_configure_cmake.cmake\"\u003escripts/cmake/vcpkg_configure_cmake.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_configure_gn.html",
        "Name":  "vcpkg_configure_gn",
        "Source":  "\u003ch1 id=\"vcpkg_configure_gn\"\u003evcpkg_configure_gn\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_configure_gn.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eGenerate Ninja (GN) targets\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_configure_gn(\n    SOURCE_PATH \u0026lt;SOURCE_PATH\u0026gt;\n    [OPTIONS \u0026lt;OPTIONS\u0026gt;]\n    [OPTIONS_DEBUG \u0026lt;OPTIONS_DEBUG\u0026gt;]\n    [OPTIONS_RELEASE \u0026lt;OPTIONS_RELEASE\u0026gt;]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters:\u003c/h2\u003e\n\u003ch3 id=\"source_path-required\"\u003eSOURCE_PATH (required)\u003c/h3\u003e\n\u003cp\u003eThe path to the GN project.\u003c/p\u003e\n\u003ch3 id=\"options\"\u003eOPTIONS\u003c/h3\u003e\n\u003cp\u003eOptions to be passed to both the debug and release targets.\u003cbr /\u003e\nNote: Must be provided as a space-separated string.\u003c/p\u003e\n\u003ch3 id=\"options_debug-space-separated-string\"\u003eOPTIONS_DEBUG (space-separated string)\u003c/h3\u003e\n\u003cp\u003eOptions to be passed to the debug target.\u003c/p\u003e\n\u003ch3 id=\"options_release-space-separated-string\"\u003eOPTIONS_RELEASE (space-separated string)\u003c/h3\u003e\n\u003cp\u003eOptions to be passed to the release target.\u003c/p\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_configure_gn.cmake\"\u003escripts/cmake/vcpkg_configure_gn.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_configure_make.html",
        "Name":  "vcpkg_configure_make",
        "Source":  "\u003ch1 id=\"vcpkg_configure_make\"\u003evcpkg_configure_make\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_configure_make.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eConfigure configure for Debug and Release builds of a project.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_configure_make(\n    SOURCE_PATH \u0026lt;${SOURCE_PATH}\u0026gt;\n    [AUTOCONFIG]\n    [USE_WRAPPERS]\n    [DETERMINE_BUILD_TRIPLET]\n    [BUILD_TRIPLET \"--host=x64 --build=i686-unknown-pc\"]\n    [NO_ADDITIONAL_PATHS]\n    [CONFIG_DEPENDENT_ENVIRONMENT \u0026lt;SOME_VAR\u0026gt;...]\n    [CONFIGURE_ENVIRONMENT_VARIABLES \u0026lt;SOME_ENVVAR\u0026gt;...]\n    [ADD_BIN_TO_PATH]\n    [NO_DEBUG]\n    [SKIP_CONFIGURE]\n    [PROJECT_SUBPATH \u0026lt;${PROJ_SUBPATH}\u0026gt;]\n    [PRERUN_SHELL \u0026lt;${SHELL_PATH}\u0026gt;]\n    [OPTIONS \u0026lt;-DUSE_THIS_IN_ALL_BUILDS=1\u0026gt;...]\n    [OPTIONS_RELEASE \u0026lt;-DOPTIMIZE=1\u0026gt;...]\n    [OPTIONS_DEBUG \u0026lt;-DDEBUGGABLE=1\u0026gt;...]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"source_path\"\u003eSOURCE_PATH\u003c/h3\u003e\n\u003cp\u003eSpecifies the directory containing the \u003ccode\u003econfigure\u003c/code\u003e/\u003ccode\u003econfigure.ac\u003c/code\u003e.\u003cbr /\u003e\nBy convention, this is usually set in the portfile as the variable \u003ccode\u003eSOURCE_PATH\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"project_subpath\"\u003ePROJECT_SUBPATH\u003c/h3\u003e\n\u003cp\u003eSpecifies the directory containing the \u003ccode\u003e`configure\u003c/code\u003e/\u003ccode\u003econfigure.ac\u003c/code\u003e.\u003cbr /\u003e\nBy convention, this is usually set in the portfile as the variable \u003ccode\u003eSOURCE_PATH\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"skip_configure\"\u003eSKIP_CONFIGURE\u003c/h3\u003e\n\u003cp\u003eSkip configure process\u003c/p\u003e\n\u003ch3 id=\"use_wrappers\"\u003eUSE_WRAPPERS\u003c/h3\u003e\n\u003cp\u003eUse autotools ar-lib and compile wrappers (only applies to windows cl and lib)\u003c/p\u003e\n\u003ch3 id=\"build_triplet\"\u003eBUILD_TRIPLET\u003c/h3\u003e\n\u003cp\u003eUsed to pass custom --build/--target/--host to configure. Can be globally overwritten by VCPKG_MAKE_BUILD_TRIPLET\u003c/p\u003e\n\u003ch3 id=\"determine_build_triplet\"\u003eDETERMINE_BUILD_TRIPLET\u003c/h3\u003e\n\u003cp\u003eFor ports having a configure script following the autotools rules for selecting the triplet\u003c/p\u003e\n\u003ch3 id=\"no_additional_paths\"\u003eNO_ADDITIONAL_PATHS\u003c/h3\u003e\n\u003cp\u003eDon\u0027t pass any additional paths except for --prefix to the configure call\u003c/p\u003e\n\u003ch3 id=\"autoconfig\"\u003eAUTOCONFIG\u003c/h3\u003e\n\u003cp\u003eNeed to use autoconfig to generate configure file.\u003c/p\u003e\n\u003ch3 id=\"prerun_shell\"\u003ePRERUN_SHELL\u003c/h3\u003e\n\u003cp\u003eScript that needs to be called before configuration (do not use for batch files which simply call autoconf or configure)\u003c/p\u003e\n\u003ch3 id=\"add_bin_to_path\"\u003eADD_BIN_TO_PATH\u003c/h3\u003e\n\u003cp\u003eAdds the appropriate Release and Debug \u003ccode\u003ebin\u0026lt;/code\u0026gt; directories to the path during configure such that executables can run against the in-tree DLLs.\u003c/p\u003e\n\u003ch2 id=\"disable_verbose_flags\"\u003eDISABLE_VERBOSE_FLAGS\u003c/h2\u003e\n\u003cp\u003edo not pass \u0027--disable-silent-rules --verbose\u0027 to configure\u003c/p\u003e\n\u003ch3 id=\"options\"\u003eOPTIONS\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to configure during the configuration.\u003c/p\u003e\n\u003ch3 id=\"options_release\"\u003eOPTIONS_RELEASE\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to configure during the Release configuration. These are in addition to \u003ccode\u003eOPTIONS\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"options_debug\"\u003eOPTIONS_DEBUG\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to configure during the Debug configuration. These are in addition to \u003ccode\u003eOPTIONS\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"config_dependent_environment\"\u003eCONFIG_DEPENDENT_ENVIRONMENT\u003c/h3\u003e\n\u003cp\u003eList of additional configuration dependent environment variables to set. \u003cbr /\u003e\nPass SOMEVAR to set the environment and have SOMEVAR_(DEBUG|RELEASE) set in the portfile to the appropriate values\u003cbr /\u003e\nGeneral environment variables can be set from within the portfile itself. \u003c/p\u003e\n\u003ch3 id=\"configure_environment_variables\"\u003eCONFIGURE_ENVIRONMENT_VARIABLES\u003c/h3\u003e\n\u003cp\u003eList of additional environment variables to pass via the configure call. \u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cp\u003eThis command supplies many common arguments to configure. To see the full list, examine the source.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/x264/portfile.cmake\"\u003ex264\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/tcl/portfile.cmake\"\u003etcl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/freexl/portfile.cmake\"\u003efreexl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/libosip2/portfile.cmake\"\u003elibosip2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_configure_make.cmake\"\u003escripts/cmake/vcpkg_configure_make.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_configure_meson.html",
        "Name":  "vcpkg_configure_meson",
        "Source":  "\u003ch1 id=\"vcpkg_configure_meson\"\u003evcpkg_configure_meson\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_configure_meson.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eConfigure Meson for Debug and Release builds of a project.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_configure_meson(\n    SOURCE_PATH \u0026lt;${SOURCE_PATH}\u0026gt;\n    [OPTIONS \u0026lt;-DUSE_THIS_IN_ALL_BUILDS=1\u0026gt;...]\n    [OPTIONS_RELEASE \u0026lt;-DOPTIMIZE=1\u0026gt;...]\n    [OPTIONS_DEBUG \u0026lt;-DDEBUGGABLE=1\u0026gt;...]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"source_path\"\u003eSOURCE_PATH\u003c/h3\u003e\n\u003cp\u003eSpecifies the directory containing the \u003ccode\u003emeson.build\u003c/code\u003e.\u003cbr /\u003e\nBy convention, this is usually set in the portfile as the variable \u003ccode\u003eSOURCE_PATH\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"options\"\u003eOPTIONS\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to Meson during the configuration.\u003c/p\u003e\n\u003ch3 id=\"options_release\"\u003eOPTIONS_RELEASE\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to Meson during the Release configuration. These are in addition to \u003ccode\u003eOPTIONS\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"options_debug\"\u003eOPTIONS_DEBUG\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to Meson during the Debug configuration. These are in addition to \u003ccode\u003eOPTIONS\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cp\u003eThis command supplies many common arguments to Meson. To see the full list, examine the source.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/fribidi/portfile.cmake\"\u003efribidi\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/libepoxy/portfile.cmake\"\u003elibepoxy\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_configure_meson.cmake\"\u003escripts/cmake/vcpkg_configure_meson.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_configure_qmake.html",
        "Name":  "vcpkg_configure_qmake",
        "Source":  "\u003ch1 id=\"vcpkg_configure_qmake\"\u003evcpkg_configure_qmake\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_configure_qmake.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eConfigure a qmake-based project.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_configure_qmake(\n    SOURCE_PATH \u0026lt;pro_file_path\u0026gt;\n    [OPTIONS arg1 [arg2 ...]]\n    [OPTIONS_RELEASE arg1 [arg2 ...]]\n    [OPTIONS_DEBUG arg1 [arg2 ...]]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"source_path\"\u003eSOURCE_PATH\u003c/h3\u003e\n\u003cp\u003eThe path to the *.pro qmake project file.\u003c/p\u003e\n\u003ch3 id=\"options-options_release-options_debug\"\u003eOPTIONS, OPTIONS_RELEASE, OPTIONS_DEBUG\u003c/h3\u003e\n\u003cp\u003eThe options passed to qmake.\u003c/p\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_configure_qmake.cmake\"\u003escripts/cmake/vcpkg_configure_qmake.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_copy_pdbs.html",
        "Name":  "vcpkg_copy_pdbs",
        "Source":  "\u003ch1 id=\"vcpkg_copy_pdbs\"\u003evcpkg_copy_pdbs\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_copy_pdbs.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAutomatically locate pdbs in the build tree and copy them adjacent to all DLLs.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_copy_pdbs(\n    [BUILD_PATHS \u0026lt;glob\u0026gt;...])\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e\u0026lt;glob\u0026gt;\u003c/code\u003es are patterns which will be passed to \u003ccode\u003efile(GLOB_RECURSE)\u003c/code\u003e,\u003cbr /\u003e\nfor locating DLLs. It defaults to using:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e${CURRENT_PACKAGES_DIR}/bin/*.dll\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e${CURRENT_PACKAGES_DIR}/debug/bin/*.dll\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003esince that is generally where DLLs are located.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cp\u003eThis command should always be called by portfiles after they have finished rearranging the binary output.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/zlib/portfile.cmake\"\u003ezlib\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/cpprestsdk/portfile.cmake\"\u003ecpprestsdk\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_copy_pdbs.cmake\"\u003escripts/cmake/vcpkg_copy_pdbs.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_copy_tools.html",
        "Name":  "vcpkg_copy_tools",
        "Source":  "\u003ch1 id=\"vcpkg_copy_tools\"\u003evcpkg_copy_tools\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_copy_tools.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eCopy tools and all their DLL dependencies into the \u003ccode\u003etools\u003c/code\u003e folder.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_copy_tools(\n    TOOL_NAMES \u0026lt;tool1\u0026gt;...\n    [SEARCH_DIR \u0026lt;${CURRENT_PACKAGES_DIR}/bin\u0026gt;]\n    [AUTO_CLEAN]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"tool_names\"\u003eTOOL_NAMES\u003c/h3\u003e\n\u003cp\u003eA list of tool filenames without extension.\u003c/p\u003e\n\u003ch3 id=\"search_dir\"\u003eSEARCH_DIR\u003c/h3\u003e\n\u003cp\u003eThe path to the directory containing the tools. This will be set to \u003ccode\u003e${CURRENT_PACKAGES_DIR}/bin\u003c/code\u003e if ommited.\u003c/p\u003e\n\u003ch3 id=\"auto_clean\"\u003eAUTO_CLEAN\u003c/h3\u003e\n\u003cp\u003eAuto clean executables in \u003ccode\u003e${CURRENT_PACKAGES_DIR}/bin\u003c/code\u003e and \u003ccode\u003e${CURRENT_PACKAGES_DIR}/debug/bin\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/microsoft/vcpkg/blob/master/ports/cpuinfo/portfile.cmake\"\u003ecpuinfo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/microsoft/vcpkg/blob/master/ports/nanomsg/portfile.cmake\"\u003enanomsg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/microsoft/vcpkg/blob/master/ports/uriparser/portfile.cmake\"\u003euriparser\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_copy_tools.cmake\"\u003escripts/cmake/vcpkg_copy_tools.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_copy_tool_dependencies.html",
        "Name":  "vcpkg_copy_tool_dependencies",
        "Source":  "\u003ch1 id=\"vcpkg_copy_tool_dependencies\"\u003evcpkg_copy_tool_dependencies\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_copy_tool_dependencies.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eCopy all DLL dependencies of built tools into the tool folder.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_copy_tool_dependencies(\u0026lt;${CURRENT_PACKAGES_DIR}/tools/${PORT}\u0026gt;)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003cp\u003eThe path to the directory containing the tools.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cp\u003eThis command should always be called by portfiles after they have finished rearranging the binary output, if they have any tools.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/glib/portfile.cmake\"\u003eglib\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/fltk/portfile.cmake\"\u003efltk\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_copy_tool_dependencies.cmake\"\u003escripts/cmake/vcpkg_copy_tool_dependencies.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_download_distfile.html",
        "Name":  "vcpkg_download_distfile",
        "Source":  "\u003ch1 id=\"vcpkg_download_distfile\"\u003evcpkg_download_distfile\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_download_distfile.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDownload and cache a file needed for this port.\u003c/p\u003e\n\u003cp\u003eThis helper should always be used instead of CMake\u0027s built-in \u003ccode\u003efile(DOWNLOAD)\u003c/code\u003e command.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_download_distfile(\n    \u0026lt;OUT_VARIABLE\u0026gt;\n    URLS \u0026lt;http://mainUrl\u0026gt; \u0026lt;http://mirror1\u0026gt;...\n    FILENAME \u0026lt;output.zip\u0026gt;\n    SHA512 \u0026lt;5981de...\u0026gt;\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"out_variable\"\u003eOUT_VARIABLE\u003c/h3\u003e\n\u003cp\u003eThis variable will be set to the full path to the downloaded file. This can then immediately be passed in to \u003ca href=\"vcpkg_extract_source_archive.md\"\u003e\u003ccode\u003evcpkg_extract_source_archive\u003c/code\u003e\u003c/a\u003e for sources.\u003c/p\u003e\n\u003ch3 id=\"urls\"\u003eURLS\u003c/h3\u003e\n\u003cp\u003eA list of URLs to be consulted. They will be tried in order until one of the downloaded files successfully matches the SHA512 given.\u003c/p\u003e\n\u003ch3 id=\"filename\"\u003eFILENAME\u003c/h3\u003e\n\u003cp\u003eThe local name for the file. Files are shared between ports, so the file may need to be renamed to make it clearly attributed to this port and avoid conflicts.\u003c/p\u003e\n\u003ch3 id=\"sha512\"\u003eSHA512\u003c/h3\u003e\n\u003cp\u003eThe expected hash for the file.\u003c/p\u003e\n\u003cp\u003eIf this doesn\u0027t match the downloaded version, the build will be terminated with a message describing the mismatch.\u003c/p\u003e\n\u003ch3 id=\"quiet\"\u003eQUIET\u003c/h3\u003e\n\u003cp\u003eSuppress output on cache hit\u003c/p\u003e\n\u003ch3 id=\"skip_sha512\"\u003eSKIP_SHA512\u003c/h3\u003e\n\u003cp\u003eSkip SHA512 hash check for file.\u003c/p\u003e\n\u003cp\u003eThis switch is only valid when building with the \u003ccode\u003e--head\u003c/code\u003e command line flag.\u003c/p\u003e\n\u003ch3 id=\"headers\"\u003eHEADERS\u003c/h3\u003e\n\u003cp\u003eA list of headers to append to the download request. This can be used for authentication during a download.\u003c/p\u003e\n\u003cp\u003eHeaders should be specified as \"\u003cheader-name\u003e: \u003cheader-value\u003e\".\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cp\u003eThe helper \u003ca href=\"vcpkg_from_github.md\"\u003e\u003ccode\u003evcpkg_from_github\u003c/code\u003e\u003c/a\u003e should be used for downloading from GitHub projects.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/apr/portfile.cmake\"\u003eapr\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/fontconfig/portfile.cmake\"\u003efontconfig\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/freetype/portfile.cmake\"\u003efreetype\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_download_distfile.cmake\"\u003escripts/cmake/vcpkg_download_distfile.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_execute_build_process.html",
        "Name":  "vcpkg_execute_build_process",
        "Source":  "\u003ch1 id=\"vcpkg_execute_build_process\"\u003evcpkg_execute_build_process\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_execute_build_process.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eExecute a required build process\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_execute_build_process(\n    COMMAND \u0026lt;cmd\u0026gt; [\u0026lt;args\u0026gt;...]\n    [NO_PARALLEL_COMMAND \u0026lt;cmd\u0026gt; [\u0026lt;args\u0026gt;...]]\n    WORKING_DIRECTORY \u0026lt;/path/to/dir\u0026gt;\n    LOGNAME \u0026lt;log_name\u0026gt;)\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"command\"\u003eCOMMAND\u003c/h3\u003e\n\u003cp\u003eThe command to be executed, along with its arguments.\u003c/p\u003e\n\u003ch3 id=\"no_parallel_command\"\u003eNO_PARALLEL_COMMAND\u003c/h3\u003e\n\u003cp\u003eOptional parameter which specifies a non-parallel command to attempt if a\u003cbr /\u003e\nfailure potentially due to parallelism is detected.\u003c/p\u003e\n\u003ch3 id=\"working_directory\"\u003eWORKING_DIRECTORY\u003c/h3\u003e\n\u003cp\u003eThe directory to execute the command in.\u003c/p\u003e\n\u003ch3 id=\"logname\"\u003eLOGNAME\u003c/h3\u003e\n\u003cp\u003eThe prefix to use for the log files.\u003c/p\u003e\n\u003cp\u003eThis should be a unique name for different triplets so that the logs don\u0027t\u003cbr /\u003e\nconflict when building multiple at once.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/icu/portfile.cmake\"\u003eicu\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_execute_build_process.cmake\"\u003escripts/cmake/vcpkg_execute_build_process.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_execute_in_download_mode.html",
        "Name":  "vcpkg_execute_in_download_mode",
        "Source":  "\u003ch1 id=\"vcpkg_execute_in_download_mode\"\u003evcpkg_execute_in_download_mode\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_execute_in_download_mode.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eExecute a process even in download mode.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_execute_in_download_mode(\n    COMMAND \u0026lt;cmd\u0026gt; [\u0026lt;arguments\u0026gt;]\n    [WORKING_DIRECTORY \u0026lt;dir\u0026gt;]\n    [TIMEOUT \u0026lt;seconds\u0026gt;]\n    [RESULT_VARIABLE \u0026lt;variable\u0026gt;]\n    [OUTPUT_VARIABLE \u0026lt;variable\u0026gt;]\n    [ERROR_VARIABLE \u0026lt;variable\u0026gt;]\n    [INPUT_FILE \u0026lt;file\u0026gt;]\n    [OUTPUT_FILE \u0026lt;file\u0026gt;]\n    [ERROR_FILE \u0026lt;file\u0026gt;]\n    [OUTPUT_QUIET]\n    [ERROR_QUIET]\n    [OUTPUT_STRIP_TRAILING_WHITESPACE]\n    [ERROR_STRIP_TRAILING_WHITESPACE]\n    [ENCODING \u0026lt;name\u0026gt;]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe signature of this function is identical to \u003ccode\u003eexecute_process()\u003c/code\u003e except that\u003cbr /\u003e\nit only accepts one COMMAND argument, i.e., does not support chaining multiple\u003cbr /\u003e\ncommands with pipes.\u003c/p\u003e\n\u003cp\u003eSee [\u003ccode\u003eexecute_process()\u003c/code\u003e] for a detailed description of the parameters.\u003c/p\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_execute_in_download_mode.cmake\"\u003escripts/cmake/vcpkg_execute_in_download_mode.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_execute_required_process.html",
        "Name":  "vcpkg_execute_required_process",
        "Source":  "\u003ch1 id=\"vcpkg_execute_required_process\"\u003evcpkg_execute_required_process\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_execute_required_process.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eExecute a process with logging and fail the build if the command fails.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_execute_required_process(\n    COMMAND \u0026lt;${PERL}\u0026gt; [\u0026lt;arguments\u0026gt;...]\n    WORKING_DIRECTORY \u0026lt;${CURRENT_BUILDTREES_DIR}/${TARGET_TRIPLET}-dbg\u0026gt;\n    LOGNAME \u0026lt;build-${TARGET_TRIPLET}-dbg\u0026gt;\n    [TIMEOUT \u0026lt;seconds\u0026gt;]\n    [OUTPUT_VARIABLE \u0026lt;var\u0026gt;]\n    [ERROR_VARIABLE \u0026lt;var\u0026gt;]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"allow_in_download_mode\"\u003eALLOW_IN_DOWNLOAD_MODE\u003c/h3\u003e\n\u003cp\u003eAllows the command to execute in Download Mode.\u003cbr /\u003e\n\u003ca href=\"../../scripts/cmake/execute_process.cmake\"\u003eSee execute_process() override\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"command\"\u003eCOMMAND\u003c/h3\u003e\n\u003cp\u003eThe command to be executed, along with its arguments.\u003c/p\u003e\n\u003ch3 id=\"working_directory\"\u003eWORKING_DIRECTORY\u003c/h3\u003e\n\u003cp\u003eThe directory to execute the command in.\u003c/p\u003e\n\u003ch3 id=\"logname\"\u003eLOGNAME\u003c/h3\u003e\n\u003cp\u003eThe prefix to use for the log files.\u003c/p\u003e\n\u003ch3 id=\"timeout\"\u003eTIMEOUT\u003c/h3\u003e\n\u003cp\u003eOptional timeout after which to terminate the command.\u003c/p\u003e\n\u003ch3 id=\"output_variable\"\u003eOUTPUT_VARIABLE\u003c/h3\u003e\n\u003cp\u003eOptional variable to receive stdout of the command.\u003c/p\u003e\n\u003ch3 id=\"error_variable\"\u003eERROR_VARIABLE\u003c/h3\u003e\n\u003cp\u003eOptional variable to receive stderr of the command.\u003c/p\u003e\n\u003cp\u003eThis should be a unique name for different triplets so that the logs don\u0027t conflict when building multiple at once.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/ffmpeg/portfile.cmake\"\u003effmpeg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/openssl/portfile.cmake\"\u003eopenssl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/boost/portfile.cmake\"\u003eboost\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/qt5/portfile.cmake\"\u003eqt5\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_execute_required_process.cmake\"\u003escripts/cmake/vcpkg_execute_required_process.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_execute_required_process_repeat.html",
        "Name":  "vcpkg_execute_required_process_repeat",
        "Source":  "\u003ch1 id=\"vcpkg_execute_required_process_repeat\"\u003evcpkg_execute_required_process_repeat\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_execute_required_process_repeat.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eExecute a process until the command succeeds, or until the COUNT is reached.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_execute_required_process_repeat(\n    COUNT \u0026lt;num\u0026gt;\n    COMMAND \u0026lt;cmd\u0026gt; [\u0026lt;arguments\u0026gt;]\n    WORKING_DIRECTORY \u0026lt;directory\u0026gt;\n    LOGNAME \u0026lt;name\u0026gt;\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_execute_required_process_repeat.cmake\"\u003escripts/cmake/vcpkg_execute_required_process_repeat.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_extract_source_archive.html",
        "Name":  "vcpkg_extract_source_archive",
        "Source":  "\u003ch1 id=\"vcpkg_extract_source_archive\"\u003evcpkg_extract_source_archive\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_extract_source_archive.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eExtract an archive into the source directory. Deprecated in favor of \u003ca href=\"vcpkg_extract_source_archive_ex.md\"\u003e\u003ccode\u003evcpkg_extract_source_archive_ex\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_extract_source_archive(\n    \u0026lt;${ARCHIVE}\u0026gt; [\u0026lt;${TARGET_DIRECTORY}\u0026gt;]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"archive\"\u003eARCHIVE\u003c/h3\u003e\n\u003cp\u003eThe full path to the archive to be extracted.\u003c/p\u003e\n\u003cp\u003eThis is usually obtained from calling \u003ca href=\"vcpkg_download_distfile.md\"\u003e\u003ccode\u003evcpkg_download_distfile\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"target_directory\"\u003eTARGET_DIRECTORY\u003c/h3\u003e\n\u003cp\u003eIf specified, the archive will be extracted into the target directory instead of \u003ccode\u003e${CURRENT_BUILDTREES_DIR}/src/\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis can be used to mimic git submodules, by extracting into a subdirectory of another archive.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cp\u003eThis command will also create a tracking file named \u003cFILENAME\u003e.extracted in the TARGET_DIRECTORY. This file, when present, will suppress the extraction of the archive.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/libraw/portfile.cmake\"\u003elibraw\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/protobuf/portfile.cmake\"\u003eprotobuf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/msgpack/portfile.cmake\"\u003emsgpack\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_extract_source_archive.cmake\"\u003escripts/cmake/vcpkg_extract_source_archive.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_extract_source_archive_ex.html",
        "Name":  "vcpkg_extract_source_archive_ex",
        "Source":  "\u003ch1 id=\"vcpkg_extract_source_archive_ex\"\u003evcpkg_extract_source_archive_ex\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_extract_source_archive_ex.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eExtract an archive into the source directory. Replaces \u003ca href=\"vcpkg_extract_source_archive.md\"\u003e\u003ccode\u003evcpkg_extract_source_archive\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_extract_source_archive_ex(\n    SKIP_PATCH_CHECK\n    OUT_SOURCE_PATH \u0026lt;SOURCE_PATH\u0026gt;\n    ARCHIVE \u0026lt;${ARCHIVE}\u0026gt;\n    [REF \u0026lt;1.0.0\u0026gt;]\n    [NO_REMOVE_ONE_LEVEL]\n    [WORKING_DIRECTORY \u0026lt;${CURRENT_BUILDTREES_DIR}/src\u0026gt;]\n    [PATCHES \u0026lt;a.patch\u0026gt;...]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"skip_patch_check\"\u003eSKIP_PATCH_CHECK\u003c/h3\u003e\n\u003cp\u003eIf this option is set the failure to apply a patch is ignored.\u003c/p\u003e\n\u003ch3 id=\"out_source_path\"\u003eOUT_SOURCE_PATH\u003c/h3\u003e\n\u003cp\u003eSpecifies the out-variable that will contain the extracted location.\u003c/p\u003e\n\u003cp\u003eThis should be set to \u003ccode\u003eSOURCE_PATH\u003c/code\u003e by convention.\u003c/p\u003e\n\u003ch3 id=\"archive\"\u003eARCHIVE\u003c/h3\u003e\n\u003cp\u003eThe full path to the archive to be extracted.\u003c/p\u003e\n\u003cp\u003eThis is usually obtained from calling \u003ca href=\"vcpkg_download_distfile.md\"\u003e\u003ccode\u003evcpkg_download_distfile\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"ref\"\u003eREF\u003c/h3\u003e\n\u003cp\u003eA friendly name that will be used instead of the filename of the archive.  If more than 10 characters it will be truncated.\u003c/p\u003e\n\u003cp\u003eBy convention, this is set to the version number or tag fetched\u003c/p\u003e\n\u003ch3 id=\"working_directory\"\u003eWORKING_DIRECTORY\u003c/h3\u003e\n\u003cp\u003eIf specified, the archive will be extracted into the working directory instead of \u003ccode\u003e${CURRENT_BUILDTREES_DIR}/src/\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNote that the archive will still be extracted into a subfolder underneath that directory (\u003ccode\u003e${WORKING_DIRECTORY}/${REF}-${HASH}/\u003c/code\u003e).\u003c/p\u003e\n\u003ch3 id=\"patches\"\u003ePATCHES\u003c/h3\u003e\n\u003cp\u003eA list of patches to be applied to the extracted sources.\u003c/p\u003e\n\u003cp\u003eRelative paths are based on the port directory.\u003c/p\u003e\n\u003ch3 id=\"no_remove_one_level\"\u003eNO_REMOVE_ONE_LEVEL\u003c/h3\u003e\n\u003cp\u003eSpecifies that the default removal of the top level folder should not occur.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/bzip2/portfile.cmake\"\u003ebzip2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/sqlite3/portfile.cmake\"\u003esqlite3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/cairo/portfile.cmake\"\u003ecairo\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_extract_source_archive_ex.cmake\"\u003escripts/cmake/vcpkg_extract_source_archive_ex.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_fail_port_install.html",
        "Name":  "vcpkg_fail_port_install",
        "Source":  "\u003ch1 id=\"vcpkg_fail_port_install\"\u003evcpkg_fail_port_install\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_fail_port_install.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eChecks common requirements and fails the current portfile with a (default) error message\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_fail_port_install(\n    [ALWAYS]\n    [MESSAGE \u0026lt;\"Reason for failure\"\u0026gt;]\n    [ON_TARGET \u0026lt;Windows\u0026gt; [\u0026lt;OSX\u0026gt; ...]]\n    [ON_ARCH \u0026lt;x64\u0026gt; [\u0026lt;arm\u0026gt; ...]]\n    [ON_CRT_LINKAGE \u0026lt;static\u0026gt; [\u0026lt;dynamic\u0026gt; ...]])\n    [ON_LIBRARY_LINKAGE \u0026lt;static\u0026gt; [\u0026lt;dynamic\u0026gt; ...]]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"message\"\u003eMESSAGE\u003c/h3\u003e\n\u003cp\u003eAdditional failure message. If none is given, a default message will be displayed depending on the failure condition.\u003c/p\u003e\n\u003ch3 id=\"always\"\u003eALWAYS\u003c/h3\u003e\n\u003cp\u003eWill always fail early\u003c/p\u003e\n\u003ch3 id=\"on_target\"\u003eON_TARGET\u003c/h3\u003e\n\u003cp\u003eTargets for which the build should fail early. Valid targets are \u003ccode\u003e\u0026lt;target\u0026gt;\u003c/code\u003e from \u003ccode\u003eVCPKG_IS_TARGET_\u0026lt;target\u0026gt;\u003c/code\u003e (see \u003ccode\u003evcpkg_common_definitions.cmake\u003c/code\u003e).\u003c/p\u003e\n\u003ch3 id=\"on_arch\"\u003eON_ARCH\u003c/h3\u003e\n\u003cp\u003eArchitecture for which the build should fail early.\u003c/p\u003e\n\u003ch3 id=\"on_crt_linkage\"\u003eON_CRT_LINKAGE\u003c/h3\u003e\n\u003cp\u003eCRT linkage for which the build should fail early.\u003c/p\u003e\n\u003ch3 id=\"on_library_linkage\"\u003eON_LIBRARY_LINKAGE\u003c/h3\u003e\n\u003cp\u003eLibrary linkage for which the build should fail early.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/aws-lambda-cpp/portfile.cmake\"\u003eaws-lambda-cpp\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_fail_port_install.cmake\"\u003escripts/cmake/vcpkg_fail_port_install.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_find_acquire_program.html",
        "Name":  "vcpkg_find_acquire_program",
        "Source":  "\u003ch1 id=\"vcpkg_find_acquire_program\"\u003evcpkg_find_acquire_program\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_find_acquire_program.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDownload or find a well-known tool.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_find_acquire_program(\u0026lt;VAR\u0026gt;)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"var\"\u003eVAR\u003c/h3\u003e\n\u003cp\u003eThis variable specifies both the program to be acquired as well as the out parameter that will be set to the path of the program executable.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cp\u003eThe current list of programs includes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e7Z\u003c/li\u003e\n\u003cli\u003eARIA2 (Downloader)\u003c/li\u003e\n\u003cli\u003eBISON\u003c/li\u003e\n\u003cli\u003eCLANG\u003c/li\u003e\n\u003cli\u003eDARK\u003c/li\u003e\n\u003cli\u003eDOXYGEN\u003c/li\u003e\n\u003cli\u003eFLEX\u003c/li\u003e\n\u003cli\u003eGASPREPROCESSOR\u003c/li\u003e\n\u003cli\u003eGPERF\u003c/li\u003e\n\u003cli\u003ePERL\u003c/li\u003e\n\u003cli\u003ePYTHON2\u003c/li\u003e\n\u003cli\u003ePYTHON3\u003c/li\u003e\n\u003cli\u003eGIT\u003c/li\u003e\n\u003cli\u003eGN\u003c/li\u003e\n\u003cli\u003eGO\u003c/li\u003e\n\u003cli\u003eJOM\u003c/li\u003e\n\u003cli\u003eMESON\u003c/li\u003e\n\u003cli\u003eNASM\u003c/li\u003e\n\u003cli\u003eNINJA\u003c/li\u003e\n\u003cli\u003eNUGET\u003c/li\u003e\n\u003cli\u003eSCONS\u003c/li\u003e\n\u003cli\u003eSWIG\u003c/li\u003e\n\u003cli\u003eYASM\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNote that msys2 has a dedicated helper function: \u003ca href=\"vcpkg_acquire_msys.md\"\u003e\u003ccode\u003evcpkg_acquire_msys\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/ffmpeg/portfile.cmake\"\u003effmpeg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/openssl/portfile.cmake\"\u003eopenssl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/qt5/portfile.cmake\"\u003eqt5\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_find_acquire_program.cmake\"\u003escripts/cmake/vcpkg_find_acquire_program.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_find_fortran.html",
        "Name":  "vcpkg_find_fortran",
        "Source":  "\u003ch1 id=\"vcpkg_find_fortran\"\u003evcpkg_find_fortran\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_find_fortran.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eChecks if a Fortran compiler can be found.\u003cbr /\u003e\nWindows(x86/x64) Only: If not it will switch/enable MinGW gfortran \u003cbr /\u003e\n                       and return required cmake args for building. \u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_find_fortran(\u0026lt;additional_cmake_args_out\u0026gt;)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_find_fortran.cmake\"\u003escripts/cmake/vcpkg_find_fortran.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_fixup_cmake_targets.html",
        "Name":  "vcpkg_fixup_cmake_targets",
        "Source":  "\u003ch1 id=\"vcpkg_fixup_cmake_targets\"\u003evcpkg_fixup_cmake_targets\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_fixup_cmake_targets.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThis function has been deprecated in favor of \u003ccode\u003evcpkg_cmake_config_fixup\u003c/code\u003e from the vcpkg-cmake-config port.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eMerge release and debug CMake targets and configs to support multiconfig generators.\u003c/p\u003e\n\u003cp\u003eAdditionally corrects common issues with targets, such as absolute paths and incorrectly placed binaries.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_fixup_cmake_targets([CONFIG_PATH \u0026lt;share/${PORT}\u0026gt;] [TARGET_PATH \u0026lt;share/${PORT}\u0026gt;] [DO_NOT_DELETE_PARENT_CONFIG_PATH])\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"config_path\"\u003eCONFIG_PATH\u003c/h3\u003e\n\u003cp\u003eSubpath currently containing \u003ccode\u003e*.cmake\u003c/code\u003e files subdirectory (like \u003ccode\u003elib/cmake/${PORT}\u003c/code\u003e). Should be relative to \u003ccode\u003e${CURRENT_PACKAGES_DIR}\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eDefaults to \u003ccode\u003eshare/${PORT}\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"target_path\"\u003eTARGET_PATH\u003c/h3\u003e\n\u003cp\u003eSubpath to which the above \u003ccode\u003e*.cmake\u003c/code\u003e files should be moved. Should be relative to \u003ccode\u003e${CURRENT_PACKAGES_DIR}\u003c/code\u003e.\u003cbr /\u003e\nThis needs to be specified if the port name differs from the \u003ccode\u003efind_package()\u003c/code\u003e name.\u003c/p\u003e\n\u003cp\u003eDefaults to \u003ccode\u003eshare/${PORT}\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"do_not_delete_parent_config_path\"\u003eDO_NOT_DELETE_PARENT_CONFIG_PATH\u003c/h3\u003e\n\u003cp\u003eBy default the parent directory of CONFIG_PATH is removed if it is named \"cmake\".\u003cbr /\u003e\nPassing this option disable such behavior, as it is convenient for ports that install\u003cbr /\u003e\nmore than one CMake package configuration file.\u003c/p\u003e\n\u003ch3 id=\"no_prefix_correction\"\u003eNO_PREFIX_CORRECTION\u003c/h3\u003e\n\u003cp\u003eDisables the correction of_IMPORT_PREFIX done by vcpkg due to moving the targets.\u003cbr /\u003e\nCurrently the correction does not take into account how the files are moved and applies\u003cbr /\u003e\nI rather simply correction which in some cases will yield the wrong results.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cp\u003eTransform all \u003ccode\u003e/debug/\u0026lt;CONFIG_PATH\u0026gt;/*targets-debug.cmake\u003c/code\u003e files and move them to \u003ccode\u003e/\u0026lt;TARGET_PATH\u0026gt;\u003c/code\u003e.\u003cbr /\u003e\nRemoves all \u003ccode\u003e/debug/\u0026lt;CONFIG_PATH\u0026gt;/*targets.cmake\u003c/code\u003e and \u003ccode\u003e/debug/\u0026lt;CONFIG_PATH\u0026gt;/*config.cmake\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eTransform all references matching \u003ccode\u003e/bin/*.exe\u003c/code\u003e to \u003ccode\u003e/tools/\u0026lt;port\u0026gt;/*.exe\u003c/code\u003e on Windows.\u003cbr /\u003e\nTransform all references matching \u003ccode\u003e/bin/*\u003c/code\u003e to \u003ccode\u003e/tools/\u0026lt;port\u0026gt;/*\u003c/code\u003e on other platforms.\u003c/p\u003e\n\u003cp\u003eFix \u003ccode\u003e${_IMPORT_PREFIX}\u003c/code\u003e in auto generated targets to be one folder deeper.\u003cbr /\u003e\nReplace \u003ccode\u003e${CURRENT_INSTALLED_DIR}\u003c/code\u003e with \u003ccode\u003e${_IMPORT_PREFIX}\u003c/code\u003e in configs and targets.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/concurrentqueue/portfile.cmake\"\u003econcurrentqueue\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/curl/portfile.cmake\"\u003ecurl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/nlohmann-json/portfile.cmake\"\u003enlohmann-json\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_fixup_cmake_targets.cmake\"\u003escripts/cmake/vcpkg_fixup_cmake_targets.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_fixup_pkgconfig.html",
        "Name":  "vcpkg_fixup_pkgconfig",
        "Source":  "\u003ch1 id=\"vcpkg_fixup_pkgconfig\"\u003evcpkg_fixup_pkgconfig\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_fixup_pkgconfig.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFix common paths in *.pc files and make everything relativ to $(prefix)\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_fixup_pkgconfig(\n    [RELEASE_FILES \u0026lt;PATHS\u0026gt;...]\n    [DEBUG_FILES \u0026lt;PATHS\u0026gt;...]\n    [SKIP_CHECK]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"release_files\"\u003eRELEASE_FILES\u003c/h3\u003e\n\u003cp\u003eSpecifies a list of files to apply the fixes for release paths.\u003cbr /\u003e\nDefaults to every *.pc file in the folder ${CURRENT_PACKAGES_DIR} without ${CURRENT_PACKAGES_DIR}/debug/\u003c/p\u003e\n\u003ch3 id=\"debug_files\"\u003eDEBUG_FILES\u003c/h3\u003e\n\u003cp\u003eSpecifies a list of files to apply the fixes for debug paths.\u003cbr /\u003e\nDefaults to every *.pc file in the folder ${CURRENT_PACKAGES_DIR}/debug/\u003c/p\u003e\n\u003ch3 id=\"skip_check\"\u003eSKIP_CHECK\u003c/h3\u003e\n\u003cp\u003eSkips the library checks in vcpkg_fixup_pkgconfig. Only use if the script itself has unhandled cases.\u003c/p\u003e\n\u003ch3 id=\"system_packages-deprecated\"\u003eSYSTEM_PACKAGES (deprecated)\u003c/h3\u003e\n\u003cp\u003eThis argument has been deprecated and has no effect.\u003c/p\u003e\n\u003ch3 id=\"system_libraries-deprecated\"\u003eSYSTEM_LIBRARIES (deprecated)\u003c/h3\u003e\n\u003cp\u003eThis argument has been deprecated and has no effect.\u003c/p\u003e\n\u003ch3 id=\"ignore_flags-deprecated\"\u003eIGNORE_FLAGS (deprecated)\u003c/h3\u003e\n\u003cp\u003eThis argument has been deprecated and has no effect.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cp\u003eStill work in progress. If there are more cases which can be handled here feel free to add them\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/brotli/portfile.cmake\"\u003ebrotli\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_fixup_pkgconfig.cmake\"\u003escripts/cmake/vcpkg_fixup_pkgconfig.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_from_bitbucket.html",
        "Name":  "vcpkg_from_bitbucket",
        "Source":  "\u003ch1 id=\"vcpkg_from_bitbucket\"\u003evcpkg_from_bitbucket\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_from_bitbucket.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDownload and extract a project from Bitbucket.\u003cbr /\u003e\nEnables support for installing HEAD \u003ccode\u003evcpkg.exe install --head \u0026lt;port\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_from_bitbucket(\n    OUT_SOURCE_PATH \u0026lt;SOURCE_PATH\u0026gt;\n    REPO \u0026lt;Microsoft/cpprestsdk\u0026gt;\n    [REF \u0026lt;v2.0.0\u0026gt;]\n    [SHA512 \u0026lt;45d0d7f8cc350...\u0026gt;]\n    [HEAD_REF \u0026lt;master\u0026gt;]\n    [PATCHES \u0026lt;patch1.patch\u0026gt; \u0026lt;patch2.patch\u0026gt;...]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters:\u003c/h2\u003e\n\u003ch3 id=\"out_source_path\"\u003eOUT_SOURCE_PATH\u003c/h3\u003e\n\u003cp\u003eSpecifies the out-variable that will contain the extracted location.\u003c/p\u003e\n\u003cp\u003eThis should be set to \u003ccode\u003eSOURCE_PATH\u003c/code\u003e by convention.\u003c/p\u003e\n\u003ch3 id=\"repo\"\u003eREPO\u003c/h3\u003e\n\u003cp\u003eThe organization or user and repository on GitHub.\u003c/p\u003e\n\u003ch3 id=\"ref\"\u003eREF\u003c/h3\u003e\n\u003cp\u003eA stable git commit-ish (ideally a tag) that will not change contents. \u003cstrong\u003eThis should not be a branch.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eFor repositories without official releases, this can be set to the full commit id of the current latest master.\u003c/p\u003e\n\u003cp\u003eIf \u003ccode\u003eREF\u003c/code\u003e is specified, \u003ccode\u003eSHA512\u003c/code\u003e must also be specified.\u003c/p\u003e\n\u003ch3 id=\"sha512\"\u003eSHA512\u003c/h3\u003e\n\u003cp\u003eThe SHA512 hash that should match the archive (\u003ca href=\"https://bitbucket.com/${REPO}/get/${REF}.tar.gz)\"\u003ehttps://bitbucket.com/${REPO}/get/${REF}.tar.gz)\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis is most easily determined by first setting it to \u003ccode\u003e1\u003c/code\u003e, then trying to build the port. The error message will contain the full hash, which can be copied back into the portfile.\u003c/p\u003e\n\u003ch3 id=\"head_ref\"\u003eHEAD_REF\u003c/h3\u003e\n\u003cp\u003eThe unstable git commit-ish (ideally a branch) to pull for \u003ccode\u003e--head\u003c/code\u003e builds.\u003c/p\u003e\n\u003cp\u003eFor most projects, this should be \u003ccode\u003emaster\u003c/code\u003e. The chosen branch should be one that is expected to be always buildable on all supported platforms.\u003c/p\u003e\n\u003ch3 id=\"patches\"\u003ePATCHES\u003c/h3\u003e\n\u003cp\u003eA list of patches to be applied to the extracted sources.\u003c/p\u003e\n\u003cp\u003eRelative paths are based on the port directory.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes:\u003c/h2\u003e\n\u003cp\u003eAt least one of \u003ccode\u003eREF\u003c/code\u003e and \u003ccode\u003eHEAD_REF\u003c/code\u003e must be specified, however it is preferable for both to be present.\u003c/p\u003e\n\u003cp\u003eThis exports the \u003ccode\u003eVCPKG_HEAD_VERSION\u003c/code\u003e variable during head builds.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples:\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/blaze/portfile.cmake\"\u003eblaze\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_from_bitbucket.cmake\"\u003escripts/cmake/vcpkg_from_bitbucket.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_from_git.html",
        "Name":  "vcpkg_from_git",
        "Source":  "\u003ch1 id=\"vcpkg_from_git\"\u003evcpkg_from_git\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_from_git.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDownload and extract a project from git\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_from_git(\n    OUT_SOURCE_PATH \u0026lt;SOURCE_PATH\u0026gt;\n    URL \u0026lt;https://android.googlesource.com/platform/external/fdlibm\u0026gt;\n    REF \u0026lt;59f7335e4d...\u0026gt;\n    [TAG \u0026lt;v1.0.2\u0026gt;]\n    [PATCHES \u0026lt;patch1.patch\u0026gt; \u0026lt;patch2.patch\u0026gt;...]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters:\u003c/h2\u003e\n\u003ch3 id=\"out_source_path\"\u003eOUT_SOURCE_PATH\u003c/h3\u003e\n\u003cp\u003eSpecifies the out-variable that will contain the extracted location.\u003c/p\u003e\n\u003cp\u003eThis should be set to \u003ccode\u003eSOURCE_PATH\u003c/code\u003e by convention.\u003c/p\u003e\n\u003ch3 id=\"url\"\u003eURL\u003c/h3\u003e\n\u003cp\u003eThe url of the git repository.\u003c/p\u003e\n\u003ch3 id=\"ref\"\u003eREF\u003c/h3\u003e\n\u003cp\u003eThe git sha of the commit to download.\u003c/p\u003e\n\u003ch3 id=\"tag\"\u003eTAG\u003c/h3\u003e\n\u003cp\u003eAn optional git tag to be verified against the \u003ccode\u003eREF\u003c/code\u003e. If the remote repository\u0027s tag does not match the specified \u003ccode\u003eREF\u003c/code\u003e, the build will fail.\u003c/p\u003e\n\u003ch3 id=\"patches\"\u003ePATCHES\u003c/h3\u003e\n\u003cp\u003eA list of patches to be applied to the extracted sources.\u003c/p\u003e\n\u003cp\u003eRelative paths are based on the port directory.\u003c/p\u003e\n\u003ch3 id=\"x_out_ref-internal-only\"\u003eX_OUT_REF (internal only)\u003c/h3\u003e\n\u003cp\u003eThis parameter is used for automatic REF updates for certain ports in the central vcpkg catalog. It should not be used by any ports outside the central catalog and within the central catalog it should not be used on any user path. This parameter may change behavior incompatibly or be removed at any time.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes:\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eOUT_SOURCE_PATH\u003c/code\u003e, \u003ccode\u003eREF\u003c/code\u003e, and \u003ccode\u003eURL\u003c/code\u003e must be specified.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples:\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/fdlibm/portfile.cmake\"\u003efdlibm\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_from_git.cmake\"\u003escripts/cmake/vcpkg_from_git.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_from_github.html",
        "Name":  "vcpkg_from_github",
        "Source":  "\u003ch1 id=\"vcpkg_from_github\"\u003evcpkg_from_github\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_from_github.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDownload and extract a project from GitHub. Enables support for \u003ccode\u003einstall --head\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_from_github(\n    OUT_SOURCE_PATH \u0026lt;SOURCE_PATH\u0026gt;\n    REPO \u0026lt;Microsoft/cpprestsdk\u0026gt;\n    [REF \u0026lt;v2.0.0\u0026gt;]\n    [SHA512 \u0026lt;45d0d7f8cc350...\u0026gt;]\n    [HEAD_REF \u0026lt;master\u0026gt;]\n    [PATCHES \u0026lt;patch1.patch\u0026gt; \u0026lt;patch2.patch\u0026gt;...]\n    [GITHUB_HOST \u0026lt;https://github.com\u0026gt;]\n    [AUTHORIZATION_TOKEN \u0026lt;${SECRET_FROM_FILE}\u0026gt;]\n    [FILE_DISAMBIGUATOR \u0026lt;N\u0026gt;]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters:\u003c/h2\u003e\n\u003ch3 id=\"out_source_path\"\u003eOUT_SOURCE_PATH\u003c/h3\u003e\n\u003cp\u003eSpecifies the out-variable that will contain the extracted location.\u003c/p\u003e\n\u003cp\u003eThis should be set to \u003ccode\u003eSOURCE_PATH\u003c/code\u003e by convention.\u003c/p\u003e\n\u003ch3 id=\"repo\"\u003eREPO\u003c/h3\u003e\n\u003cp\u003eThe organization or user and repository on GitHub.\u003c/p\u003e\n\u003ch3 id=\"ref\"\u003eREF\u003c/h3\u003e\n\u003cp\u003eA stable git commit-ish (ideally a tag or commit) that will not change contents. \u003cstrong\u003eThis should not be a branch.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eFor repositories without official releases, this can be set to the full commit id of the current latest master.\u003c/p\u003e\n\u003cp\u003eIf \u003ccode\u003eREF\u003c/code\u003e is specified, \u003ccode\u003eSHA512\u003c/code\u003e must also be specified.\u003c/p\u003e\n\u003ch3 id=\"sha512\"\u003eSHA512\u003c/h3\u003e\n\u003cp\u003eThe SHA512 hash that should match the archive (\u003ca href=\"https://github.com/${REPO}/archive/${REF}.tar.gz)\"\u003ehttps://github.com/${REPO}/archive/${REF}.tar.gz)\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis is most easily determined by first setting it to \u003ccode\u003e1\u003c/code\u003e, then trying to build the port. The error message will contain the full hash, which can be copied back into the portfile.\u003c/p\u003e\n\u003ch3 id=\"head_ref\"\u003eHEAD_REF\u003c/h3\u003e\n\u003cp\u003eThe unstable git commit-ish (ideally a branch) to pull for \u003ccode\u003e--head\u003c/code\u003e builds.\u003c/p\u003e\n\u003cp\u003eFor most projects, this should be \u003ccode\u003emaster\u003c/code\u003e. The chosen branch should be one that is expected to be always buildable on all supported platforms.\u003c/p\u003e\n\u003ch3 id=\"patches\"\u003ePATCHES\u003c/h3\u003e\n\u003cp\u003eA list of patches to be applied to the extracted sources.\u003c/p\u003e\n\u003cp\u003eRelative paths are based on the port directory.\u003c/p\u003e\n\u003ch3 id=\"github_host\"\u003eGITHUB_HOST\u003c/h3\u003e\n\u003cp\u003eA replacement host for enterprise GitHub instances.\u003c/p\u003e\n\u003cp\u003eThis field should contain the scheme, host, and port of the desired URL without a trailing slash.\u003c/p\u003e\n\u003ch3 id=\"authorization_token\"\u003eAUTHORIZATION_TOKEN\u003c/h3\u003e\n\u003cp\u003eA token to be passed via the Authorization HTTP header as \"token ${AUTHORIZATION_TOKEN}\".\u003c/p\u003e\n\u003ch3 id=\"file_disambiguator\"\u003eFILE_DISAMBIGUATOR\u003c/h3\u003e\n\u003cp\u003eA token to uniquely identify the resulting filename if the SHA512 changes even though a git ref does not, to avoid stepping on the same file name.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes:\u003c/h2\u003e\n\u003cp\u003eAt least one of \u003ccode\u003eREF\u003c/code\u003e and \u003ccode\u003eHEAD_REF\u003c/code\u003e must be specified, however it is preferable for both to be present.\u003c/p\u003e\n\u003cp\u003eThis exports the \u003ccode\u003eVCPKG_HEAD_VERSION\u003c/code\u003e variable during head builds.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples:\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/cpprestsdk/portfile.cmake\"\u003ecpprestsdk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/ms-gsl/portfile.cmake\"\u003ems-gsl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/beast/portfile.cmake\"\u003ebeast\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_from_github.cmake\"\u003escripts/cmake/vcpkg_from_github.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_from_gitlab.html",
        "Name":  "vcpkg_from_gitlab",
        "Source":  "\u003ch1 id=\"vcpkg_from_gitlab\"\u003evcpkg_from_gitlab\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_from_gitlab.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDownload and extract a project from Gitlab instances. Enables support for \u003ccode\u003einstall --head\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_from_gitlab(\n    GITLAB_URL \u0026lt;https://gitlab.com\u0026gt;\n    OUT_SOURCE_PATH \u0026lt;SOURCE_PATH\u0026gt;\n    REPO \u0026lt;gitlab-org/gitlab-ce\u0026gt;\n    [REF \u0026lt;v10.7.3\u0026gt;]\n    [SHA512 \u0026lt;45d0d7f8cc350...\u0026gt;]\n    [HEAD_REF \u0026lt;master\u0026gt;]\n    [PATCHES \u0026lt;patch1.patch\u0026gt; \u0026lt;patch2.patch\u0026gt;...]\n    [FILE_DISAMBIGUATOR \u0026lt;N\u0026gt;]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters:\u003c/h2\u003e\n\u003ch3 id=\"gitlab_url\"\u003eGITLAB_URL\u003c/h3\u003e\n\u003cp\u003eThe URL of the Gitlab instance to use.\u003c/p\u003e\n\u003ch3 id=\"out_source_path\"\u003eOUT_SOURCE_PATH\u003c/h3\u003e\n\u003cp\u003eSpecifies the out-variable that will contain the extracted location.\u003c/p\u003e\n\u003cp\u003eThis should be set to \u003ccode\u003eSOURCE_PATH\u003c/code\u003e by convention.\u003c/p\u003e\n\u003ch3 id=\"repo\"\u003eREPO\u003c/h3\u003e\n\u003cp\u003eThe organization or user plus the repository name on the Gitlab instance.\u003c/p\u003e\n\u003ch3 id=\"ref\"\u003eREF\u003c/h3\u003e\n\u003cp\u003eA stable git commit-ish (ideally a tag) that will not change contents. \u003cstrong\u003eThis should not be a branch.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eFor repositories without official releases, this can be set to the full commit id of the current latest master.\u003c/p\u003e\n\u003cp\u003eIf \u003ccode\u003eREF\u003c/code\u003e is specified, \u003ccode\u003eSHA512\u003c/code\u003e must also be specified.\u003c/p\u003e\n\u003ch3 id=\"sha512\"\u003eSHA512\u003c/h3\u003e\n\u003cp\u003eThe SHA512 hash that should match the archive (${GITLAB_URL}/${REPO}/-/archive/${REF}/${REPO_NAME}-${REF}.tar.gz).\u003cbr /\u003e\nThe REPO_NAME variable is parsed from the value of REPO.\u003c/p\u003e\n\u003cp\u003eThis is most easily determined by first setting it to \u003ccode\u003e1\u003c/code\u003e, then trying to build the port. The error message will contain the full hash, which can be copied back into the portfile.\u003c/p\u003e\n\u003ch3 id=\"head_ref\"\u003eHEAD_REF\u003c/h3\u003e\n\u003cp\u003eThe unstable git commit-ish (ideally a branch) to pull for \u003ccode\u003e--head\u003c/code\u003e builds.\u003c/p\u003e\n\u003cp\u003eFor most projects, this should be \u003ccode\u003emaster\u003c/code\u003e. The chosen branch should be one that is expected to be always buildable on all supported platforms.\u003c/p\u003e\n\u003ch3 id=\"patches\"\u003ePATCHES\u003c/h3\u003e\n\u003cp\u003eA list of patches to be applied to the extracted sources.\u003c/p\u003e\n\u003cp\u003eRelative paths are based on the port directory.\u003c/p\u003e\n\u003ch3 id=\"file_disambiguator\"\u003eFILE_DISAMBIGUATOR\u003c/h3\u003e\n\u003cp\u003eA token to uniquely identify the resulting filename if the SHA512 changes even though a git ref does not, to avoid stepping on the same file name.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes:\u003c/h2\u003e\n\u003cp\u003eAt least one of \u003ccode\u003eREF\u003c/code\u003e and \u003ccode\u003eHEAD_REF\u003c/code\u003e must be specified, however it is preferable for both to be present.\u003c/p\u003e\n\u003cp\u003eThis exports the \u003ccode\u003eVCPKG_HEAD_VERSION\u003c/code\u003e variable during head builds.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples:\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e[curl][\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/curl/portfile.cmake#L75\"\u003ehttps://github.com/Microsoft/vcpkg/blob/master/ports/curl/portfile.cmake#L75\u003c/a\u003e]\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/folly/portfile.cmake#L15\"\u003efolly\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/z3/portfile.cmake#L13\"\u003ez3\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_from_gitlab.cmake\"\u003escripts/cmake/vcpkg_from_gitlab.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_from_sourceforge.html",
        "Name":  "vcpkg_from_sourceforge",
        "Source":  "\u003ch1 id=\"vcpkg_from_sourceforge\"\u003evcpkg_from_sourceforge\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_from_sourceforge.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eDownload and extract a project from sourceforge.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_from_sourceforge(\n    OUT_SOURCE_PATH SOURCE_PATH\n    REPO \u0026lt;cunit/CUnit\u0026gt;\n    [REF \u0026lt;2.1-3\u0026gt;]\n    SHA512 \u0026lt;547b417109332...\u0026gt;\n    FILENAME \u0026lt;CUnit-2.1-3.tar.bz2\u0026gt;\n    [DISABLE_SSL]\n    [NO_REMOVE_ONE_LEVEL]\n    [PATCHES \u0026lt;patch1.patch\u0026gt; \u0026lt;patch2.patch\u0026gt;...]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters:\u003c/h2\u003e\n\u003ch3 id=\"out_source_path\"\u003eOUT_SOURCE_PATH\u003c/h3\u003e\n\u003cp\u003eSpecifies the out-variable that will contain the extracted location.\u003c/p\u003e\n\u003cp\u003eThis should be set to \u003ccode\u003eSOURCE_PATH\u003c/code\u003e by convention.\u003c/p\u003e\n\u003ch3 id=\"repo\"\u003eREPO\u003c/h3\u003e\n\u003cp\u003eThe organization or user and repository (optional) on sourceforge.\u003c/p\u003e\n\u003ch3 id=\"ref\"\u003eREF\u003c/h3\u003e\n\u003cp\u003eA stable version number that will not change contents.\u003c/p\u003e\n\u003ch3 id=\"filename\"\u003eFILENAME\u003c/h3\u003e\n\u003cp\u003eThe local name for the file. Files are shared between ports, so the file may need to be renamed to make it clearly attributed to this port and avoid conflicts.\u003c/p\u003e\n\u003cp\u003eFor example, we can get the download link:\u003cbr /\u003e\n\u003ca href=\"https://sourceforge.net/settings/mirror_choices?projectname=mad\u0026filename=libmad/0.15.1b/libmad-0.15.1b.tar.gz\u0026selected=nchc\"\u003ehttps://sourceforge.net/settings/mirror_choices?projectname=mad\u0026filename=libmad/0.15.1b/libmad-0.15.1b.tar.gz\u0026selected=nchc\u003c/a\u003e\u003cbr /\u003e\nSo the REPO is \u003ccode\u003emad/libmad\u003c/code\u003e, the REF is \u003ccode\u003e0.15.1b\u003c/code\u003e, and the FILENAME is \u003ccode\u003elibmad-0.15.1b.tar.gz\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eFor some special links:\u003cbr /\u003e\n\u003ca href=\"https://sourceforge.net/settings/mirror_choices?projectname=soxr\u0026filename=soxr-0.1.3-Source.tar.xz\u0026selected=nchc\"\u003ehttps://sourceforge.net/settings/mirror_choices?projectname=soxr\u0026filename=soxr-0.1.3-Source.tar.xz\u0026selected=nchc\u003c/a\u003e\u003cbr /\u003e\nThe REPO is \u003ccode\u003esoxr\u003c/code\u003e, REF is not exist, and the FILENAME is \u003ccode\u003esoxr-0.1.3-Source.tar.xz\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"sha512\"\u003eSHA512\u003c/h3\u003e\n\u003cp\u003eThe SHA512 hash that should match the archive.\u003c/p\u003e\n\u003ch3 id=\"working_directory\"\u003eWORKING_DIRECTORY\u003c/h3\u003e\n\u003cp\u003eIf specified, the archive will be extracted into the working directory instead of \u003ccode\u003e${CURRENT_BUILDTREES_DIR}/src/\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNote that the archive will still be extracted into a subfolder underneath that directory (\u003ccode\u003e${WORKING_DIRECTORY}/${REF}-${HASH}/\u003c/code\u003e).\u003c/p\u003e\n\u003ch3 id=\"patches\"\u003ePATCHES\u003c/h3\u003e\n\u003cp\u003eA list of patches to be applied to the extracted sources.\u003c/p\u003e\n\u003cp\u003eRelative paths are based on the port directory.\u003c/p\u003e\n\u003ch3 id=\"disable_ssl\"\u003eDISABLE_SSL\u003c/h3\u003e\n\u003cp\u003eDisable ssl when downloading source.\u003c/p\u003e\n\u003ch3 id=\"no_remove_one_level\"\u003eNO_REMOVE_ONE_LEVEL\u003c/h3\u003e\n\u003cp\u003eSpecifies that the default removal of the top level folder should not occur.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples:\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/cunit/portfile.cmake\"\u003ecunit\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/polyclipping/portfile.cmake\"\u003epolyclipping\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/tinyfiledialogs/portfile.cmake\"\u003etinyfiledialogs\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_from_sourceforge.cmake\"\u003escripts/cmake/vcpkg_from_sourceforge.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_get_program_files_platform_bitness.html",
        "Name":  "vcpkg_get_program_files_platform_bitness",
        "Source":  "\u003ch1 id=\"vcpkg_get_program_files_platform_bitness\"\u003evcpkg_get_program_files_platform_bitness\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_get_program_files_platform_bitness.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eGet the Program Files directory of the current platform\u0027s bitness:\u003cbr /\u003e\neither \u003ccode\u003e$ENV{ProgramW6432}\u003c/code\u003e on 64-bit windows,\u003cbr /\u003e\nor \u003ccode\u003e$ENV{PROGRAMFILES}\u003c/code\u003e on 32-bit windows.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_get_program_files_platform_bitness(\u0026lt;variable\u0026gt;)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_get_program_files_platform_bitness.cmake\"\u003escripts/cmake/vcpkg_get_program_files_platform_bitness.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_get_windows_sdk.html",
        "Name":  "vcpkg_get_windows_sdk",
        "Source":  "\u003ch1 id=\"vcpkg_get_windows_sdk\"\u003evcpkg_get_windows_sdk\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_get_windows_sdk.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eGet the Windows SDK number.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_get_windows_sdk(\u0026lt;variable\u0026gt;)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_get_windows_sdk.cmake\"\u003escripts/cmake/vcpkg_get_windows_sdk.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_install_cmake.html",
        "Name":  "vcpkg_install_cmake",
        "Source":  "\u003ch1 id=\"vcpkg_install_cmake\"\u003evcpkg_install_cmake\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_install_cmake.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThis function has been deprecated in favor of \u003ccode\u003evcpkg_cmake_install\u003c/code\u003e from the vcpkg-cmake port.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eBuild and install a cmake project.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_install_cmake(...)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters:\u003c/h2\u003e\n\u003cp\u003eSee \u003ca href=\"vcpkg_build_cmake.md\"\u003e\u003ccode\u003evcpkg_build_cmake()\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes:\u003c/h2\u003e\n\u003cp\u003eThis command transparently forwards to \u003ca href=\"vcpkg_build_cmake.md\"\u003e\u003ccode\u003evcpkg_build_cmake()\u003c/code\u003e\u003c/a\u003e, adding a \u003ccode\u003eTARGET install\u003c/code\u003e\u003cbr /\u003e\nparameter.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples:\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/zlib/portfile.cmake\"\u003ezlib\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/cpprestsdk/portfile.cmake\"\u003ecpprestsdk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/poco/portfile.cmake\"\u003epoco\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/opencv/portfile.cmake\"\u003eopencv\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_install_cmake.cmake\"\u003escripts/cmake/vcpkg_install_cmake.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_install_gn.html",
        "Name":  "vcpkg_install_gn",
        "Source":  "\u003ch1 id=\"vcpkg_install_gn\"\u003evcpkg_install_gn\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_install_gn.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eInstalls a GN project\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_install_gn(\n     SOURCE_PATH \u0026lt;SOURCE_PATH\u0026gt;\n     [TARGETS \u0026lt;target\u0026gt;...]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters:\u003c/h2\u003e\n\u003ch3 id=\"source_path\"\u003eSOURCE_PATH\u003c/h3\u003e\n\u003cp\u003eThe path to the source directory\u003c/p\u003e\n\u003ch3 id=\"targets\"\u003eTARGETS\u003c/h3\u003e\n\u003cp\u003eOnly install the specified targets.\u003c/p\u003e\n\u003cp\u003eNote: includes must be handled separately\u003c/p\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_install_gn.cmake\"\u003escripts/cmake/vcpkg_install_gn.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_install_make.html",
        "Name":  "vcpkg_install_make",
        "Source":  "\u003ch1 id=\"vcpkg_install_make\"\u003evcpkg_install_make\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_install_make.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBuild and install a make project.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_install_make(...)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters:\u003c/h2\u003e\n\u003cp\u003eSee \u003ca href=\"vcpkg_build_make.md\"\u003e\u003ccode\u003evcpkg_build_make()\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes:\u003c/h2\u003e\n\u003cp\u003eThis command transparently forwards to \u003ca href=\"vcpkg_build_make.md\"\u003e\u003ccode\u003evcpkg_build_make()\u003c/code\u003e\u003c/a\u003e, adding \u003ccode\u003eENABLE_INSTALL\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/x264/portfile.cmake\"\u003ex264\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/tcl/portfile.cmake\"\u003etcl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/freexl/portfile.cmake\"\u003efreexl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/libosip2/portfile.cmake\"\u003elibosip2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_install_make.cmake\"\u003escripts/cmake/vcpkg_install_make.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_install_meson.html",
        "Name":  "vcpkg_install_meson",
        "Source":  "\u003ch1 id=\"vcpkg_install_meson\"\u003evcpkg_install_meson\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_install_meson.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBuilds a meson project previously configured with \u003ccode\u003evcpkg_configure_meson()\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_install_meson()\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/fribidi/portfile.cmake\"\u003efribidi\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/libepoxy/portfile.cmake\"\u003elibepoxy\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_install_meson.cmake\"\u003escripts/cmake/vcpkg_install_meson.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_install_msbuild.html",
        "Name":  "vcpkg_install_msbuild",
        "Source":  "\u003ch1 id=\"vcpkg_install_msbuild\"\u003evcpkg_install_msbuild\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_install_msbuild.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBuild and install a msbuild-based project. This replaces \u003ccode\u003evcpkg_build_msbuild()\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_install_msbuild(\n    SOURCE_PATH \u0026lt;${SOURCE_PATH}\u0026gt;\n    PROJECT_SUBPATH \u0026lt;port.sln\u0026gt;\n    [INCLUDES_SUBPATH \u0026lt;include\u0026gt;]\n    [LICENSE_SUBPATH \u0026lt;LICENSE\u0026gt;]\n    [RELEASE_CONFIGURATION \u0026lt;Release\u0026gt;]\n    [DEBUG_CONFIGURATION \u0026lt;Debug\u0026gt;]\n    [TARGET \u0026lt;Build\u0026gt;]\n    [TARGET_PLATFORM_VERSION \u0026lt;10.0.15063.0\u0026gt;]\n    [PLATFORM \u0026lt;${TRIPLET_SYSTEM_ARCH}\u0026gt;]\n    [PLATFORM_TOOLSET \u0026lt;${VCPKG_PLATFORM_TOOLSET}\u0026gt;]\n    [OPTIONS \u0026lt;/p:ZLIB_INCLUDE_PATH=X\u0026gt;...]\n    [OPTIONS_RELEASE \u0026lt;/p:ZLIB_LIB=X\u0026gt;...]\n    [OPTIONS_DEBUG \u0026lt;/p:ZLIB_LIB=X\u0026gt;...]\n    [USE_VCPKG_INTEGRATION]\n    [ALLOW_ROOT_INCLUDES | REMOVE_ROOT_INCLUDES]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"source_path\"\u003eSOURCE_PATH\u003c/h3\u003e\n\u003cp\u003eThe path to the root of the source tree.\u003c/p\u003e\n\u003cp\u003eBecause MSBuild uses in-source builds, the source tree will be copied into a temporary location for the build. This\u003cbr /\u003e\nparameter is the base for that copy and forms the base for all XYZ_SUBPATH options.\u003c/p\u003e\n\u003ch3 id=\"use_vcpkg_integration\"\u003eUSE_VCPKG_INTEGRATION\u003c/h3\u003e\n\u003cp\u003eApply the normal \u003ccode\u003eintegrate install\u003c/code\u003e integration for building the project.\u003c/p\u003e\n\u003cp\u003eBy default, projects built with this command will not automatically link libraries or have header paths set.\u003c/p\u003e\n\u003ch3 id=\"project_subpath\"\u003ePROJECT_SUBPATH\u003c/h3\u003e\n\u003cp\u003eThe subpath to the solution (\u003ccode\u003e.sln\u003c/code\u003e) or project (\u003ccode\u003e.vcxproj\u003c/code\u003e) file relative to \u003ccode\u003eSOURCE_PATH\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"license_subpath\"\u003eLICENSE_SUBPATH\u003c/h3\u003e\n\u003cp\u003eThe subpath to the license file relative to \u003ccode\u003eSOURCE_PATH\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"includes_subpath\"\u003eINCLUDES_SUBPATH\u003c/h3\u003e\n\u003cp\u003eThe subpath to the includes directory relative to \u003ccode\u003eSOURCE_PATH\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis parameter should be a directory and should not end in a trailing slash.\u003c/p\u003e\n\u003ch3 id=\"allow_root_includes\"\u003eALLOW_ROOT_INCLUDES\u003c/h3\u003e\n\u003cp\u003eIndicates that top-level include files (e.g. \u003ccode\u003einclude/zlib.h\u003c/code\u003e) should be allowed.\u003c/p\u003e\n\u003ch3 id=\"remove_root_includes\"\u003eREMOVE_ROOT_INCLUDES\u003c/h3\u003e\n\u003cp\u003eIndicates that top-level include files (e.g. \u003ccode\u003einclude/Makefile.am\u003c/code\u003e) should be removed.\u003c/p\u003e\n\u003ch3 id=\"skip_clean\"\u003eSKIP_CLEAN\u003c/h3\u003e\n\u003cp\u003eIndicates that the intermediate files should not be removed.\u003c/p\u003e\n\u003cp\u003ePorts using this option should later call \u003ca href=\"vcpkg_clean_msbuild.md\"\u003e\u003ccode\u003evcpkg_clean_msbuild()\u003c/code\u003e\u003c/a\u003e to manually clean up.\u003c/p\u003e\n\u003ch3 id=\"release_configuration\"\u003eRELEASE_CONFIGURATION\u003c/h3\u003e\n\u003cp\u003eThe configuration (\u003ccode\u003e/p:Configuration\u003c/code\u003e msbuild parameter) used for Release builds.\u003c/p\u003e\n\u003ch3 id=\"debug_configuration\"\u003eDEBUG_CONFIGURATION\u003c/h3\u003e\n\u003cp\u003eThe configuration (\u003ccode\u003e/p:Configuration\u003c/code\u003e msbuild parameter) used for Debug builds.\u003c/p\u003e\n\u003ch3 id=\"target_platform_version\"\u003eTARGET_PLATFORM_VERSION\u003c/h3\u003e\n\u003cp\u003eThe WindowsTargetPlatformVersion (\u003ccode\u003e/p:WindowsTargetPlatformVersion\u003c/code\u003e msbuild parameter)\u003c/p\u003e\n\u003ch3 id=\"target\"\u003eTARGET\u003c/h3\u003e\n\u003cp\u003eThe MSBuild target to build. (\u003ccode\u003e/t:\u0026lt;TARGET\u0026gt;\u003c/code\u003e)\u003c/p\u003e\n\u003ch3 id=\"platform\"\u003ePLATFORM\u003c/h3\u003e\n\u003cp\u003eThe platform (\u003ccode\u003e/p:Platform\u003c/code\u003e msbuild parameter) used for the build.\u003c/p\u003e\n\u003ch3 id=\"platform_toolset\"\u003ePLATFORM_TOOLSET\u003c/h3\u003e\n\u003cp\u003eThe platform toolset (\u003ccode\u003e/p:PlatformToolset\u003c/code\u003e msbuild parameter) used for the build.\u003c/p\u003e\n\u003ch3 id=\"options\"\u003eOPTIONS\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to msbuild for all builds.\u003c/p\u003e\n\u003ch3 id=\"options_release\"\u003eOPTIONS_RELEASE\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to msbuild for Release builds. These are in addition to \u003ccode\u003eOPTIONS\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"options_debug\"\u003eOPTIONS_DEBUG\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to msbuild for Debug builds. These are in addition to \u003ccode\u003eOPTIONS\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/xalan-c/portfile.cmake\"\u003exalan-c\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/libimobiledevice/portfile.cmake\"\u003elibimobiledevice\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_install_msbuild.cmake\"\u003escripts/cmake/vcpkg_install_msbuild.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_install_nmake.html",
        "Name":  "vcpkg_install_nmake",
        "Source":  "\u003ch1 id=\"vcpkg_install_nmake\"\u003evcpkg_install_nmake\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_install_nmake.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBuild and install a msvc makefile project.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_install_nmake(\n    SOURCE_PATH \u0026lt;${SOURCE_PATH}\u0026gt;\n    [NO_DEBUG]\n    [TARGET \u0026lt;all\u0026gt;]\n    PROJECT_SUBPATH \u0026lt;${SUBPATH}\u0026gt;\n    PROJECT_NAME \u0026lt;${MAKEFILE_NAME}\u0026gt;\n    [PRERUN_SHELL \u0026lt;${SHELL_PATH}\u0026gt;]\n    [PRERUN_SHELL_DEBUG \u0026lt;${SHELL_PATH}\u0026gt;]\n    [PRERUN_SHELL_RELEASE \u0026lt;${SHELL_PATH}\u0026gt;]\n    [OPTIONS \u0026lt;-DUSE_THIS_IN_ALL_BUILDS=1\u0026gt;...]\n    [OPTIONS_RELEASE \u0026lt;-DOPTIMIZE=1\u0026gt;...]\n    [OPTIONS_DEBUG \u0026lt;-DDEBUGGABLE=1\u0026gt;...]\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"source_path\"\u003eSOURCE_PATH\u003c/h3\u003e\n\u003cp\u003eSpecifies the directory containing the source files.\u003cbr /\u003e\nBy convention, this is usually set in the portfile as the variable \u003ccode\u003eSOURCE_PATH\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"project_subpath\"\u003ePROJECT_SUBPATH\u003c/h3\u003e\n\u003cp\u003eSpecifies the sub directory containing the \u003ccode\u003emakefile.vc\u003c/code\u003e/\u003ccode\u003emakefile.mak\u003c/code\u003e/\u003ccode\u003emakefile.msvc\u003c/code\u003e or other msvc makefile.\u003c/p\u003e\n\u003ch3 id=\"project_name\"\u003ePROJECT_NAME\u003c/h3\u003e\n\u003cp\u003eSpecifies the name of msvc makefile name.\u003cbr /\u003e\nDefault is makefile.vc\u003c/p\u003e\n\u003ch3 id=\"no_debug\"\u003eNO_DEBUG\u003c/h3\u003e\n\u003cp\u003eThis port doesn\u0027t support debug mode.\u003c/p\u003e\n\u003ch3 id=\"prerun_shell\"\u003ePRERUN_SHELL\u003c/h3\u003e\n\u003cp\u003eScript that needs to be called before build\u003c/p\u003e\n\u003ch3 id=\"prerun_shell_debug\"\u003ePRERUN_SHELL_DEBUG\u003c/h3\u003e\n\u003cp\u003eScript that needs to be called before debug build\u003c/p\u003e\n\u003ch3 id=\"prerun_shell_release\"\u003ePRERUN_SHELL_RELEASE\u003c/h3\u003e\n\u003cp\u003eScript that needs to be called before release build\u003c/p\u003e\n\u003ch3 id=\"options\"\u003eOPTIONS\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to generate during the generation.\u003c/p\u003e\n\u003ch3 id=\"options_release\"\u003eOPTIONS_RELEASE\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to generate during the Release generation. These are in addition to \u003ccode\u003eOPTIONS\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"options_debug\"\u003eOPTIONS_DEBUG\u003c/h3\u003e\n\u003cp\u003eAdditional options passed to generate during the Debug generation. These are in addition to \u003ccode\u003eOPTIONS\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"parameters-1\"\u003eParameters:\u003c/h2\u003e\n\u003cp\u003eSee \u003ca href=\"vcpkg_build_nmake.md\"\u003e\u003ccode\u003evcpkg_build_nmake()\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes:\u003c/h2\u003e\n\u003cp\u003eThis command transparently forwards to \u003ca href=\"vcpkg_build_nmake.md\"\u003e\u003ccode\u003evcpkg_build_nmake()\u003c/code\u003e\u003c/a\u003e, adding \u003ccode\u003eENABLE_INSTALL\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/tcl/portfile.cmake\"\u003etcl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/freexl/portfile.cmake\"\u003efreexl\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_install_nmake.cmake\"\u003escripts/cmake/vcpkg_install_nmake.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_install_qmake.html",
        "Name":  "vcpkg_install_qmake",
        "Source":  "\u003ch1 id=\"vcpkg_install_qmake\"\u003evcpkg_install_qmake\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_install_qmake.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBuild and install a qmake project.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_install_qmake(...)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters:\u003c/h2\u003e\n\u003cp\u003eSee \u003ca href=\"vcpkg_build_qmake.md\"\u003e\u003ccode\u003evcpkg_build_qmake()\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes:\u003c/h2\u003e\n\u003cp\u003eThis command transparently forwards to \u003ca href=\"vcpkg_build_qmake.md\"\u003e\u003ccode\u003evcpkg_build_qmake()\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAdditionally, this command will copy produced .libs/.dlls/.as/.dylibs/.sos to the appropriate\u003cbr /\u003e\nstaging directories.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/libqglviewer/portfile.cmake\"\u003elibqglviewer\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_install_qmake.cmake\"\u003escripts/cmake/vcpkg_install_qmake.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_minimum_required.html",
        "Name":  "vcpkg_minimum_required",
        "Source":  "\u003ch1 id=\"vcpkg_minimum_required\"\u003evcpkg_minimum_required\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_minimum_required.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAsserts that the version of the vcpkg program being used to build a port is later than the supplied date, inclusive.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_minimum_required(VERSION 2021-01-13)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"version\"\u003eVERSION\u003c/h3\u003e\n\u003cp\u003eThe date-version to check against.\u003c/p\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_minimum_required.cmake\"\u003escripts/cmake/vcpkg_minimum_required.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/vcpkg_replace_string.html",
        "Name":  "vcpkg_replace_string",
        "Source":  "\u003ch1 id=\"vcpkg_replace_string\"\u003evcpkg_replace_string\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/vcpkg_replace_string.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eReplace a string in a file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_replace_string(filename match_string replace_string)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_replace_string.cmake\"\u003escripts/cmake/vcpkg_replace_string.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers"
    },
    {
        "Path":  "/en/docs/maintainers/internal/vcpkg_internal_get_cmake_vars.html",
        "Name":  "vcpkg_internal_get_cmake_vars",
        "Source":  "\u003ch1 id=\"vcpkg_internal_get_cmake_vars\"\u003evcpkg_internal_get_cmake_vars\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOnly for internal use in vcpkg helpers. Behavior and arguments will change without notice.\u003c/strong\u003e\u003cbr /\u003e\nRuns a cmake configure with a dummy project to extract certain cmake variables\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_internal_get_cmake_vars(\n    [OUTPUT_FILE \u0026lt;output_file_with_vars\u0026gt;]\n    [OPTIONS \u0026lt;-DUSE_THIS_IN_ALL_BUILDS=1\u0026gt;...]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"parameters\"\u003eParameters\u003c/h2\u003e\n\u003ch3 id=\"options\"\u003eOPTIONS\u003c/h3\u003e\n\u003cp\u003eAdditional options to pass to the test configure call \u003c/p\u003e\n\u003ch3 id=\"output_file\"\u003eOUTPUT_FILE\u003c/h3\u003e\n\u003cp\u003eVariable to return the path to the generated cmake file with the detected \u003ccode\u003eCMAKE_\u003c/code\u003e variables set as \u003ccode\u003eVCKPG_DETECTED_\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cp\u003eIf possible avoid usage in portfiles. \u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_configure_make.cmake\"\u003evcpkg_configure_make\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/vcpkg_internal_get_cmake_vars.cmake\"\u003escripts/cmake/vcpkg_internal_get_cmake_vars.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers#internal"
    },
    {
        "Path":  "/en/docs/maintainers/internal/z_vcpkg_apply_patches.html",
        "Name":  "z_vcpkg_apply_patches",
        "Source":  "\u003ch1 id=\"z_vcpkg_apply_patches\"\u003ez_vcpkg_apply_patches\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOnly for internal use in vcpkg helpers. Behavior and arguments will change without notice.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eApply a set of patches to a source tree.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003ez_vcpkg_apply_patches(\n    SOURCE_PATH \u0026lt;path-to-source\u0026gt;\n    [QUIET]\n    PATCHES \u0026lt;patch\u0026gt;...\n)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e\u0026lt;path-to-source\u0026gt;\u003c/code\u003e should be set to \u003ccode\u003e${SOURCE_PATH}\u003c/code\u003e by convention,\u003cbr /\u003e\nand is the path to apply the patches in.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ez_vcpkg_apply_patches\u003c/code\u003e will take the list of \u003ccode\u003e\u0026lt;patch\u0026gt;\u003c/code\u003ees,\u003cbr /\u003e\nwhich are by default relative to the port directory,\u003cbr /\u003e\nand apply them in order using \u003ccode\u003egit apply\u003c/code\u003e.\u003cbr /\u003e\nGenerally, these \u003ccode\u003e\u0026lt;patch\u0026gt;\u003c/code\u003ees take the form of \u003ccode\u003esome.patch\u003c/code\u003e\u003cbr /\u003e\nto select patches in the port directory.\u003cbr /\u003e\nOne may also download patches and use \u003ccode\u003e${VCPKG_DOWNLOADS}/path/to/some.patch\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf \u003ccode\u003eQUIET\u003c/code\u003e is not passed, it is a fatal error for a patch to fail to apply;\u003cbr /\u003e\notherwise, if \u003ccode\u003eQUIET\u003c/code\u003e is passed, no message is printed.\u003cbr /\u003e\nThis should only be used for edge cases, such as patches that are known to fail even on a clean source tree.\u003c/p\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/z_vcpkg_apply_patches.cmake\"\u003escripts/cmake/z_vcpkg_apply_patches.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers#internal"
    },
    {
        "Path":  "/en/docs/maintainers/internal/z_vcpkg_function_arguments.html",
        "Name":  "z_vcpkg_function_arguments",
        "Source":  "\u003ch1 id=\"z_vcpkg_function_arguments\"\u003ez_vcpkg_function_arguments\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOnly for internal use in vcpkg helpers. Behavior and arguments will change without notice.\u003c/strong\u003e\u003cbr /\u003e\nGet a list of the arguments which were passed in.\u003cbr /\u003e\nUnlike \u003ccode\u003eARGV\u003c/code\u003e, which is simply the arguments joined with \u003ccode\u003e;\u003c/code\u003e,\u003cbr /\u003e\nso that \u003ccode\u003e(A B)\u003c/code\u003e is not distinguishable from \u003ccode\u003e(\"A;B\")\u003c/code\u003e,\u003cbr /\u003e\nthis macro gives \u003ccode\u003e\"A;B\"\u003c/code\u003e for the first argument list,\u003cbr /\u003e\nand \u003ccode\u003e\"A\\;B\"\u003c/code\u003e for the second.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003ez_vcpkg_function_arguments(\u0026lt;out-var\u0026gt; [\u0026lt;N\u0026gt;])\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003ez_vcpkg_function_arguments\u003c/code\u003e gets the arguments between \u003ccode\u003eARGV\u0026lt;N\u0026gt;\u003c/code\u003e and the last argument.\u003cbr /\u003e\n\u003ccode\u003e\u0026lt;N\u0026gt;\u003c/code\u003e defaults to \u003ccode\u003e0\u003c/code\u003e, so that all arguments are taken.\u003c/p\u003e\n\u003ch2 id=\"example\"\u003eExample:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003efunction(foo_replacement)\n    z_vcpkg_function_arguments(ARGS)\n    foo(${ARGS})\n    ...\nendfunction()\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/z_vcpkg_function_arguments.cmake\"\u003escripts/cmake/z_vcpkg_function_arguments.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers#internal"
    },
    {
        "Path":  "/en/docs/maintainers/internal/z_vcpkg_prettify_command_line.html",
        "Name":  "z_vcpkg_prettify_command_line",
        "Source":  "\u003ch1 id=\"z_vcpkg_prettify_command_line\"\u003ez_vcpkg_prettify_command_line\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOnly for internal use in vcpkg helpers. Behavior and arguments will change without notice.\u003c/strong\u003e\u003cbr /\u003e\nTurn a command line into a formatted string.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003ez_vcpkg_prettify_command_line(\u0026lt;out-var\u0026gt; \u0026lt;argument\u0026gt;...)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis command is for internal use, when printing out to a message.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003escripts/cmake/vcpkg_execute_build_process.cmake\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003escripts/cmake/vcpkg_execute_required_process.cmake\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003escripts/cmake/vcpkg_execute_required_process_repeat.cmake\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/scripts/cmake/z_vcpkg_prettify_command_line.cmake\"\u003escripts/cmake/z_vcpkg_prettify_command_line.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers#internal"
    },
    {
        "Path":  "/en/docs/maintainers/ports/vcpkg-cmake-config.html",
        "Name":  "vcpkg Cmake Config",
        "Source":  "\u003ch1 id=\"vcpkg-cmake-config\"\u003evcpkg-cmake-config\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003evcpkg-cmake-config\u003c/code\u003e provides \u003ccode\u003evcpkg_cmake_config_fixup()\u003c/code\u003e,\u003cbr /\u003e\na function which both:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFixes common mistakes in port build systems, like using absolute paths\u003c/li\u003e\n\u003cli\u003eMerges the debug and release config files.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis function should almost always be used when a port has \u003ccode\u003e*config.cmake\u003c/code\u003e files,\u003cbr /\u003e\neven when the buildsystem of the project is not CMake.\u003c/p\u003e",
        "Nav":  "#maintainers#ports"
    },
    {
        "Path":  "/en/docs/maintainers/ports/vcpkg-cmake.html",
        "Name":  "vcpkg Cmake",
        "Source":  "\u003ch1 id=\"vcpkg-cmake\"\u003evcpkg-cmake\u003c/h1\u003e\n\u003cp\u003eThis port contains cmake functions for dealing with a CMake buildsystem.\u003c/p\u003e\n\u003cp\u003eIn the common case, \u003ccode\u003evcpkg_cmake_configure()\u003c/code\u003e (with appropriate arguments)\u003cbr /\u003e\nfollowed by \u003ccode\u003evcpkg_cmake_install()\u003c/code\u003e will be enough to build and install a port.\u003cbr /\u003e\n\u003ccode\u003evcpkg_cmake_build()\u003c/code\u003e is provided for more complex cases.\u003c/p\u003e",
        "Nav":  "#maintainers#ports"
    },
    {
        "Path":  "/en/docs/maintainers/ports/vcpkg-cmake/vcpkg_cmake_build.html",
        "Name":  "vcpkg_cmake_build",
        "Source":  "\u003ch1 id=\"vcpkg_cmake_build\"\u003evcpkg_cmake_build\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/ports/vcpkg-cmake/vcpkg_cmake_build.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBuild a cmake project.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_cmake_build(\n    [TARGET \u0026lt;target\u0026gt;]\n    [LOGFILE_BASE \u0026lt;base\u0026gt;]\n    [DISABLE_PARALLEL]\n    [ADD_BIN_TO_PATH]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003evcpkg_cmake_build\u003c/code\u003e builds an already-configured cmake project.\u003cbr /\u003e\nYou can use the alias [\u003ccode\u003evcpkg_cmake_install()\u003c/code\u003e] function\u003cbr /\u003e\nif your CMake build system supports the \u003ccode\u003einstall\u003c/code\u003e TARGET,\u003cbr /\u003e\nand this is something we recommend doing whenever possible.\u003cbr /\u003e\nOtherwise, you can use \u003ccode\u003eTARGET\u003c/code\u003e to set the target to build.\u003cbr /\u003e\nThis function defaults to not passing a target to cmake.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eLOGFILE_BASE\u003c/code\u003e is used to set the base of the logfile names;\u003cbr /\u003e\nby default, this is \u003ccode\u003ebuild\u003c/code\u003e, and thus the logfiles end up being something like\u003cbr /\u003e\n\u003ccode\u003ebuild-x86-windows-dbg.log\u003c/code\u003e; if you use \u003ccode\u003evcpkg_cmake_install\u003c/code\u003e,\u003cbr /\u003e\nthis is set to \u003ccode\u003einstall\u003c/code\u003e, so you\u0027ll get log names like \u003ccode\u003einstall-x86-windows-dbg.log\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eFor build systems that are buggy when run in parallel,\u003cbr /\u003e\nusing \u003ccode\u003eDISABLE_PARALLEL\u003c/code\u003e will run the build with only one job.\u003c/p\u003e\n\u003cp\u003eFinally, \u003ccode\u003eADD_BIN_TO_PATH\u003c/code\u003e adds the appropriate (either release or debug)\u003cbr /\u003e\n\u003ccode\u003ebin/\u003c/code\u003e directories to the path during the build,\u003cbr /\u003e\nsuch that executables run during the build will be able to access those DLLs.\u003c/p\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/vcpkg-cmake/vcpkg_cmake_build.cmake\"\u003eports/vcpkg-cmake/vcpkg_cmake_build.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers#ports"
    },
    {
        "Path":  "/en/docs/maintainers/ports/vcpkg-cmake/vcpkg_cmake_configure.html",
        "Name":  "vcpkg_cmake_configure",
        "Source":  "\u003ch1 id=\"vcpkg_cmake_configure\"\u003evcpkg_cmake_configure\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/ports/vcpkg-cmake/vcpkg_cmake_configure.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eConfigure a CMake buildsystem.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_cmake_configure(\n    SOURCE_PATH \u0026lt;source-path\u0026gt;\n    [LOGFILE_BASE \u0026lt;logname-base\u0026gt;]\n    [DISABLE_PARALLEL_CONFIGURE]\n    [NO_CHARSET_FLAG]\n    [WINDOWS_USE_MSBUILD]\n    [GENERATOR \u0026lt;generator\u0026gt;]\n    [OPTIONS\n        \u0026lt;configure-setting\u0026gt;...]\n    [OPTIONS_RELEASE\n        \u0026lt;configure-setting\u0026gt;...]\n    [OPTIONS_DEBUG\n        \u0026lt;configure-setting\u0026gt;...]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003evcpkg_cmake_configure\u003c/code\u003e configures a CMake build system for use with\u003cbr /\u003e\n\u003ccode\u003evcpkg_cmake_buildsystem_build\u003c/code\u003e and \u003ccode\u003evcpkg_cmake_buildsystem_install\u003c/code\u003e.\u003cbr /\u003e\n\u003ccode\u003esource-path\u003c/code\u003e is where the source is located; by convention,\u003cbr /\u003e\nthis is usually \u003ccode\u003e${SOURCE_PATH}\u003c/code\u003e, which is set by one of the \u003ccode\u003evcpkg_from_*\u003c/code\u003e functions.\u003cbr /\u003e\nThis function configures the build system for both Debug and Release builds by default,\u003cbr /\u003e\nassuming that \u003ccode\u003eVCPKG_BUILD_TYPE\u003c/code\u003e is not set; if it is, then it will only configure for\u003cbr /\u003e\nthat build type.\u003c/p\u003e\n\u003cp\u003eUse the \u003ccode\u003eOPTIONS\u003c/code\u003e argument to set the configure settings for both release and debug,\u003cbr /\u003e\nand use \u003ccode\u003eOPTIONS_RELEASE\u003c/code\u003e and \u003ccode\u003eOPTIONS_DEBUG\u003c/code\u003e to set the configure settings for\u003cbr /\u003e\nrelease only and debug only repsectively.\u003c/p\u003e\n\u003cp\u003eBy default, when possible, \u003ccode\u003evcpkg_cmake_configure\u003c/code\u003e uses \u003ca href=\"https://ninja-build.org/\"\u003eninja-build\u003c/a\u003e\u003cbr /\u003e\nas its build system. If the \u003ccode\u003eWINDOWS_USE_MSBUILD\u003c/code\u003e argument is passed, then\u003cbr /\u003e\n\u003ccode\u003evcpkg_cmake_configure\u003c/code\u003e will use a Visual Studio generator on Windows;\u003cbr /\u003e\non every other platform, \u003ccode\u003evcpkg_cmake_configure\u003c/code\u003e just uses Ninja.\u003c/p\u003e\n\u003cp\u003eAdditionally, one may pass the specific generator a port should use with \u003ccode\u003eGENERATOR\u003c/code\u003e.\u003cbr /\u003e\nThis is useful if some project-specific buildsystem\u003cbr /\u003e\nhas been wrapped in a CMake build system that doesn\u0027t perform an actual build.\u003cbr /\u003e\nIf used for this purpose, it should be set to \u003ccode\u003e\"NMake Makefiles\"\u003c/code\u003e.\u003cbr /\u003e\n\u003ccode\u003evcpkg_cmake_buildsystem_build\u003c/code\u003e and \u003ccode\u003einstall\u003c/code\u003e do not support this being set to anything\u003cbr /\u003e\nexcept for NMake.\u003c/p\u003e\n\u003cp\u003eFor libraries which cannot be configured in parallel,\u003cbr /\u003e\npass the \u003ccode\u003eDISABLE_PARALLEL_CONFIGURE\u003c/code\u003e flag. This is needed, for example,\u003cbr /\u003e\nif the library\u0027s build system writes back into the source directory during configure.\u003cbr /\u003e\nThis also disables the \u003ccode\u003eCMAKE_DISABLE_SOURCE_CHANGES\u003c/code\u003e option.\u003c/p\u003e\n\u003cp\u003eBy default, this function adds flags to \u003ccode\u003eCMAKE_C_FLAGS\u003c/code\u003e and \u003ccode\u003eCMAKE_CXX_FLAGS\u003c/code\u003e\u003cbr /\u003e\nwhich set the default character set to utf-8 for MSVC.\u003cbr /\u003e\nIf the library sets its own code page, pass the \u003ccode\u003eNO_CHARSET_FLAG\u003c/code\u003e option.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eLOGFILE_BASE\u003c/code\u003e is used to set the base of the logfile names;\u003cbr /\u003e\nby default, this is \u003ccode\u003econfig\u003c/code\u003e, and thus the logfiles end up being something like\u003cbr /\u003e\n\u003ccode\u003econfig-x86-windows-dbg.log\u003c/code\u003e. You can set it to anything you like;\u003cbr /\u003e\nif you set it to \u003ccode\u003econfig-the-first\u003c/code\u003e,\u003cbr /\u003e\nyou\u0027ll get something like \u003ccode\u003econfig-the-first-x86-windows.dbg.log\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cp\u003eThis command supplies many common arguments to CMake. To see the full list, examine the source.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/zlib/portfile.cmake\"\u003ezlib\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/cpprestsdk/portfile.cmake\"\u003ecpprestsdk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/poco/portfile.cmake\"\u003epoco\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/opencv/portfile.cmake\"\u003eopencv\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/vcpkg-cmake/vcpkg_cmake_configure.cmake\"\u003eports/vcpkg-cmake/vcpkg_cmake_configure.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers#ports"
    },
    {
        "Path":  "/en/docs/maintainers/ports/vcpkg-cmake/vcpkg_cmake_install.html",
        "Name":  "vcpkg_cmake_install",
        "Source":  "\u003ch1 id=\"vcpkg_cmake_install\"\u003evcpkg_cmake_install\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/ports/vcpkg-cmake/vcpkg_cmake_install.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBuild and install a cmake project.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_cmake_install(\n    [DISABLE_PARALLEL]\n    [ADD_BIN_TO_PATH]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003evcpkg_cmake_install\u003c/code\u003e transparently forwards to [\u003ccode\u003evcpkg_cmake_build()\u003c/code\u003e],\u003cbr /\u003e\nwith additional parameters to set the \u003ccode\u003eTARGET\u003c/code\u003e to \u003ccode\u003einstall\u003c/code\u003e,\u003cbr /\u003e\nand to set the \u003ccode\u003eLOGFILE_ROOT\u003c/code\u003e to \u003ccode\u003einstall\u003c/code\u003e as well.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples:\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/zlib/portfile.cmake\"\u003ezlib\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/vcpkg-cmake/vcpkg_cmake_install.cmake\"\u003eports/vcpkg-cmake/vcpkg_cmake_install.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers#ports"
    },
    {
        "Path":  "/en/docs/maintainers/ports/vcpkg-cmake-config/vcpkg_cmake_config_fixup.html",
        "Name":  "vcpkg_cmake_config_fixup",
        "Source":  "\u003ch1 id=\"vcpkg_cmake_config_fixup\"\u003evcpkg_cmake_config_fixup\u003c/h1\u003e\n\u003cp\u003eThe latest version of this document lives in the \u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/maintainers/ports/vcpkg-cmake-config/vcpkg_cmake_config_fixup.md\"\u003evcpkg repo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eMerge release and debug CMake targets and configs to support multiconfig generators.\u003c/p\u003e\n\u003cp\u003eAdditionally corrects common issues with targets, such as absolute paths and incorrectly placed binaries.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003evcpkg_cmake_config_fixup(\n    [PACKAGE_NAME \u0026lt;name\u0026gt;]\n    [CONFIG_PATH \u0026lt;config-directory\u0026gt;]\n    [DO_NOT_DELETE_CONFIG_PATH_PARENT]\n    [NO_PREFIX_CORRECTION]\n)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor many ports, \u003ccode\u003evcpkg_cmake_config_fixup()\u003c/code\u003e on its own should work,\u003cbr /\u003e\nas \u003ccode\u003ePACKAGE_NAME\u003c/code\u003e defaults to \u003ccode\u003e${PORT}\u003c/code\u003e and \u003ccode\u003eCONFIG_PATH\u003c/code\u003e defaults to \u003ccode\u003eshare/${PACKAGE_NAME}\u003c/code\u003e.\u003cbr /\u003e\nFor ports where the package name passed to \u003ccode\u003efind_package\u003c/code\u003e is distinct from the port name,\u003cbr /\u003e\n\u003ccode\u003ePACKAGE_NAME\u003c/code\u003e should be changed to be that name instead.\u003cbr /\u003e\nFor ports where the directory of the \u003ccode\u003e*config.cmake\u003c/code\u003e files cannot be set,\u003cbr /\u003e\nuse the \u003ccode\u003eCONFIG_PATH\u003c/code\u003e to change the directory where the files come from.\u003c/p\u003e\n\u003cp\u003eBy default the parent directory of CONFIG_PATH is removed if it is named \"cmake\".\u003cbr /\u003e\nPassing the \u003ccode\u003eDO_NOT_DELETE_PARENT_CONFIG_PATH\u003c/code\u003e option disable such behavior,\u003cbr /\u003e\nas it is convenient for ports that install\u003cbr /\u003e\nmore than one CMake package configuration file.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eNO_PREFIX_CORRECTION\u003c/code\u003e option disables the correction of \u003ccode\u003e_IMPORT_PREFIX\u003c/code\u003e\u003cbr /\u003e\ndone by vcpkg due to moving the config files.\u003cbr /\u003e\nCurrently the correction does not take into account how the files are moved,\u003cbr /\u003e\nand applies a rather simply correction which in some cases will yield the wrong results.\u003c/p\u003e\n\u003ch2 id=\"how-it-works\"\u003eHow it Works\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eMoves \u003ccode\u003e/debug/\u0026lt;CONFIG_PATH\u0026gt;/*targets-debug.cmake\u003c/code\u003e to \u003ccode\u003e/share/${PACKAGE_NAME}\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eRemoves \u003ccode\u003e/debug/\u0026lt;CONFIG_PATH\u0026gt;/*config.cmake\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eTransform all references matching \u003ccode\u003e/bin/*.exe\u003c/code\u003e to \u003ccode\u003e/tools/\u0026lt;port\u0026gt;/*.exe\u003c/code\u003e on Windows.\u003c/li\u003e\n\u003cli\u003eTransform all references matching \u003ccode\u003e/bin/*\u003c/code\u003e to \u003ccode\u003e/tools/\u0026lt;port\u0026gt;/*\u003c/code\u003e on other platforms.\u003c/li\u003e\n\u003cli\u003eFixes \u003ccode\u003e${_IMPORT_PREFIX}\u003c/code\u003e in auto generated targets.\u003c/li\u003e\n\u003cli\u003eReplace \u003ccode\u003e${CURRENT_INSTALLED_DIR}\u003c/code\u003e with \u003ccode\u003e${_IMPORT_PREFIX}\u003c/code\u003e in configs and targets.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/concurrentqueue/portfile.cmake\"\u003econcurrentqueue\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/curl/portfile.cmake\"\u003ecurl\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/nlohmann-json/portfile.cmake\"\u003enlohmann-json\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source\"\u003eSource\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Microsoft/vcpkg/blob/master/ports/vcpkg-cmake-config/vcpkg_cmake_config_fixup.cmake\"\u003eports/vcpkg-cmake-config/vcpkg_cmake_config_fixup.cmake\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#maintainers#ports"
    },
    {
        "Path":  "/en/docs/specifications/binarycaching.html",
        "Name":  "binarycaching",
        "Source":  "\u003ch1 id=\"binary-caching-v11-jul-14-2020\"\u003eBinary Caching v1.1 (Jul 14, 2020)\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eNote: this is the feature as it was initially specified and does not necessarily reflect the current behavior.\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"motivation\"\u003eMotivation\u003c/h2\u003e\n\u003cp\u003eThe primary motivation of binary caching is to accelerate two broad scenarios in an easily accessible way\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eContinuous Integration\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDeveloper Environment Changes (first-time or branch change)\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe generally believe both of these scenarios are addressed with the same feature set, however when differences arise they will be discussed in the individual scenarios. \u003c/p\u003e\n\u003cp\u003eIt should also be explicitly noted that this specification does not intend to propose a \"Microsoft Sanctioned Public Binaries Service\" such as nuget.org ??? we only intend to enable users to leverage services they already have access to, such as GitHub, local file shares, Azure Artifacts, etc.\u003c/p\u003e\n\u003ch2 id=\"key-user-stories\"\u003eKey User Stories\u003c/h2\u003e\n\u003ch3 id=\"ci---ci\"\u003eCI -\u0026gt; CI\u003c/h3\u003e\n\u003cp\u003eIn this story, a CI build using either persistent or non-persistent machines wants to potentially reuse binaries built in a previous run of the pipeline. This is partially covered by the Cache tasks in GitHub Actions or Azure DevOps Pipelines, however the Cache task is all-or-nothing: a single package change will prevent restoration and require rebuilding the entire graph which is unacceptable in many scenarios (such as if actively developing one of the packages).\u003c/p\u003e\n\u003ch3 id=\"ci---developer\"\u003eCI -\u0026gt; Developer\u003c/h3\u003e\n\u003cp\u003eIn this story, the developer wants to reuse binaries built during a CI run. Given appropriate CI coverage, most developers will always have any needed dependencies pre-built by the CI system.\u003c/p\u003e\n\u003cp\u003eNotably, this scenario indicates a need for Read/Write access granularity on the remote storage solution. Developers should not need write access to the output from the CI system for security reasons.\u003c/p\u003e\n\u003ch3 id=\"single-developer-same-machine-reuse\"\u003eSingle Developer (same machine reuse)\u003c/h3\u003e\n\u003cp\u003eWith the introduction of manifest files, each project will have separate instances of Vcpkg. The performance costs of rebuilding binaries across each cloned project can be debilitating for those working in micro-repos or open source; for the monolithic enterprise developer it is simply frustrating.\u003c/p\u003e\n\u003cp\u003eUser-wide binary caching alleviates the pain of this scenario by ensuring the same binaries aren???t built multiple times (as long as the projects truly overlap with respect to versions/packages/etc).\u003c/p\u003e\n\u003ch3 id=\"developer---developer-multi-machine--team-scenario\"\u003eDeveloper \u003c-\u003e Developer (multi-machine / team scenario)\u003c/h3\u003e\n\u003cp\u003eIn a small team scenario, it\u0027s reasonable that multiple developer machines can trust each other enough to share binaries. This also applies to developers that have multiple machines and wish to share binaries between them (given a similar enough environment).\u003c/p\u003e\n\u003ch2 id=\"solution-aspects\"\u003eSolution Aspects\u003c/h2\u003e\n\u003ch3 id=\"tracking-compilers\"\u003eTracking Compilers\u003c/h3\u003e\n\u003cp\u003eIn order to provide reliable binary caching, vcpkg must determine if the produced binaries are appropriate for the current context. Currently, we consider many factors, including:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eAll files in the port directory\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe toolchain file contents\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe triplet contents\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAll dependency binaries\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe version of the CMake tool used to build\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eand a few others.\u003c/p\u003e\n\u003cp\u003eHowever, we notably do not currently track the compiler used. This is critical for all cross-machine scenarios, as the environment is likely to change incompatibly from machine to machine. We propose hashing the compiler that will used by CMake. This can be accomplished either by reimplementing the logic of CMake or running some partial project and extracting the results. For performance reasons, we will prefer first using heuristics to approximate the CMake logic with accompanying documentation for users that fall outside those bounds.\u003c/p\u003e\n\u003cp\u003eAnother aspect of the environment we don\u0027t currently track is the CRT version on Linux systems. Currently, we believe this will not cause as many problems in most practices (thus not suitable for an MVP), since the compiler will (generally) link against the system CRT and should sufficiently reflect any differences. This can also be easily worked around by the user with documentation ??? the toolchain file can simply have a comment such as \"# this uses muslc\", which will cause it to hash differently.\u003c/p\u003e\n\u003ch3 id=\"better-control-over-source-modifications\"\u003eBetter control over source modifications\u003c/h3\u003e\n\u003cp\u003eCurrently, vcpkg caches sources inside \u003ccode\u003ebuildtrees/$PORT/src/\u003c/code\u003e. The built-in helpers, such as \u003ccode\u003evcpkg_extract_archive_ex()\u003c/code\u003e assume that if the appropriately named source folder exists, it is true, accurate, and without modification.\u003c/p\u003e\n\u003cp\u003eHowever, the basic workflow for working on ports (specifically, developing patches) breaks this assumption by directly editing whatever extracted source directory the tool is currently using until a successful build is achieved. The user then usually builds a patch file from their changes, then checks it in to the port directory (adding the changes to one of the tracked locations above) and everything is restored to normal.\u003c/p\u003e\n\u003cp\u003eHowever, this causes serious issues with the current tracking system, because modifications to this cached source are not detected and tracked into the binary package.\u003c/p\u003e\n\u003cp\u003eOur proposed solution is to force source re-extraction each time during builds that have uploading to any protocol enabled. Uploading/downloading can then be disabled on the command line via the --editable switch to reuse extracted sources and enable the current workflow.\u003c/p\u003e\n\u003ch3 id=\"protocols\"\u003eProtocols\u003c/h3\u003e\n\u003cp\u003eTo service different scenarios and user requirements, we need to support multiple backends. Currently, our CI system uses our only implemented backend: file-based archives.\u003c/p\u003e\n\u003ch4 id=\"backend-1-file-based-archives\"\u003eBackend #1: File-Based Archives\u003c/h4\u003e\n\u003cp\u003eThis backend simply stores .zip files in a hierarchy similar to git objects: \u003ccode\u003e$VCPKG_ROOT/archives/$XX/$YYYY.zip\u003c/code\u003e with \u003ccode\u003e$XX\u003c/code\u003e being the first two characters of the computed package hash, and \u003ccode\u003e$YYYY\u003c/code\u003e being the full expanded hash. It also supports storing failure logs as \u003ccode\u003e$VCPKG_ROOT/archives/fail/$XX/$YYYY.zip\u003c/code\u003e, however we consider this an internal feature that is not relevant to the key User Stories.\u003c/p\u003e\n\u003cp\u003eOur CI system uses this backend by symlinking this directory to an Azure Files share, enabling built binaries and failure logs to be shared by all machines in the pool. Credentials are handled at the time of mounting the Azure Files share, so this does not require interactive authentication.\u003c/p\u003e\n\u003cp\u003eThis protocol is ideal due to simplicity for same-machine reuse and simple serverless scenarios such as using networked SMB folders across multiple machines for very small teams. However, it has three significant limitations in the current incarnation:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eIt uses the hardcoded directory \u003ccode\u003e$VCPKG_ROOT/archives\u003c/code\u003e (redirectable using symlinks, but unwieldy)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIt cannot use multiple directories\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThere is no ability to treat directories as \"read-only\"/immutable\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese second two points are required to implement the very useful concept of \"fallback\" folders (see \u003ca href=\"https://github.com/NuGet/Home/wiki/%5BSpec%5D-Fallback-package-folders\"\u003ehttps://github.com/NuGet/Home/wiki/%5BSpec%5D-Fallback-package-folders\u003c/a\u003e for NuGet???s spec on this topic).\u003c/p\u003e\n\u003ch4 id=\"backend-2-nuget-azure-devops-artifacts-github-packages-etc\"\u003eBackend #2: NuGet (Azure DevOps Artifacts, GitHub Packages, etc)\u003c/h4\u003e\n\u003cp\u003eThis backend packages binaries into a \"raw\" NuGet package (not suitable for direct import by MSBuild projects) and uploads them to supported NuGet servers such as Azure DevOps Artifacts and GitHub Packages. We believe this will best satisfy the CI scenarios ??? both CI -\u0026gt; CI as well as CI -\u0026gt; Developer by relying on powerful, centralized, managed hosting.\u003c/p\u003e\n\u003cp\u003eThere is a difference in this case between the developer and CI scenarios. The developer generally wants to configure their remotes for the project and then be able to run vcpkg commands as normal, with packages automatically being downloaded and uploaded to optimize the experience. This is similar to File-Based Archives.\u003c/p\u003e\n\u003cp\u003eWhile a CI system could use the same workflow as a developer, there are a few key differences. First, a CI system must use a stored secret for authentication, because it cannot interactively authenticate. Second, to enable more complex interactions with systems such as package signing and task-based restores, we must also support a 4-step workflow:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eVcpkg computes hashes of any potentially required packages and writes them to a file\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAn unspecified service/task/etc can parse this file and download any appropriate packages\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003evcpkg is then invoked a second time, with any downloaded packages. This consumes the packages, performs any installations and builds, and potentially produces new packages to an output folder.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFinally, another unspecified service/task/etc can take these output packages, sign them, and upload them.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThis flow enables arbitrarily complex, user-defined authentication and signing schemes, such as the tasks provided by GitHub Actions and Azure DevOps Pipelines or manual signing as documented in the NuGet documentation: \u003ca href=\"https://docs.microsoft.com/en-us/nuget/create-packages/sign-a-package\"\u003ehttps://docs.microsoft.com/en-us/nuget/create-packages/sign-a-package\u003c/a\u003e.\u003c/p\u003e\n\u003ch4 id=\"configuration\"\u003eConfiguration\u003c/h4\u003e\n\u003cp\u003eCurrently, our file-based backend is enabled by passing the undocumented \u003ccode\u003e--binarycaching\u003c/code\u003e flag to any Vcpkg command or setting the undocumented environment variable \u003ccode\u003eVCPKG_FEATURE_FLAGS\u003c/code\u003e to \u003ccode\u003ebinarycaching\u003c/code\u003e. We will replace this feature flag with an on-by-default user-wide behavior, plus command line and environment-based configurability.\u003c/p\u003e\n\u003cp\u003eThe on-by-default configuration will specify the file-based archive protocol on either \u003ccode\u003e%LOCALAPPDATA%/vcpkg/archives\u003c/code\u003e (Windows) or \u003ccode\u003e$XDG_CACHE_HOME/vcpkg/archives\u003c/code\u003e (Unix). If \u003ccode\u003eXDG_CACHE_HOME\u003c/code\u003e is not defined on Unix, we will fall back to \u003ccode\u003e$HOME/.cache/vcpkg/archives\u003c/code\u003e based on the \u003ca href=\"https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\"\u003eXDG Base Directory Specification\u003c/a\u003e. This can be redirected with a symlink, or completely overridden with the command line or environment. In the future we can also consider having a user-wide configuration file, however we do not believe this is important for any of our key scenarios.\u003c/p\u003e\n\u003cp\u003eOn the command line, a backend can be specified via \u003ccode\u003e--binarysource=\u0026lt;config\u0026gt;\u003c/code\u003e. Multiple backends can be specified by passing the option multiple times and the order of evaluation is determined by the order on the command line. Writes will be performed on all upload backends, but only for packages that were built as part of this build (the tool will not repackage/reupload binaries downloaded from other sources).\u003c/p\u003e\n\u003cp\u003eThe environment variable \u003ccode\u003eVCPKG_BINARY_SOURCES\u003c/code\u003e can be set to a semicolon-delimited list of \u003ccode\u003e\u0026lt;config\u0026gt;\u003c/code\u003e. Empty \u003ccode\u003e\u0026lt;config\u0026gt;\u003c/code\u003e strings are valid and ignored, to support appending like \u003ccode\u003eset VCPKG_BINARY_SOURCES=%VCPKG_BINARY_SOURCES%;foo\u003c/code\u003e or \u003ccode\u003eexport VCPKG_BINARY_SOURCES=\"$VCPKG_BINARY_SOURCES;foo\"\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e\u0026lt;config\u0026gt;\u003c/code\u003e can be any of:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003eclear\u003c/code\u003e - ignore all lower priority sources (lowest priority is default, then env, then command line)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003edefault[,\u0026lt;readwrite\u0026gt;]\u003c/code\u003e - Reintroduce the default ~/.vcpkg/packages (as read-only or with uploading)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003efiles,\u0026lt;path\u0026gt;[,\u0026lt;readwrite\u0026gt;]\u003c/code\u003e - Add a file-based archive at \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003enuget,\u0026lt;url\u0026gt;[,\u0026lt;readwrite\u0026gt;]\u003c/code\u003e - Add a nuget-based source at \u003ccode\u003e\u0026lt;url\u0026gt;\u003c/code\u003e. This url has a similar semantic as \u003ccode\u003enuget.exe restore -source \u0026lt;url\u0026gt;\u003c/code\u003e for reads and \u003ccode\u003enuget.exe push -source \u0026lt;url\u0026gt;\u003c/code\u003e for writes; notably it can also be a local path.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003enugetconfig,\u0026lt;path\u0026gt;[,\u0026lt;readwrite\u0026gt;]\u003c/code\u003e - Add a nuget-based source using the NuGet.config file at \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e. This enables users to fully control NuGet\u0027s execution in combination with the documented NuGet environment variables. This has similar semantics to \u003ccode\u003enuget.exe push -ConfigFile \u0026lt;path\u0026gt;\u003c/code\u003e and \u003ccode\u003enuget.exe restore -ConfigFile \u0026lt;path\u0026gt;\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003einteractive\u003c/code\u003e - Enables interactive mode (such as manual credential entry) for all other configured backends.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003e\u0026lt;readwrite\u0026gt;\u003c/code\u003e can be any of \u003ccode\u003eread\u003c/code\u003e, \u003ccode\u003ewrite\u003c/code\u003e, or \u003ccode\u003ereadwrite\u003c/code\u003e to control whether packages will be consumed or published.\u003c/p\u003e\n\u003cp\u003eBacktick (`) can be used as an escape character within config strings, with double backtick (``) inserting a single backtick. All paths must be absolute.\u003c/p\u003e\n\u003cp\u003eFor all backends, noninteractive operation will be the default and the vcpkg tool will take a \u003ccode\u003e--interactive\u003c/code\u003e parameter to enable prompting for user credentials (if needed by the backend).\u003c/p\u003e\n\u003cp\u003eTo enable the 4-step flow, \u003ccode\u003evcpkg install\u003c/code\u003e will take a command \u003ccode\u003e--write-nuget-packages-config=\u0026lt;path\u0026gt;\u003c/code\u003e which can be used in combination with \u003ccode\u003e--dry-run\u003c/code\u003e. This path can be relative and will resolve with respect to the current working directory.\u003c/p\u003e\n\u003ch4 id=\"example-4-step-flow\"\u003eExample 4-step flow\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003ePS\u0026gt; vcpkg install --dry-run pkg1 pkg2 pkg3 --write-nuget-packages-config=packages.config \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAn unspecified process, such as \u003ccode\u003enuget.exe restore packages.config -packagedirectory $packages\u003c/code\u003e or the \u003ca href=\"https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/package/nuget?view=azure-devops\"\u003eADO task\u003c/a\u003e, restores the packages to \u003ccode\u003e$packages\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePS\u0026gt; vcpkg install pkg1 pkg2 pkg3 --binarysource=clear --binarysource=nuget,$outpkgs,upload --binarysource=nuget,$packages\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnother unspecified process such as \u003ccode\u003enuget.exe sign $outpkgs/*.nupkg\u003c/code\u003e and \u003ccode\u003enuget.exe push $outpkgs/*.nupkg\u003c/code\u003e or the ADO task uploads the packages for use in future CI runs.\u003c/p\u003e",
        "Nav":  "#specifications"
    },
    {
        "Path":  "/en/docs/specifications/export-command.html",
        "Name":  "Export Command",
        "Source":  "\u003ch1 id=\"binary-export-apr-28-2017\"\u003eBinary Export (Apr 28, 2017)\u003c/h1\u003e\n\u003ch2 id=\"1-motivation\"\u003e1. Motivation\u003c/h2\u003e\n\u003ch3 id=\"a-build-once-and-share\"\u003eA. Build once and share\u003c/h3\u003e\n\u003cp\u003eCustomers want to be able to build their set of required libraries once, and then distribute the resulting binaries to all members of the \"group\". This has been brought up in\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEnterprise environments, in which there are dedicated teams to acquire libraries and then share them with other teams to consume them\u003c/li\u003e\n\u003cli\u003eAcademic environments, in which the professor/teacher wants to build the required libraries and then provide them to all the students\u003c/li\u003e\n\u003cli\u003eCI Systems, in which developers want to quickly distribute their exact set of dependencies to a cloud-based farm of build machines\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBuilding once and sharing ensures that everyone gets exactly the same binaries, isolates the building effort to a small number of people and minimizes friction to obtain them. Therefore, there is value in enabling users to easily export ready-to-share binaries from \u003ccode\u003evcpkg\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"b-very-large-libraries\"\u003eB. Very large libraries\u003c/h3\u003e\n\u003cp\u003eLibraries like \u003ca href=\"https://www.qt.io/\"\u003eQt\u003c/a\u003e can take a very long time to build (5+ hours). Therefore, having the ability to build them and then distribute the binaries can save a lot of time.\u003c/p\u003e\n\u003ch3 id=\"c-flexibility-and-uses-without-vcpkg\"\u003eC. Flexibility and uses without \u003ccode\u003evcpkg\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003evcpkg\u003c/code\u003e currently handles cases where you have a \u003ccode\u003evcpkg\u003c/code\u003e enlistment on your machine and use it for acquiring libraries and integrating into Visual Studio, CMake etc. However, users need the ability to build the libraries and then use them outside of and independently of \u003ccode\u003evcpkg\u003c/code\u003e. For example:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse \u003ccode\u003evcpkg\u003c/code\u003e for the build, then host the binaries in a website (similarly to nuget)\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003evcpkg\u003c/code\u003e for the build, then put the binaries in an installer and distribute the installer\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eConsuming the libraries outside of \u003ccode\u003evcpkg\u003c/code\u003e forfeits the ability to install new libraries or update existing ones, but this can be:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003enot a concern, like in a short term project or assignment\u003c/li\u003e\n\u003cli\u003eexplicitly desired, like in the development of a game where libraries and their versions are sealed for a particular release, never to be modified\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"d-easy-consumption-in-visual-studio-for-nuget-users\"\u003eD. Easy consumption in Visual Studio for NuGet users\u003c/h3\u003e\n\u003cp\u003eCustomers have requested C++ NuGet packages to integrate into their project. This has come from:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCustomers than have used NuGet (e.g. in C#) and find it very convenient\u003c/li\u003e\n\u003cli\u003eCustomers who are working on a C# project that has a few dependencies on C++ and just want those dependencies to be satisfied in the most automatic way possible\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eProviding a way to create NuGet packages provides great value to those customers. In an enterprise environment which focuses on C#, the dedicated acquisition team can create the NuGet packages with \u003ccode\u003evcpkg\u003c/code\u003e and provide them to the other developers. For the \"end-developer\", this makes the consumption of C++ libraries the same as C# ones.\u003c/p\u003e\n\u003ch2 id=\"2-other-design-concerns\"\u003e2. Other design concerns\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003evcpkg\u003c/code\u003e root may have a variety of packages built and many of them might be unrelated to the current task. Providing an easy way to export a subset of them will enhance user experience.\u003c/li\u003e\n\u003cli\u003eSince binary compatibility is not guaranteed, it is not safe to individually export packages. Therefore, when exporting a particular package, all of the dependencies that it was built against must also be present in the export format (e.g. zip file). When a \u003ccode\u003evcpkg export\u003c/code\u003e command succeeds, there is a guarantee that all required headers/binaries are available in the target bundle.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-proposed-solution\"\u003e3. Proposed solution\u003c/h2\u003e\n\u003cp\u003eThis document proposes the \u003ccode\u003evcpkg export\u003c/code\u003e command to pack the desired binaries in a convenient format. It is not the goal of this document to discuss binary distribution for C++ in a similar way that NuGet does for C#. It proposes exporting \"library sets\" instead of individual libraries as a solution to the C++ binary incompatibility problem.\u003c/p\u003e\n\u003cp\u003eFrom a user experience perspective, the user expresses interest in exporting a particular library (e.g. \u003ccode\u003evcpkg export cpprestsdk\u003c/code\u003e). \u003ccode\u003evcpkg export\u003c/code\u003e should then make sure that the output contains \u003ccode\u003ecpprestsdk\u003c/code\u003e along with all dependencies it was actually built against.\u003c/p\u003e\n\u003ch2 id=\"4-proposed-user-experience\"\u003e4. Proposed User experience\u003c/h2\u003e\n\u003ch3 id=\"i-user-knows-what-libraries-he-needs-and-wants-to-export-them-to-an-archive-format-zip\"\u003ei. User knows what libraries he needs and wants to export them to an archive format (zip)\u003c/h3\u003e\n\u003cp\u003eDeveloper Bob needs gtest and cpprestsdk and has been manually building them and their dependencies, then using the binaries in his project via applocal deployment. Bob has been experimenting with \u003ccode\u003evcpkg\u003c/code\u003e and wants to use \u003ccode\u003evcpkg\u003c/code\u003e for the building part only.\u003c/p\u003e\n\u003cp\u003eBob tries to export the libraries:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e\u0026gt; vcpkg export gtest cpprestsdk --zip\nThe following packages are already built and will be exported:\n  * boost:x86-windows\n  * bzip2:x86-windows\n    cpprestsdk:x86-windows\n  * openssl:x86-windows\n  * websocketpp:x86-windows\n  * zlib:x86-windows\nThe following packages need to be built:\n    gtest:x86-windows\nAdditional packages (*) need to be exported to complete this operation.\nThere are packages that have not been built.\nTo build them, run:\n    vcpkg install gtest:x86-windows\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBob proceeds to install the missing libraries:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e\u0026gt; vcpkg install gtest:x86-windows\n// -- omitted build information -- //\nPackage gtest:x86-windows is installed.\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBob then returns to export the libraries:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e\u0026gt; vcpkg export gtest cpprestsdk --zip\nThe following packages are already built and will be exported:\n  * boost:x86-windows\n  * bzip2:x86-windows\n    cpprestsdk:x86-windows\n    gtest:x86-windows\n  * openssl:x86-windows\n  * websocketpp:x86-windows\n  * zlib:x86-windows\nAdditional packages (*) need to be exported to complete this operation.\nExporting package zlib:x86-windows...\nExporting package zlib:x86-windows... done\nExporting package openssl:x86-windows...\nExporting package openssl:x86-windows... done\nExporting package bzip2:x86-windows...\nExporting package bzip2:x86-windows... done\nExporting package boost:x86-windows...\nExporting package boost:x86-windows... done\nExporting package websocketpp:x86-windows...\nExporting package websocketpp:x86-windows... done\nExporting package cpprestsdk:x86-windows...\nExporting package cpprestsdk:x86-windows... done\nExporting package gtest:x86-windows...\nExporting package gtest:x86-windows... done\nCreating zip archive...\nCreating zip archive... done\nzip archive exported at: C:/vcpkg/vcpkg-export-20170428-155351.zip\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBob takes the zip file and extracts the contents next to his other dependencies. Bob can now proceed with building his own project as before.\u003c/p\u003e\n\u003ch3 id=\"ii-user-has-a-vcpkg-root-that-works-and-wants-to-share-it\"\u003eii. User has a vcpkg root that works and wants to share it\u003c/h3\u003e\n\u003cp\u003eDeveloper Alice has been using \u003ccode\u003evcpkg\u003c/code\u003e and has a Visual Studio project that consumes libraries from it (via \u003ccode\u003evcpkg integrate\u003c/code\u003e). The project is built for both 32-bit and 64-bit architectures. Alice wants to quickly share the dependencies with Bob so he can test the project.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e\u0026gt; vcpkg export gtest zlib gtest:x64-windows zlib:x64-windows --nuget\nThe following packages are already built and will be exported:\n    gtest:x86-windows\n    gtest:x64-windows\n    zlib:x86-windows\n    zlib:x64-windows\nExporting package zlib:x86-windows...\nExporting package zlib:x86-windows... done\nExporting package zlib:x64-windows...\nExporting package zlib:x64-windows... done\nExporting package gtest:x86-windows...\nExporting package gtest:x86-windows... done\nExporting package gtest:x64-windows...\nExporting package gtest:x64-windows... done\nCreating nuget package...\nCreating nuget package... done\nNuget package exported at: C:/vcpkg/scripts/buildsystems/tmp/vcpkg-export-20170428-164312.nupkg\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlice gives to Bob: a) The link to her project and b) The NuGet package \"vcpkg-export-20170428-164312.nupkg\". Bob clones the project and then installs the NuGet package. Bob is now ready to build Alice\u0027s project.\u003c/p\u003e\n\u003ch3 id=\"iii-user-has-a-vcpkg-root-that-works-and-wants-to-share-it-2\"\u003eiii. User has a vcpkg root that works and wants to share it #2\u003c/h3\u003e\n\u003cp\u003eDeveloper Alice has been using \u003ccode\u003evcpkg\u003c/code\u003e and has a CMake project that consumes libraries from it (via CMake toolchain file). Alice wants to quickly share the dependencies with Bob so he can test the project.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e\u0026gt; vcpkg export cpprestsdk zlib --zip\nThe following packages are already built and will be exported:\n  * boost:x86-windows\n  * bzip2:x86-windows\n    cpprestsdk:x86-windows\n  * openssl:x86-windows\n  * websocketpp:x86-windows\n    zlib:x86-windows\nAdditional packages (*) need to be exported to complete this operation.\nExporting package zlib:x86-windows...\nExporting package zlib:x86-windows... done\nExporting package openssl:x86-windows...\nExporting package openssl:x86-windows... done\nExporting package bzip2:x86-windows...\nExporting package bzip2:x86-windows... done\nExporting package boost:x86-windows...\nExporting package boost:x86-windows... done\nExporting package websocketpp:x86-windows...\nExporting package websocketpp:x86-windows... done\nExporting package cpprestsdk:x86-windows...\nExporting package cpprestsdk:x86-windows... done\nCreating zip archive...\nCreating zip archive... done\nzip archive exported at: C:/vcpkg/vcpkg-export-20170428-155351.zip\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlice gives to Bob: a) The links to her project and b) The zip file \"vcpkg-export-20170428-155351.zip\". Bob clones the project, extracts the zip file and uses the provided (in the zip) CMake toolchain file to make the dependencies available to CMake. Bob is now ready to build Alice\u0027s project.\u003c/p\u003e\n\u003ch2 id=\"5-technical-model\"\u003e5. Technical model\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eEach exported library, must be accompanied with all of its dependencies, even if they are not explicitly specified in the \u003ccode\u003evcpkg export\u003c/code\u003e command.\u003c/li\u003e\n\u003cli\u003eWhen exporting a library, a dependency graph will be built, similarly to install, to figure out which packages need to be exported.\u003c/li\u003e\n\u003cli\u003eIt is allowed to have packages from different triplets, so users can include 32/64-bit and dynamic/static binaries in the same export.\u003c/li\u003e\n\u003cli\u003eThe exported archives also include the files needed to integrate with MSBuild and/or CMake.\u003c/li\u003e\n\u003c/ul\u003e",
        "Nav":  "#specifications"
    },
    {
        "Path":  "/en/docs/specifications/feature-packages.html",
        "Name":  "Feature Packages",
        "Source":  "\u003ch1 id=\"proposal-features--feature-packages-feb-23-2017\"\u003eProposal: Features / Feature packages (Feb 23 2017)\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eNote: this is the proposal as it was initially accepted and does not necessarily reflect the current behavior.\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"1-motivation\"\u003e1. Motivation\u003c/h2\u003e\n\u003ch3 id=\"a-opencv--cuda\"\u003eA. OpenCV + CUDA\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"http://opencv.org/\"\u003eOpenCV\u003c/a\u003e is a computer vision library that can optionally be built with CUDA support to massively accelerate certain tasks when using computers with NVidia GPUs. For users without NVidia GPUs, building with CUDA support provides no benefit. \u003ca href=\"http://www.nvidia.com/object/cuda_home_new.html\"\u003eCUDA\u003c/a\u003e is provided only via a 1.3 GB installer (at the time of this authoring), which requires administrator access to install and modifies the global system state.\u003c/p\u003e\n\u003cp\u003eTherefore, there is significant value in enabling users to choose whether they find CUDA support valuable for their particular scenario.\u003c/p\u003e\n\u003ch3 id=\"b-opencv--opencv_contrib\"\u003eB. OpenCV + OpenCV_contrib\u003c/h3\u003e\n\u003cp\u003eThe community around \u003ca href=\"http://opencv.org/\"\u003eOpenCV\u003c/a\u003e has built up a library of extensions called \u003ca href=\"https://github.com/opencv/opencv_contrib\"\u003eOpenCV_contrib\u003c/a\u003e. However, these extensions are a source-level patch onto the main OpenCV codebase and therefore must be applied \u003cem\u003eduring\u003c/em\u003e the core OpenCV build. Further confounding the problem, it is the author\u0027s understanding that these community extensions have only been developed with \u003ca href=\"http://www.nvidia.com/object/cuda_home_new.html\"\u003eCUDA\u003c/a\u003e enabled and cannot be built without that dependency.\u003c/p\u003e\n\u003cp\u003eTherefore, if CUDA is disabled, OpenCV_contrib must also be disabled. Likewise, when a user requests OpenCV_contrib, CUDA must be enabled. It would be convenient, but not a requirement, to enable CUDA without enabling the community extensions.\u003c/p\u003e\n\u003cp\u003eFinally, these extensions add additional exports and headers which could be depended upon by other libraries. For maintainers, there must be a way to specify this requirement such that \u003ccode\u003evcpkg install mylib-depends-ocv-contrib\u003c/code\u003e will verify/build/rebuild OpenCV with the community extensions enabled.\u003c/p\u003e\n\u003ch3 id=\"c-c-rest-sdk--signalr\"\u003eC. C++ REST SDK + SignalR\u003c/h3\u003e\n\u003cp\u003eThe \u003ca href=\"https://github.com/Microsoft/cpprestsdk\"\u003eC++ REST SDK\u003c/a\u003e is a networking library that provides (among other features) HTTP and Websockets clients. To implement the HTTP client functionality on Windows Desktop, only the core Win32 platform APIs are needed (\u003ccode\u003ezlib\u003c/code\u003e is optional).\u003c/p\u003e\n\u003cp\u003eHowever, the websockets client is based on \u003ca href=\"https://www.zaphoyd.com/websocketpp/\"\u003eWebsockets++\u003c/a\u003e, which adds mandatory dependencies on \u003ccode\u003eboost\u003c/code\u003e, \u003ccode\u003eopenssl\u003c/code\u003e, and \u003ccode\u003ezlib\u003c/code\u003e. Many users of the C++ REST SDK do not use the websockets component, so to minimize their overall dependency footprint it can be disabled at build time. Ideally, these kinds of options would be easily accessible to users in Vcpkg who are concerned about the final size or licensing of their deployment.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/aspnet/SignalR-Client-Cpp\"\u003eSignalR-Client-Cpp\u003c/a\u003e depends on the websockets functionality provided by the C++ REST SDK. Therefore, the maintainers of the \u003ccode\u003esignalrclient\u003c/code\u003e port would ideally like to express this dependency such that \u003ccode\u003ecpprestsdk\u003c/code\u003e will be automatically correctly built for their needs. Note that \u003ccode\u003esignalrclient\u003c/code\u003e does not \u003cem\u003einherently\u003c/em\u003e care about \u003ccode\u003eboost\u003c/code\u003e, \u003ccode\u003ewebsocketspp\u003c/code\u003e or \u003ccode\u003eopenssl\u003c/code\u003e -- it depends only on the public websocket client APIs provided by \u003ccode\u003ecpprestsdk\u003c/code\u003e. It would be much more maintainable to declare dependencies based on the public APIs rather than the dependencies themselves.\u003c/p\u003e\n\u003ch2 id=\"2-other-design-concerns\"\u003e2. Other design concerns\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eGeneral-purpose Open Source projects must be able to easily and succinctly describe their build dependencies inside Vcpkg. This should be no more verbose than a single \u003ccode\u003evcpkg install\u003c/code\u003e line and, when that command succeeds, there is a strong expectation that all required functionality/headers/imports are available.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe internal state of the Vcpkg enlistment must be either extremely transparent OR managed by version control (git). This enables larger projects to efficiently transfer the entire state of their customized Vcpkg system between machines (and onto build servers) by having the destination clone and then run a single \u003ccode\u003evcpkg install\u003c/code\u003e line for the subset of dependencies required. The results of this operation should be as repeatable as reasonably achievable given the current limits of the underlying toolchain.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-proposed-solution\"\u003e3. Proposed solution\u003c/h2\u003e\n\u003cp\u003eA key summary of the above motivations is that they are all scenarios surrounding APIs that are not independently buildable from each other. We have an existing solution for APIs that are independently buildable: separate packages. Therefore, we seek to extend the user-facing notion of \"packages\" to include capabilities and contracts that cannot be made into independent builds.\u003c/p\u003e\n\u003cp\u003eThis document proposes \"features\" (also called feature packages). These features are intended to model semi-independently toggleable API sets/contracts such that they can be sanely depended upon by other packages. It is not a goal to model exclusive alternatives (such as implementation choices that are not directly user-observable) through this mechanism.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIndividual libraries within \u003ccode\u003eboost\u003c/code\u003e may be reasonably represented as features.\u003c/li\u003e\n\u003cli\u003eWhether a graphics library is built on DirectX xor OpenGL (where one but not both must be chosen) is not representable as a feature.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFrom a user experience perspective (i.e. from \u003ccode\u003evcpkg install\u003c/code\u003e) feature packages act as much as possible like completely independent packages. However, internally, any change to a package\u0027s features will result in a rebuild of the associated \"parent\" package. This will invoke a package rebuild experience similar to upgrading.\u003c/p\u003e\n\u003cp\u003eWhen using \u003ccode\u003evcpkg install \u0026lt;package\u0026gt;\u003c/code\u003e, some features will be enabled by default. These default features can be avoided by referring to the packages as \u003ccode\u003e\u0026lt;package\u0026gt;[core]\u003c/code\u003e and features can be added by supplying them on the same installation line.\u003c/p\u003e\n\u003ch3 id=\"a-proposed-user-experience\"\u003eA. Proposed User experience\u003c/h3\u003e\n\u003ch4 id=\"i-user-with-no-preference-about-options\"\u003ei. User with no preference about options\u003c/h4\u003e\n\u003cp\u003eInstall of a library with default features:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e\u0026gt; vcpkg install cpprestsdk\n// -- omitted build information -- //\nPackage cpprestsdk[core]:x86-windows is installed.\nPackage cpprestsdk[compression]:x86-windows is installed.\nPackage cpprestsdk[ws-client]:x86-windows is installed.\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRemoval of that library:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e\u0026gt; vcpkg remove cpprestsdk\nThe following packages will be removed:\n    cpprestsdk:x86-windows\nRemoving package cpprestsdk:x86-windows...\nRemoving package cpprestsdk:x86-windows... done\nPurging package cpprestsdk:x86-windows...\nCleaned up D:\\src\\vcpkg\\packages\\cpprestsdk_x64-windows\nPurging package cpprestsdk:x86-windows... done\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstallation of a library with optional features:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e\u0026gt; vcpkg install opencv\n// -- omitted build information -- //\nPackage opencv[core]:x86-windows is installed.\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id=\"ii-user-desires-cuda-support-for-opencv-directly-and-is-unfamiliar-with-feature-packages\"\u003eii. User desires CUDA support for OpenCV directly, and is unfamiliar with feature packages\u003c/h4\u003e\n\u003cp\u003eDeveloper Bob knows he wants OpenCV, so he guesses what the package is called\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e\u0026gt; vcpkg install opencv\n// -- omitted build information -- //\nPackage opencv[core]:x86-windows is installed.\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBob attempts to build his application against OpenCV (assuming CUDA), which fails at runtime or compile time indicating that OpenCV wasn\u0027t built with CUDA.\u003cbr /\u003e\nBob comes back to vcpkg, not knowing about the \"feature packages\" feature. The primary inquiry tools for Vcpkg are \u003ccode\u003esearch\u003c/code\u003e and \u003ccode\u003elist\u003c/code\u003e, so he runs \u003ccode\u003evcpkg search\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e\u0026gt; vcpkg search opencv\nopencv               3.2.0            computer vision library\nopencv[cuda]                          support for NVidia CUDA\nopencv[contrib]                       community supported extensions for OpenCV\n\nIf your library is not listed, please open an issue at:\n    https://github.com/Microsoft/vcpkg/issues\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHe isn\u0027t immediately sure what the lack of a version number means, but anything in \u003ccode\u003evcpkg search\u003c/code\u003e can be applied to \u003ccode\u003evcpkg install\u003c/code\u003e, so he runs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e\u0026gt; vcpkg install opencv[cuda]\nThe following packages will be rebuilt:\n    opencv:x86-windows\n\nTo rebuild with this feature, use:\n    vcpkg remove opencv:x86-windows\n    vcpkg install opencv[core,cuda]:x86-windows\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBob follows the instructions???\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e\u0026gt; vcpkg remove opencv:x86-windows\n// -- omitted results as above -- //\n\u0026gt; vcpkg install opencv[core,cuda]:x86-windows\n// -- omitted build information -- //\nPackage opencv[core]:x86-windows is installed.\nPackage opencv[cuda]:x86-windows is installed.\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand he can now use OpenCV\u0027s CUDA support in his application.\u003c/p\u003e\n\u003ch4 id=\"iii-user-is-familiar-with-feature-packages-and-wants-to-opt-out-of-a-feature\"\u003eiii. User is familiar with feature packages, and wants to opt-out of a feature\u003c/h4\u003e\n\u003cp\u003eDeveloper Alice has used \u003ccode\u003ecpprestsdk\u003c/code\u003e, built it from source, and she knows about the option to disable websockets. She uses \u003ccode\u003esearch\u003c/code\u003e to find the complete list of features:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; vcpkg search cpprestsdk\ncpprestsdk                  2.9.0-2       C++11 JSON, REST, and OAuth library The C++ RES...\ncpprestsdk[compression]                   Gzip compression support in the HTTP client.\ncpprestsdk[ws-client]                     Websocket client support based on websocketspp.\n\nIf your library is not listed, please open an issue at:\n    https://github.com/Microsoft/vcpkg/issues\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eShe decided she only wants \u003ccode\u003ecpprestsdk[compression]\u003c/code\u003e, so she installs only that feature:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e\u0026gt; vcpkg install cpprestsdk[compression]\n// -- omitted build information -- //\nPackage cpprestsdk[core]:x86-windows is installed.\nPackage cpprestsdk[compression]:x86-windows is installed.\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eShe receives a quick recursive build that only depends on \u003ccode\u003ezlib\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eShe\u0027s now interested in some additional libraries built on top of cpprestsdk: \u003ccode\u003eazure-storage-cpp\u003c/code\u003e and \u003ccode\u003esignalrclient\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e\u0026gt; vcpkg install azure-storage-cpp\n// -- omitted build information -- //\nPackage azure-storage-cpp[core]:x86-windows is installed.\n\n\u0026gt; vcpkg install signalrclient\nPackage signalrclient:x86-windows depends on cpprestsdk[ws-client]:x86-windows.\n\nThe following packages will be rebuilt:\n  * azure-storage-cpp:x86-windows\n  * cpprestsdk:x86-windows\n\nTo rebuild the current package graph with this feature, use:\n    vcpkg remove cpprestsdk:x86-windows azure-storage-cpp:x86-windows\n    vcpkg install cpprestsdk[core,compression,ws-client]:x86-windows\n    vcpkg install azure-storage-cpp[core]:x86-windows\n    vcpkg install signalrclient[core]:x86-windows\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eShe follows the above script and can use both \u003ccode\u003eazure-storage-cpp\u003c/code\u003e and \u003ccode\u003esignalrclient\u003c/code\u003e in her code.\u003c/p\u003e\n\u003cp\u003eSome time has passed, she decided not to use \u003ccode\u003esignalrclient\u003c/code\u003e, and she\u0027s interested in shipping her application. She wants to minimize her final install size, so she\u0027d like to remove all unneeded packages like \u003ccode\u003eboost\u003c/code\u003e and \u003ccode\u003eopenssl\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e\u0026gt; vcpkg remove boost openssl\nThe following packages and features will be removed:\n  * signalrclient[core]:x86-windows\n  * cpprestsdk[ws-client]:x86-windows\n    boost[core]:x86-windows\n    openssl[core]:x86-windows\n\nThe following packages will be rebuilt:\n  * azure-storage-cpp:x86-windows\n  * cpprestsdk:x86-windows\n\nRemoving features requires rebuilding packages.\nTo rebuild the current package graph without these features, use:\n    vcpkg remove cpprestsdk:x86-windows azure-storage-cpp:x86-windows signalrclient:x86-windows openssl:x86-windows boost:x86-windows\n    vcpkg install cpprestsdk[core,compression]:x86-windows\n    vcpkg install azure-storage-cpp[core]:x86-windows\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the end, her final \u003ccode\u003evcpkg list\u003c/code\u003e outputs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e\u0026gt; vcpkg list\nzlib[core]:x86-windows              1.2.11          A compression library\nazure-storage-cpp[core]:x86-windows 2.6.0           Microsoft Azure Storage Client SDK for ...\ncpprestsdk[core]:x86-windows        2.9.0-2         C++11 JSON, REST, and OAuth library\ncpprestsdk[compression]:x86-windows                 Gzip compression support in the HTTP client.\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"b-technical-model\"\u003eB. Technical model\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eEach package can have any number \"features\".\u003c/li\u003e\n\u003cli\u003eFeatures follow the same naming conventions as packages, but when referenced are always \"namespaced\" by the parent package.\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecpprestsdk[ws-client]\u003c/code\u003e is a completely orthogonal feature from \u003ccode\u003epoco[ws-client]\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eFeatures are valid dependencies.\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esignalrclient\u003c/code\u003e depends on \u003ccode\u003ecpprestsdk[ws-client]\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eFeatures can have dependencies (including other features).\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecpprestsdk[ws-client]\u003c/code\u003e depends on \u003ccode\u003eboost\u003c/code\u003e, \u003ccode\u003eopenssl\u003c/code\u003e, and \u003ccode\u003ewebsocketspp\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eopencv[cuda]\u003c/code\u003e depends on \u003ccode\u003ecuda\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eopencv[contrib]\u003c/code\u003e depends on \u003ccode\u003eopencv[cuda]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eboost[python]\u003c/code\u003e depends on \u003ccode\u003elibpython\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eEvery package has an implicit feature called \u003ccode\u003ecore\u003c/code\u003e, which covers the core library with a minimum set of features. All features implicitly depend on the \u003ccode\u003ecore\u003c/code\u003e feature of their parent package\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eazure-storage-cpp\u003c/code\u003e depends on \u003ccode\u003ecpprestsdk[core]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecpprestsdk[ws-client]\u003c/code\u003e implicitly depends on \u003ccode\u003ecpprestsdk[core]\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eEach package declares a list of default features that are enabled when the package is referred to by its raw name, and \u003ccode\u003ecore\u003c/code\u003e is always a default feature.\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecpprestsdk\u003c/code\u003e declares \u003ccode\u003ews-client\u003c/code\u003e and \u003ccode\u003ecompression\u003c/code\u003e to be default features. Any unqualified reference \u003ccode\u003ecpprestsdk\u003c/code\u003e implicitly means \u003ccode\u003ecpprestsdk[core]\u003c/code\u003e \u003cem\u003eand\u003c/em\u003e \u003ccode\u003ecpprestsdk[ws-client]\u003c/code\u003e \u003cem\u003eand\u003c/em\u003e \u003ccode\u003ecpprestsdk[compression]\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eopencv\u003c/code\u003e does not declare \u003ccode\u003ecuda\u003c/code\u003e nor \u003ccode\u003econtrib\u003c/code\u003e to be default features.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAs a conclusion of the above, it is expected that all packages will be buildable with all features disabled (just the \u003ccode\u003ecore\u003c/code\u003e feature) and with all features enabled.\u003c/p\u003e\n\u003ch3 id=\"c-proposed-control-file-syntax\"\u003eC. Proposed Control File Syntax\u003c/h3\u003e\n\u003ch4 id=\"opencv-and-cuda\"\u003eOpenCV and CUDA\u003c/h4\u003e\n\u003cp\u003eTo add the feature CUDA to OpenCV, we will adopt the following syntax in the CONTROL file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e# opencv/CONTROL\nSource: opencv\nVersion: 3.2.0-1\nBuild-Depends: zlib, libpng, libjpeg-turbo, tiff\nDescription: computer vision library\nDefault-Features:\n\nFeature: cuda\nBuild-Depends: cuda\nDescription: parallel computing platform\n\nFeature: contrib\nBuild-Depends: opencv[cuda]\nDescription: library of OpenCV Extensions\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id=\"signalrclient\"\u003eSignalrclient\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e# signalrclient/CONTROL\nSource: signalrclient\nVersion: 1.0.0-beta1\nBuild-Depends: cpprestsdk[ws-client]\nDescription: C++ client for SignalR.\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e# cpprestsdk/CONTROL\nSource: cpprestsdk\nVersion: 2.9.0-2\nBuild-Depends: \nDescription: C++11 JSON, REST, and OAuth library ...\nDefault-Features: compression, ws-client\n\nFeature: compression\nBuild-Depends: zlib (windows)\nDescription: Gzip compression support in the HTTP client.\n\nFeature: ws-client\nBuild-Depends: boost (windows), openssl (windows), websocketpp (windows)\nDescription: Websocket client support based on websocketspp\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"d-additional-control-file-technical-details\"\u003eD. Additional Control File Technical Details\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eIf any feature paragraphs exist, the field \u003ccode\u003eDefault-Features\u003c/code\u003e must be present.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"4-related-work\"\u003e4. Related Work\u003c/h2\u003e\n\u003ch3 id=\"cargos-features-from-rust-httpdoccratesiomanifesthtmlthe-features-section\"\u003eCargo\u0027s Features (from Rust): \u003ca href=\"http://doc.crates.io/manifest.html#the-features-section\"\u003ehttp://doc.crates.io/manifest.html#the-features-section\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThe proposed feature packages are exceedingly similar to Cargo\u0027s Features, with the following changes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWe avoid any collision problems because features are always namespaced by the owning package\u003c/li\u003e\n\u003cli\u003eWe do not have a concept of \"feature groups\", instead we allow dependencies from one feature to another within the same package (Note: This may be how \"feature groups\" are implemented internally to Cargo -- it was not clear from the documentation).\u003c/li\u003e\n\u003cli\u003eBecause of the nature of C and C++, it is extremely commonplace that large software packages can have features disabled to remove their dependencies upon other libraries. Changing this configuration requires a rebuild of the package and potentially rippling ABI changes to any downstream dependencies. Therefore, we expect significantly more use of this feature to manage optional API contracts instead of the intended use in Cargo (curation).\u003c/li\u003e\n\u003cli\u003eWe do not intend feature packages to be used to express the curation relationship, beyond the notion of a \"default\" set within a package.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"gentoos-use-flags-httpswikigentooorgwikihandbookx86workinguse\"\u003eGentoo\u0027s USE flags: \u003ca href=\"https://wiki.gentoo.org/wiki/Handbook:X86/Working/USE\"\u003ehttps://wiki.gentoo.org/wiki/Handbook:X86/Working/USE\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eGentoo\u0027s USE flags can be shortly summarized as a global set of keywords that is used to make cross-cutting changes to the entire package graph\u0027s build configuration. This system standardizes many common settings such that they can be simultaneously toggled for the entire graph.\u003c/p\u003e\n\u003cp\u003eThe most common example of this would be using KDE vs Gnome. A user who knows that, given the choice, they would prefer the KDE/Qt interface can manage the massive space of package configuration efficiently without learning the particular term that each package has decided to call \"build using Qt instead of GTK\".\u003c/p\u003e\n\u003cp\u003eUSE flags can be customized hierarchically when needed, including at the per-package level. They can be depended upon by other packages, both positively and negatively. USE flags themselves can be used in any boolean expression to determine the complete set of package dependencies, including removing dependencies when flags are enabled.\u003c/p\u003e\n\u003cp\u003eProblems with USE flags:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThey require coordination from package maintainers to achieve the goal of \"portable\" flags. This increases the burden of adding a package -- to author a good package, I need to be aware of every uncommon USE flag and evaluate how those could map onto my local configuration space.\u003c/li\u003e\n\u003cli\u003eBased on research online, it seems extremely common that users need to tweak flags at a per-package level. This calls into question how valuable the cross-cutting power above is.\u003c/li\u003e\n\u003cli\u003eThe vast majority of common USE flags are essentially a list of all the common packages and focus on giving the user a view of dependencies (which a package manager is designed to abstract when possible) instead of APIs (which is what users code against).\u003c/li\u003e\n\u003cli\u003eDependency analysis with USE flags becomes a SAT problem with an enormous state space -- P*F bits -- which compounds with any versioning relations. This may work acceptably in practice via heuristics, but it implies that a) there is a looming performance wall which could suddenly create a poor user experience and b) the heuristics may incorrectly model the user\u0027s needs, causing a disconnect in desire vs practice, which again leads to a poor user experience.\u003c/li\u003e\n\u003c/ul\u003e",
        "Nav":  "#specifications"
    },
    {
        "Path":  "/en/docs/specifications/manifests.html",
        "Name":  "manifests",
        "Source":  "\u003ch1 id=\"manifests----vcpkgjson\"\u003eManifests -- \u003ccode\u003evcpkg.json\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003eFor many other language package managers, there exists a way of writing one\u0027s dependencies in a declarative\u003cbr /\u003e\nmanifest format; we want something similar for vcpkg. What follows is the specification of that feature;\u003cbr /\u003e\nthis should mean that vcpkg becomes far more user and enterprise-friendly, and is additionally an important\u003cbr /\u003e\nfirst step for versioning and package federation. Our primary concern, beyond implementability, is ease-of-use;\u003cbr /\u003e\nit is important that using this feature is all of:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEasy for existing users\u003c/li\u003e\n\u003cli\u003eEasy for new users to set up\u003c/li\u003e\n\u003cli\u003eEasy to extend later for new features like versioning and federation\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eDeclarative\u003c/em\u003e, not \u003cem\u003eImperative\u003c/em\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"reasoning\"\u003eReasoning\u003c/h2\u003e\n\u003ch3 id=\"why-json\"\u003eWhy JSON?\u003c/h3\u003e\n\u003cp\u003eWe choose JSON for five main reasons:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEverybody knows JSON, and if one doesn\u0027t, it\u0027s really easy to learn\u003c/li\u003e\n\u003cli\u003eEvery tool supports JSON in the standard library, or in a commonly used support library\u003cul\u003e\n\u003cli\u003eThis means writing tooling should be trivial in any language one is comfortable with\u003c/li\u003e\n\u003cli\u003eMost configuration formats don\u0027t have a COBOL implementation ????\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eSpecified in an international standard\u003cul\u003e\n\u003cli\u003eThere is \u003cem\u003eone\u003c/em\u003e right way to parse JSON\u003c/li\u003e\n\u003cli\u003eThere are no ambiguities of what the parse tree \u003cem\u003eshould\u003c/em\u003e be\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eSimple and secure\u003cul\u003e\n\u003cli\u003eUnlike YAML, for example, there\u0027s no weird ACE issues\u003c/li\u003e\n\u003cli\u003eEasy to write a parser -- important since we can\u0027t depend on external libraries\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eSchemas are almost a necessity\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSome have suggested allowing comments or commas in our parser; we chose to use JSON proper\u003cbr /\u003e\nrather than JSON5 or JSON with comments because JSON is the everywhere-supported international\u003cbr /\u003e\nstandard. That is not necessarily true of JSON with comments. Additionally, if one needs\u003cbr /\u003e\nto write a comment, they can do so via \u003ccode\u003e\"$reason\"\u003c/code\u003e or \u003ccode\u003e\"$comment\"\u003c/code\u003e fields.\u003c/p\u003e\n\u003ch2 id=\"specification\"\u003eSpecification\u003c/h2\u003e\n\u003cp\u003eA manifest file shall have the name \u003ccode\u003evcpkg.json\u003c/code\u003e, and shall be in the root directory of a package.\u003cbr /\u003e\nIt also replaces CONTROL files, though existing CONTROL files will still be\u003cbr /\u003e\nsupported; there will be no difference between ports and packages, except\u003cbr /\u003e\nthat packages do not need to supply portfile.cmake (eventually we would like\u003cbr /\u003e\nto remove the requirement of portfile.cmake for ports that already use\u003cbr /\u003e\nCMake).\u003c/p\u003e\n\u003cp\u003eThe specification uses definitions from the \u003ca href=\"#definitions\"\u003eDefinitions\u003c/a\u003e section in order\u003cbr /\u003e\nto specify the shape of a value. Note that any object may contain any directives, written as\u003cbr /\u003e\na field key that starts with a \u003ccode\u003e$\u003c/code\u003e; these directive shall be ignored by \u003ccode\u003evcpkg\u003c/code\u003e. Common\u003cbr /\u003e\ndirectives may include \u003ccode\u003e\"$schema\"\u003c/code\u003e, \u003ccode\u003e\"$comment\"\u003c/code\u003e, \u003ccode\u003e\"$reason\"\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eA manifest must be a top-level object, and must have at least:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"name\"\u003c/code\u003e: a \u003ccode\u003e\u0026lt;package-name\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eOne (and only one) of the following version fields:\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"version-string\"\u003c/code\u003e: A \u003ccode\u003estring\u003c/code\u003e. Has no semantic meaning.\u003cbr /\u003e\nEquivalent to \u003ccode\u003eCONTROL\u003c/code\u003e\u0027s \u003ccode\u003eVersion:\u003c/code\u003e field.\u003c/li\u003e\n\u003cli\u003eOther version fields will be defined by the Versions RFC\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe simplest vcpkg.json looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"mypackage\",\n  \"version-string\": \"0.1.0-dev\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAdditionally, it may contain the following properties:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"port-version\"\u003c/code\u003e: A non-negative integer. If this field doesn\u0027t exist, it\u0027s assumed to be \u003ccode\u003e0\u003c/code\u003e.\u003cul\u003e\n\u003cli\u003eNote that this is a change from existing CONTROL files, where versions were a part of the version string\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"maintainers\"\u003c/code\u003e: An array of \u003ccode\u003estring\u003c/code\u003es which contain the authors of a package\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"maintainers\": [ \"Nicole Mazzuca \u0026lt;nicole@example.com\u0026gt;\", \"???????? ?????????? \u0026lt;shalom@example.com\u0026gt;\" ]\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"description\"\u003c/code\u003e: A string or array of strings containing the description of a package\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"description\": \"mypackage is a package of mine\"\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"homepage\"\u003c/code\u003e: A url which points to the homepage of a package\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"homepage\": \"https://github.com/strega-nil/mypackage\"\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"documentation\"\u003c/code\u003e: A url which points to the documentation of a package\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"documentation\": \"https://readthedocs.io/strega-nil/mypackage\"\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"license\"\u003c/code\u003e: A \u003ccode\u003e\u0026lt;license-string\u0026gt;\u003c/code\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"license\": \"MIT\"\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"dependencies\"\u003c/code\u003e: An array of \u003ccode\u003e\u0026lt;dependency\u0026gt;\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"dev-dependencies\"\u003c/code\u003e: An array of \u003ccode\u003e\u0026lt;dependency\u0026gt;\u003c/code\u003es which are required only for developers (testing and the like)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"features\"\u003c/code\u003e: An array of \u003ccode\u003e\u0026lt;feature\u0026gt;\u003c/code\u003es that the package supports\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"default-features\"\u003c/code\u003e: An array of \u003ccode\u003e\u0026lt;identifier\u0026gt;\u003c/code\u003es that correspond to features, which will be used by default.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"supports\"\u003c/code\u003e: A \u003ccode\u003e\u0026lt;platform-expression\u0026gt;\u003c/code\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"supports\": \"windows \u0026amp; !arm\"\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAny properties which are not listed, and which do not start with a \u003ccode\u003e$\u003c/code\u003e,\u003cbr /\u003e\nwill be warned against and are reserved for future use.\u003c/p\u003e\n\u003cp\u003eThe following is an example of an existing port CONTROL file rewritten as a vcpkg.json file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSource: pango\nVersion: 1.40.11-6\nHomepage: https://ftp.gnome.org/pub/GNOME/sources/pango/\nDescription: Text and font handling library.\nBuild-Depends: glib, gettext, cairo, fontconfig, freetype, harfbuzz[glib] (!(windows\u0026amp;static)\u0026amp;!osx)\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"pango\",\n  \"version-string\": \"1.40.11\",\n  \"port-version\": 6,\n  \"homepage\": \"https://ftp.gnome.org/pub/GNOME/sources/pango/\",\n  \"description\": \"Text and font handling library.\",\n  \"dependencies\": [\n    \"glib\",\n    \"gettext\",\n    \"cairo\",\n    \"fontconfig\",\n    \"freetype\",\n    {\n      \"name\": \"harfbuzz\",\n      \"features\": [ \"glib\" ],\n      \"platform\": \"!(windows \u0026amp; static) \u0026amp; !osx\"\n    }\n  ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"behavior-of-the-tool\"\u003eBehavior of the Tool\u003c/h2\u003e\n\u003cp\u003eThere will be two \"modes\" for vcpkg from this point forward: \"classic\", and \"manifest\".\u003cbr /\u003e\nThe former will act exactly like the existing vcpkg workflow, so as to avoid breaking\u003cbr /\u003e\nanyone. The latter will be the mode only when the user either:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePasses \u003ccode\u003e--manifest-root-dir=\u0026lt;directory\u0026gt;\u003c/code\u003e (initially, \u003ccode\u003ex-manifest-root-dir\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eRuns \u003ccode\u003evcpkg\u003c/code\u003e in a directory that contains a file named \u003ccode\u003evcpkg.json\u003c/code\u003e, or in a\nchild directory of a directory containing \u003ccode\u003evcpkg.json\u003c/code\u003e.\u003cul\u003e\n\u003cli\u003eFor this, initially vcpkg will warn that the behavior will change in the\u003cbr /\u003e\nfuture, and simply run in classic mode, unless the feature flag \u003ccode\u003emanifests\u003c/code\u003e is\u003cbr /\u003e\npassed via:\u003c/li\u003e\n\u003cli\u003eThe environment variable \u003ccode\u003eVCPKG_FEATURE_FLAGS\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eThe option \u003ccode\u003e--feature-flags\u003c/code\u003e\u003cul\u003e\n\u003cli\u003e(e.g., \u003ccode\u003e--feature-flags=binarycaching,manifests\u003c/code\u003e)\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eIf someone wants to use classic mode and silence the warning, they can add the\u003cbr /\u003e\n\u003ccode\u003e-manifests\u003c/code\u003e feature flag to disable the mode.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen in \"manifest\" mode, the \u003ccode\u003einstalled\u003c/code\u003e directory will be changed to\u003cbr /\u003e\n\u003ccode\u003e\u0026lt;manifest-root\u0026gt;/vcpkg_installed\u003c/code\u003e (name up for bikeshedding).\u003cbr /\u003e\nThe following commands will change behavior:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evcpkg install\u003c/code\u003e without any port arguments will install the dependencies listed in\u003cbr /\u003e\nthe manifest file, and will remove any dependencies\u003cbr /\u003e\nwhich are no longer in the dependency tree implied by the manifest file.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003evcpkg install\u003c/code\u003e with port arguments will give an error.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe following commands will not work in manifest mode, at least initially:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evcpkg x-set-installed\u003c/code\u003e: \u003ccode\u003evcpkg install\u003c/code\u003e serves the same function\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003evcpkg remove\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003evcpkg export\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe may add these features back for manifest mode once we understand how best to\u003cbr /\u003e\nimplement them.\u003c/p\u003e\n\u003ch3 id=\"behavior-of-the-toolchain\"\u003eBehavior of the Toolchain\u003c/h3\u003e\n\u003cp\u003eMostly, the toolchain file stays the same; however, we shall add\u003cbr /\u003e\ntwo public options:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003eVCPKG_MANIFEST_MODE:BOOL=\u0026lt;we found a manifest\u0026gt;\nVCPKG_MANIFEST_INSTALL:BOOL=ON\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe first option either explicitly turns on, or off, manifest mode;\u003cbr /\u003e\notherwise, we default to looking for a manifest file in the directory\u003cbr /\u003e\ntree upwards from the source directory.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eVCPKG_MANIFEST_INSTALL\u003c/code\u003e option tells the toolchain whether to\u003cbr /\u003e\ninstall the packages or not -- if you wish to install the manifest\u003cbr /\u003e\ndependencies manually, you can set this to off, and we also turn it\u003cbr /\u003e\noff for packages installed by vcpkg.\u003c/p\u003e\n\u003cp\u003eAdditionally, if \u003ccode\u003e-manifests\u003c/code\u003e is set in the feature flags environment\u003cbr /\u003e\nvariable, we turn off manifest mode in the toolchain, and we act like\u003cbr /\u003e\nthe classic toolchain.\u003c/p\u003e\n\u003ch3 id=\"example---cmake-integration\"\u003eExample - CMake Integration\u003c/h3\u003e\n\u003cp\u003eAn example of using the new vcpkg manifests feature for a new\u003cbr /\u003e\nproject follows:\u003c/p\u003e\n\u003cp\u003eThe filesystem structure should look something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexample/\n  src/\n    main.cxx\n  CMakeLists.txt\n  vcpkg.json\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, \u003ccode\u003emain.cxx\u003c/code\u003e might look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cpp language-cpp\"\u003e#include \u0026lt;fmt/format.h\u0026gt;\n\nint main() {\n  fmt::print(\"Hello, {}!\", \"world\");\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTherefore, in \u003ccode\u003evcpkg.json\u003c/code\u003e, we\u0027ll need to depend on \u003ccode\u003efmt\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"example\",\n  \"version-string\": \"0.0.1\",\n  \"dependencies\": [\n    \"fmt\"\n  ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, let\u0027s write our \u003ccode\u003eCMakeLists.txt\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003ecmake_minimum_required(VERSION 3.14)\n\nproject(example CXX)\n\nadd_executable(example src/main.cxx)\n\nfind_package(fmt REQUIRED)\n\ntarget_link_libraries(example\n  PRIVATE\n    fmt::fmt)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd finally, to configure and build:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"sh language-sh\"\u003e$ cd example\n$ cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake\n... configuring and installing...\n$ cmake --build build\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand we\u0027re done! \u003ccode\u003efmt\u003c/code\u003e will get installed into\u003cbr /\u003e\n\u003ccode\u003eexample/build/vcpkg_installed\u003c/code\u003e, and we can run our executable with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"sh language-sh\"\u003e$ build/example\nHello, world!\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"definitions\"\u003eDefinitions\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;identifier\u0026gt;\u003c/code\u003e: A \u003ccode\u003estring\u003c/code\u003e which:\u003cul\u003e\n\u003cli\u003eIs entirely ASCII\u003c/li\u003e\n\u003cli\u003eContains only lowercase alphabetic characters, digits, and hyphen-minus\u003c/li\u003e\n\u003cli\u003eDoes not have multiple consecutive hyphens\u003c/li\u003e\n\u003cli\u003eDoes not begin nor end with a hyphen\u003c/li\u003e\n\u003cli\u003eIs not a Windows filesystem reserved name\u003c/li\u003e\n\u003cli\u003eIs not a vcpkg reserved name: \"default\" or \"core\".\u003c/li\u003e\n\u003cli\u003eIn other words, it must follow the regex \u003ccode\u003e[a-z0-9]+(-[a-z0-9]+)*\u003c/code\u003e, and must not be any of:\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e{ prn, aux, nul, con, lpt[1-9], com[1-9], core, default }\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;package-name\u0026gt;\u003c/code\u003e: A \u003ccode\u003estring\u003c/code\u003e consisting of a non-zero number of \u003ccode\u003e\u0026lt;identifier\u0026gt;\u003c/code\u003es, separated by \u003ccode\u003e.\u003c/code\u003e.\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ea.b.c\u003c/code\u003e is valid\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ea\u003c/code\u003e is valid\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ea/b\u003c/code\u003e is not valid\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBoost.Beast\u003c/code\u003e is not valid, but \u003ccode\u003eboost.beast\u003c/code\u003e is\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;dependency\u0026gt;\u003c/code\u003e: Either a \u003ccode\u003e\u0026lt;package-name\u0026gt;\u003c/code\u003e, or an object:\u003cul\u003e\n\u003cli\u003eA dependency always contains the following:\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"name\"\u003c/code\u003e: A \u003ccode\u003e\u0026lt;package-name\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eOptionally, \u003ccode\u003e\"features\"\u003c/code\u003e: an array of \u003ccode\u003e\u0026lt;identifier\u0026gt;\u003c/code\u003es corresponding to features in the package.\u003c/li\u003e\n\u003cli\u003eOptionally, \u003ccode\u003e\"default-features\"\u003c/code\u003e: a \u003ccode\u003eboolean\u003c/code\u003e. If this is false, then don\u0027t use the default features of the package; equivalent to core in existing CONTROL files. If this is true, do the default thing of including the default features.\u003c/li\u003e\n\u003cli\u003eOptionally, \u003ccode\u003e\"platform\"\u003c/code\u003e: a \u003ccode\u003e\u0026lt;platform-expression\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;dependency.port\u0026gt;\u003c/code\u003e: No extra fields are required.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;license-string\u0026gt;\u003c/code\u003e: An SPDX license expression at version 3.9.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;platform-expression\u0026gt;\u003c/code\u003e: A specification of a set of platforms; used in platform-specific dependencies and supports fields. A string that is parsed as follows:\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;platform-expression\u0026gt;\u003c/code\u003e:\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;platform-expression.not\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;platform-expression.and\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;platform-expression.or\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;platform-expression.simple\u0026gt;\u003c/code\u003e:\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e( \u0026lt;platform-expression\u0026gt; )\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;platform-expression.identifier\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;platform-expression.identifier\u0026gt;\u003c/code\u003e:\u003c/li\u003e\n\u003cli\u003eregex: \u003ccode\u003e/^[a-z0-9]+$/\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;platform-expression.not\u0026gt;\u003c/code\u003e:\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;platform-expression.simple\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e! \u0026lt;platform-expression.simple\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;platform-expression.and\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;platform-expression.not\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;platform-expression.and\u0026gt; \u0026amp; \u0026lt;platform-expression.not\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;platform-expression.or\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;platform-expression.not\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;platform-expression.or\u0026gt; | \u0026lt;platform-expression.not\u0026gt;\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;feature\u0026gt;\u003c/code\u003e: An object containing the following:\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"name\"\u003c/code\u003e: An \u003ccode\u003e\u0026lt;identifier\u0026gt;\u003c/code\u003e, the name of the feature\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"description\"\u003c/code\u003e: A \u003ccode\u003estring\u003c/code\u003e or array of \u003ccode\u003estring\u003c/code\u003es, the description of the feature\u003c/li\u003e\n\u003cli\u003eOptionally, \u003ccode\u003e\"dependencies\"\u003c/code\u003e: An array of \u003ccode\u003e\u0026lt;dependency\u0026gt;\u003c/code\u003es, the dependencies used by this feature\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e",
        "Nav":  "#specifications"
    },
    {
        "Path":  "/en/docs/specifications/ports-overlay.html",
        "Name":  "Ports Overlay",
        "Source":  "\u003ch1 id=\"ports-overlay-jun-19-2019\"\u003ePorts Overlay (Jun 19, 2019)\u003c/h1\u003e\n\u003ch2 id=\"1-motivation\"\u003e1. Motivation\u003c/h2\u003e\n\u003ch3 id=\"a-allow-users-to-override-ports-with-alternate-versions\"\u003eA. Allow users to override ports with alternate versions\u003c/h3\u003e\n\u003cp\u003eIt\u0027s a common scenario for \u003ccode\u003evcpkg\u003c/code\u003e users to keep specific versions of libraries to use in their own projects. The current recommendation for users is to fork \u003ccode\u003evcpkg\u003c/code\u003e\u0027s repository and create tags for commits containing the specific versions of the ports they want to use.\u003c/p\u003e\n\u003cp\u003eThis proposal adds an alternative to solve this problem. By allowing \u003ccode\u003evcpkg\u003c/code\u003e users to specify additional locations in their file system containing ports for:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eolder or newer versions of libraries,\u003c/li\u003e\n\u003cli\u003emodified libraries, or\u003c/li\u003e\n\u003cli\u003elibraries not available in \u003ccode\u003evcpkg\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese locations will be searched when resolving port names during package installation, and override ports in \u003ccode\u003e\u0026lt;vcpkg-root\u0026gt;/ports\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"b-allow-users-to-keep-unmodified-upstream-ports\"\u003eB. Allow users to keep unmodified upstream ports\u003c/h3\u003e\n\u003cp\u003eUsers will be able to keep unmodified versions of the ports shipped with \u003ccode\u003evcpkg\u003c/code\u003e and update them via \u003ccode\u003evcpkg update\u003c/code\u003e and \u003ccode\u003evcpkg upgrade\u003c/code\u003e without having to solve merge conflicts.\u003c/p\u003e\n\u003ch2 id=\"2-other-design-concerns\"\u003e2. Other design concerns\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAllow a set of \u003ccode\u003evcpkg\u003c/code\u003e commands to optionally accept additional paths to be used when searching for ports.\u003c/li\u003e\n\u003cli\u003eAdditional paths must take precedence when resolving names of ports to install.\u003c/li\u003e\n\u003cli\u003eAllow users to specify multiple additional paths.\u003c/li\u003e\n\u003cli\u003eProvide a simple disambiguation mechanism to resolve ambiguous port names.\u003c/li\u003e\n\u003cli\u003eAfter resolving a port name, the installation process has to work the same as for ports shipped by \u003ccode\u003evcpkg\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThis \u003cstrong\u003eDOES NOT ENABLE MULTIPLE VERSIONS\u003c/strong\u003e of a same library to be \u003cstrong\u003eINSTALLED SIDE-BY-SIDE\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-proposed-solution\"\u003e3. Proposed solution\u003c/h2\u003e\n\u003cp\u003eThis document proposes allowing additional locations to search for ports during package installation that will override and complement the set of ports provided by \u003ccode\u003evcpkg\u003c/code\u003e (ports under the \u003ccode\u003e\u0026lt;vcpkg_root\u0026gt;/ports\u003c/code\u003e directory).`\u003c/p\u003e\n\u003cp\u003eA new option \u003ccode\u003e--overlay-ports\u003c/code\u003e will be added to the \u003ccode\u003evcpkg install\u003c/code\u003e, \u003ccode\u003evcpkg update\u003c/code\u003e, \u003ccode\u003evcpkg upgrade\u003c/code\u003e, \u003ccode\u003evcpkg export\u003c/code\u003e, and \u003ccode\u003evcpkg depend-info\u003c/code\u003e commands to specify additional paths containing ports. \u003c/p\u003e\n\u003cp\u003eFrom a user experience perspective, a user expresses interest in adding additional lookup locations by passing the \u003ccode\u003e--overlay-ports\u003c/code\u003e option followed by a path to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003ean individual port (directory containing a \u003ccode\u003eCONTROL\u003c/code\u003e file),\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evcpkg install sqlite3 --overlay-ports=\"C:\\custom-ports\\sqlite3\"\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ea directory containing ports,\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evcpkg install sqlite3 --overlay-ports=\\\\share\\org\\custom-ports\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ea file listing paths to the former two.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eNOTE: Reading paths from a text file is not available in the current implementation, some revisions to this part of the specification are being made and will be implemented in a future date.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003evcpkg install sqlite3 --overlay-ports=..\\port-repos.txt\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eport-repos.txt\u003c/em\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e.\\experimental-ports\\sqlite3\nC:\\custom-ports\n\\\\share\\team\\custom-ports\n\\\\share\\org\\custom-ports\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eRelative paths inside this file are resolved relatively to the file\u0027s location. In this case a \u003ccode\u003eexperimental-ports\u003c/code\u003e directory should exist at the same level as the \u003ccode\u003eport-repos.txt\u003c/code\u003e file.\u003c/em\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003eNOTE: It is not the goal of this document to discuss library versioning or project dependency management solutions, which require the ability to install multiple versions of a same library side-by-side.\u003c/em\u003e \u003c/p\u003e\n\u003ch3 id=\"multiple-additional-paths\"\u003eMultiple additional paths\u003c/h3\u003e\n\u003cp\u003eUsers can provide multiple additional paths by repeating the \u003ccode\u003e--overlay-ports\u003c/code\u003e option.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evcpkg install sqlite3 \n    --overlay-ports=\"..\\experimental-ports\\sqlite3\" \n    --overlay-ports=\"C:\\custom-ports\" \n    --overlay-ports=\"\\\\share\\team\\custom-ports\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"overlaying-ports\"\u003eOverlaying ports\u003c/h3\u003e\n\u003cp\u003ePort name resolution follows the order in which additional paths are specified, with the first match being selected for installation, and falling back to \u003ccode\u003e\u0026lt;vcpkg-root\u0026gt;/ports\u003c/code\u003e if the port is not found in any of the additional paths.\u003c/p\u003e\n\u003cp\u003eNo effort is made to compare version numbers inside the \u003ccode\u003eCONTROL\u003c/code\u003e files, or to determine which port contains newer or older files.\u003c/p\u003e\n\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cp\u003eGiven the following directory structure:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  team-ports/\n  |-- sqlite3/\n  |---- CONTROL\n  |-- rapidjson/\n  |---- CONTROL\n  |-- curl/\n  |---- CONTROL\n\n  my-ports/\n  |-- sqlite3/\n  |---- CONTROL\n  |-- rapidjson/\n  |---- CONTROL\n\n  vcpkg\n  |-- ports/\n  |---- \u0026lt;upstream ports\u0026gt;\n  |-- vcpkg.exe\n  |-- preferred-ports.txt\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ch4 id=\"example-1\"\u003eExample #1:\u003c/h4\u003e\n\u003cp\u003eRunning:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e  vcpkg/vcpkg.exe install sqlite3 --overlay-ports=my-ports --overlay-ports=team-ports\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eResults in \u003ccode\u003emy-ports/sqlite3\u003c/code\u003e getting installed as that location appears first in the command line arguments.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ch4 id=\"example-2\"\u003eExample #2:\u003c/h4\u003e\n\u003cp\u003eA specific version of a port can be given priority by adding its path first in the list of arguments:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e  vcpkg/vcpkg.exe install sqlite3 rapidjson curl \n      --overlay-ports=my-ports/rapidjson \n      --overlay-ports=vcpkg/ports/curl\n      --overlay-ports=team-ports\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstalls:\u003cbr /\u003e\n    * \u003ccode\u003esqlite3\u003c/code\u003e from \u003ccode\u003eteam-ports/sqlite3\u003c/code\u003e\u003cbr /\u003e\n    * \u003ccode\u003erapidjson\u003c/code\u003e from \u003ccode\u003emy-ports/rapidjson\u003c/code\u003e\u003cbr /\u003e\n    * \u003ccode\u003ecurl\u003c/code\u003e from \u003ccode\u003evcpkg/ports/curl\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e#### Example #3:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eNOTE: Reading paths from a text file is not available in the current implementation, some revisions to this part of the specification are being made and will be implemented in a future date.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eGiven the content of \u003ccode\u003epreferred-ports.txt\u003c/code\u003e as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  ./ports/curl\n  /my-ports/rapidjson\n  /team-ports\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA location can be appended or prepended to those included in \u003ccode\u003epreferred-ports.txt\u003c/code\u003e via the command line, like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  vcpkg/vcpkg.exe install sqlite3 curl --overlay-ports=my-ports --overlay-ports=vcpkg/preferred-ports.txt\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhich results in \u003ccode\u003emy-ports/sqlite3\u003c/code\u003e and \u003ccode\u003evcpkg/ports/curl\u003c/code\u003e getting installed.\u003c/p\u003e\n\u003ch2 id=\"4-proposed-user-experience\"\u003e4. Proposed User experience\u003c/h2\u003e\n\u003ch3 id=\"i-user-wants-to-preserve-an-older-version-of-a-port\"\u003ei. User wants to preserve an older version of a port\u003c/h3\u003e\n\u003cp\u003eDeveloper Alice and her team use \u003ccode\u003evcpkg\u003c/code\u003e to acquire \u003cstrong\u003eOpenCV\u003c/strong\u003e and some other packages. She has even contributed many patches to add features to the \u003cstrong\u003eOpenCV 3\u003c/strong\u003e port in \u003ccode\u003evcpkg\u003c/code\u003e. But, one day, she notices that a PR to update \u003cstrong\u003eOpenCV\u003c/strong\u003e to the next major version has been merged. \u003c/p\u003e\n\u003cp\u003eAlice wants to update some packages available in \u003ccode\u003evcpkg\u003c/code\u003e. Unfortunately, updating her project to use the latest \u003cstrong\u003eOpenCV\u003c/strong\u003e is not immediately possible. \u003c/p\u003e\n\u003cp\u003eAlice creates a private GitHub repository and checks in the set of ports that she wants to preserve. Then provides her teammates with the link to clone her private ports repository.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emkdir vcpkg-custom-ports\ncd vcpkg-custom-ports\ngit init \ncp -r %VCPKG_ROOT%/ports/opencv .\ngit add .\ngit commit -m \"[opencv] Add OpenCV 3 port\"\ngit remote add origin https://github.com/\u0026lt;Alice\u0027s GitHub username\u0026gt;/vcpkg-custom-ports.git\ngit push -u origin master\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow her team is able to use: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit clone https://github.com/\u0026lt;Alice\u0027s GitHub username\u0026gt;/vcpkg-custom-ports.git\nvcpkg update --overlay-ports=./vcpkg-custom-ports\nvcpkg upgrade --no-dry-run --overlay-ports=./vcpkg-custom-ports\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eto upgrade their packages and preserve the old version of \u003cstrong\u003eOpenCV\u003c/strong\u003e they require.\u003c/p\u003e",
        "Nav":  "#specifications"
    },
    {
        "Path":  "/en/docs/specifications/prefab.html",
        "Name":  "prefab",
        "Source":  "\u003ch1 id=\"vcpkg-export-android-prefab-archives-aar-files\"\u003eVcpkg: export Android prefab Archives (AAR files)\u003c/h1\u003e\n\u003cp\u003eVcpkg can export android archives (\u003ca href=\"https://developer.android.com/studio/projects/android-library\"\u003eAAR files\u003c/a\u003e). Once an archive is created, it can imported in Android Studio as a native dependent.  The archive is automatically consumed using \u003ca href=\"https://github.com/google/prefab\"\u003eandroid studio\u0027s prefab tool\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003eFor more information on Prefab, refer to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ca href=\"https://google.github.io/prefab\"\u003eofficial prefab documentation\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003ea blog post from Android developers blog: \u003ca href=\"https://android-developers.googleblog.com/2020/02/native-dependencies-in-android-studio-40.html\"\u003eNative Dependencies in Android Studio 4.0\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003eNote for Android Studio users: prefab packages are supported on Android Studio 4+\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003endk \u0026lt;required\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSet environment variable \u003ccode\u003eANDROID_NDK_HOME\u003c/code\u003e to your android ndk installation. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexport ANDROID_NDK_HOME=/home/your-account/Android/Sdk/ndk-bundle\u003c/code\u003e\u003c/pre\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003e7zip \u0026lt;required on windows\u0026gt;\u003c/code\u003e or \u003ccode\u003ezip \u0026lt;required on linux\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003emaven \u0026lt;optional\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAndroid triplets\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSee \u003ca href=\"../users/android.md\"\u003eandroid.md\u003c/a\u003e for instructions on how to install the triplets.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003ePlease note that in order to use \"prefab\" (see below), the four architectures are required. If any is missing the export will fail\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"example-exporting-jsoncpp\"\u003eExample exporting [jsoncpp]\u003c/h2\u003e\n\u003cp\u003eFirst \"vcpkg install\" the 4 android architectures (it is mandatory to export all 4 of them)\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e./vcpkg install jsoncpp:arm-android  jsoncpp:arm64-android  jsoncpp:x64-android  jsoncpp:x86-android\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, export the prefab:\u003c/p\u003e\n\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003e--prefab-maven\u003c/code\u003e flag is optional. Call it if you maven is installed.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003e--prefab-debug\u003c/code\u003e flag will output instructions on how to use the prefab archive via gradle.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e./vcpkg export --triplet x64-android jsoncpp --prefab --prefab-maven --prefab-debug\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou will see an ouput like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eThe following packages are already built and will be exported:\n    jsoncpp:arm64-android\n\nExporting package jsoncpp...\n[DEBUG] Found 4 triplets\n    arm64-android\n    x64-android\n    x86-android\n    arm-android\n\n...\n... Lots of output...\n...\n\n[INFO] Scanning for projects...\nDownloading from central: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom\n\n...\n... Lots of output...\n...\n\n[INFO] BUILD SUCCESS\n[INFO] Total time:  2.207 s\n[INFO] Finished at: 2020-05-10T14:42:28+02:00\n\n\n...\n... Lots of output...\n...\n\n[DEBUG] Configuration properties in Android Studio\nIn app/build.gradle\n\n    com.vcpkg.ndk.support:jsoncpp:1.9.2\n\nAnd cmake flags\n\n    externalNativeBuild {\n                cmake {\n                    arguments \u0027-DANDROID_STL=c++_shared\u0027\n                    cppFlags \"-std=c++17\"\n                }\n            }\n\nIn gradle.properties\n\n    android.enablePrefab=true\n    android.enableParallelJsonGen=false\n    android.prefabVersion=${prefab.version}\n\nSuccessfuly exported jsoncpp. Checkout .../vcpkg/prefab \u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id=\"the-output-directory-after-export\"\u003eThe output directory after export\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003eprefab\n????????? jsoncpp/\n    ????????? aar/\n    ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? AndroidManifest.xml\n    ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? META-INF/\n    ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? LICENSE\n    ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? prefab/\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ????????? modules/\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? jsoncpp/\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ????????? libs/\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? android.arm64-v8a/\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? abi.json\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? include/\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? json/\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp;     ????????? json.h\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp;     ????????? ....\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? libjsoncpp.so\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? android.armeabi-v7a/\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? abi.json\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? include/\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? json/\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp;     ????????? json.h\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp;     ????????? ....\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? libjsoncpp.so\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? android.x86/\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? abi.json\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? include/\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? json/\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp;     ????????? json.h\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp;     ????????? ....\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? libjsoncpp.so\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? android.x86_64/\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ????????? abi.json\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ????????? include/\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ????????? json/\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp;     ????????? json.h\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp; ???\u0026amp;nbsp;\u0026amp;nbsp;     ????????? ....\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ????????? libjsoncpp.so\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ???\u0026amp;nbsp;\u0026amp;nbsp;     ????????? module.json\n    ???\u0026amp;nbsp;\u0026amp;nbsp;     ????????? prefab.json\n    ????????? jsoncpp-1.9.2.aar\n    ????????? pom.xml\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"example-consuming-jsoncpp-via-vcpkg-and-prefab\"\u003eExample consuming [jsoncpp] via vcpkg and prefab\u003c/h2\u003e\n\u003cp\u003eSee the example repo here:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/atkawa7/prefab-vpkg-integration-sample\"\u003ehttps://github.com/atkawa7/prefab-vpkg-integration-sample\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#specifications"
    },
    {
        "Path":  "/en/docs/specifications/registries-2.html",
        "Name":  "Registries 2",
        "Source":  "\u003ch1 id=\"registries-take-2-including-git-registries\"\u003eRegistries: Take 2 (including Git Registries)\u003c/h1\u003e\n\u003cp\u003eOriginally, the design of registries was decided upon and written up in the \u003ca href=\"registries.md\"\u003eRegistries RFC\u003c/a\u003e.\u003cbr /\u003e\nHowever, as we\u0027ve gotten further into the design process of git registries and versioning,\u003cbr /\u003e\nand discussed the interaction of versioning with registries,\u003cbr /\u003e\nit\u0027s become clear that the existing design was lacking.\u003cbr /\u003e\nWe need to have an on-disk port database that is not tied to the ports tree.\u003c/p\u003e\n\u003cp\u003eThis RFC is a new design for registries, that includes this registry database.\u003cbr /\u003e\nIt also includes the design for git registries,\u003cbr /\u003e\nwhich are likely to be the predominant form of registries in the wild.\u003cbr /\u003e\nThey are also what we will start to treat the default registry as,\u003cbr /\u003e\nto allow for updating ports without updating the vcpkg executable\u003cbr /\u003e\n(likely necessary for binary releases).\u003c/p\u003e\n\u003ch2 id=\"design-considerations\"\u003eDesign Considerations\u003c/h2\u003e\n\u003cp\u003eAfter internal discussions of the relationship between versioning and registries,\u003cbr /\u003e\nit was clear that the existing design of registries does not play well with versioning.\u003cbr /\u003e\nIt was also clear that it was necessary to have metadata about ports in a separate place from the ports tree;\u003cbr /\u003e\nin fact, after discussion, it was clear that the ports tree should be considered an implementation detail;\u003cbr /\u003e\na backing store for build process information (e.g., \u003ccode\u003eportfile.cmake\u003c/code\u003e and the patches) and the manifest.\u003c/p\u003e\n\u003cp\u003eFrom this, it\u0027s clear that vcpkg needs to add a new set of metadata.\u003cbr /\u003e\nThe versioning implementation has decided on \u003ccode\u003eport_versions\u003c/code\u003e, and thus that\u0027s what this RFC uses.\u003c/p\u003e\n\u003cp\u003eSince we\u0027re replacing the existing ports directory with a new method of describing ports,\u003cbr /\u003e\nthis means that the ports directory is no longer anything but a data store.\u003cbr /\u003e\nThis also means that the existing rules around locations of ports is no longer required;\u003cbr /\u003e\nhowever, it will still keep getting followed for the main repository,\u003cbr /\u003e\nand it\u0027s recommended that other registries follow the same pattern to make contributing easier.\u003c/p\u003e\n\u003ch2 id=\"what-does-the-registry-database-look-like\"\u003eWhat does the registry database look like?\u003c/h2\u003e\n\u003cp\u003eWe don\u0027t wish to have the same problem as we do right now,\u003cbr /\u003e\nwhere there are nearly 1500 entries in a single directory.\u003cbr /\u003e\nWe solve this by placing each database entry into \u003ccode\u003eport_versions/\u0026lt;first character of port name\u0026gt;-/\u0026lt;port name\u0026gt;.json\u003c/code\u003e.\u003cbr /\u003e\nFor example, the database entry for 7zip is in \u003ccode\u003eport_versions/7-/7zip.json\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eEach of these database entries contains all of the versions of the port throughout history,\u003cbr /\u003e\nalong with versioning and feature metadata, so that we do not have to check out old manifests or CONTROL files\u003cbr /\u003e\nto get at that information.\u003c/p\u003e\n\u003cp\u003eEach database entry file must be a top-level array of port version objects, which contain the following entries:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA version field: \u003ccode\u003e\"version-string\"\u003c/code\u003e, \u003ccode\u003e\"version\"\u003c/code\u003e, etc. Same as in the manifest.\u003c/li\u003e\n\u003cli\u003eOptionally, \u003ccode\u003e\"port-version\"\u003c/code\u003e: Same as in the manifest.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAnd also contain a description of where to find the build files for this port; the possibilities include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"git-tree\"\u003c/code\u003e: The \u003ca href=\"https://git-scm.com/book/en/v2/Git-Internals-Git-Objects\"\u003egit object ID\u003c/a\u003e of a tree object; this is only allowed for git registries.\u003cbr /\u003e\nNote that this ID must be an ID from the repository where the registry is located.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"path\"\u003c/code\u003e: A path describing where to find the build files.\nThe first entry in this path should be \u003ccode\u003e$\u003c/code\u003e, which means \"this path starts at the root of the registry\".\nNo other kinds of paths are allowed.\u003cul\u003e\n\u003cli\u003eFor example: \u003ccode\u003e$/foo/bar\u003c/code\u003e gives you \u003ccode\u003efoo/bar\u003c/code\u003e underneath the folder containing the \u003ccode\u003eport_versions\u003c/code\u003e directory.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e/foo/bar\u003c/code\u003e and \u003ccode\u003efoo/bar\u003c/code\u003e are both disallowed.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUsing a \u003ccode\u003e\"git-tree\"\u003c/code\u003e as a backend in a non-git registry, and using a \u003ccode\u003e\"path\"\u003c/code\u003e in a git registry,\u003cbr /\u003e\nis not permitted. Future extensions may include things like remote archives or git repositories,\u003cbr /\u003e\nor may allow \u003ccode\u003e\"path\"\u003c/code\u003e in git registries.\u003c/p\u003e\n\u003cp\u003eNote that a registry entry should \u003cem\u003ealways\u003c/em\u003e be additive;\u003cbr /\u003e\ndeleting existing entries is unsupported and may result in bad behavior.\u003cbr /\u003e\nThe only modification to existing entries that is allowable is moving the backing store\u003cbr /\u003e\nfor the build files, assuming that the new build files are equivalent to the old build files.\u003cbr /\u003e\n(For example, a filesystem registry might have a new way of laying out where ports are).\u003c/p\u003e\n\u003cp\u003eAdditionally, we\u0027d like a new way of describing the set of ports that make up a \"baseline\".\u003cbr /\u003e\nThis is currently done with the reference of the vcpkg git repository -\u003cbr /\u003e\neach reference has a set of versions that are tested against each other,\u003cbr /\u003e\nand this is a major feature of vcpkg.\u003cbr /\u003e\nWe wish to have the same feature in the new versioning world,\u003cbr /\u003e\nand so we\u0027ll have a set of baseline versions in the registry database.\u003c/p\u003e\n\u003cp\u003eBaselines act differently between git registries or the builtin registry,\u003cbr /\u003e\nand in filesystem registries.\u003cbr /\u003e\nIn git registries and the builtin registry,\u003cbr /\u003e\nsince there\u0027s a history that one can access,\u003cbr /\u003e\na baseline is the \u003ccode\u003e\"default\"\u003c/code\u003e entry in the baseline at the reference specified.\u003cbr /\u003e\nIn filesystem registries, since there is no accessible history,\u003cbr /\u003e\nthe baseline identifiers are mapped directly to entries in the baseline file,\u003cbr /\u003e\nwithout translation; by default, the \u003ccode\u003e\"default\"\u003c/code\u003e entry is used.\u003c/p\u003e\n\u003cp\u003eThese baselines are placed in \u003ccode\u003eport_versions/baseline.json\u003c/code\u003e.\u003cbr /\u003e\nThis is an object mapping baseline names to baseline objects,\u003cbr /\u003e\nwhere baseline objects map port names to version objects.\u003cbr /\u003e\nA version object contains \u003ccode\u003e\"baseline\"\u003c/code\u003e, which is un-schemed version,\u003cbr /\u003e\nand optionally \u003ccode\u003e\"port-version\"\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"example-of-a-baseline-file\"\u003eExample of a baseline file\u003c/h3\u003e\n\u003cp\u003eThe following is a reasonable baseline.json for a filesystem registry that only has two ports:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"default\": {\n    \"abseil\": { \"baseline\": \"2020-03-03\" },\n    \"zlib\": { \"baseline\": \"1.2.11\", \"port-version\": 9 }\n  },\n  \"old\": {\n    \"abseil\": { \"baseline\": \"2019-02-11\" },\n    \"zlib\": { \"baseline\": \"1.2.11\", \"port-version\": 3 }\n  },\n  \"really-old\": {\n    \"zlib\": { \"baseline\": \"1.2.9\" }\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"example-of-a-registry-database-entry-file\"\u003eExample of a registry database entry file\u003c/h3\u003e\n\u003cp\u003eNote: This file assumes that the versions RFC has been implemented,\u003cbr /\u003e\nand thus that minimum versions are required;\u003cbr /\u003e\nthe syntax may change in the time between now and finishing the implementation.\u003c/p\u003e\n\u003cp\u003eThis example is of \u003ccode\u003eogre\u003c/code\u003e, since this port has both features and dependencies;\u003cbr /\u003e\nremember that this file would be \u003ccode\u003eport_versions/o-/ogre.json\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e[\n  {\n    \"version-string\": \"1.12.7\",\n    \"git-tree\": \"466e96fd2e17dd2453aa31dc0bc61bdcf53e7f61\",\n  },\n  {\n    \"version-string\": \"1.12.1\",\n    \"port-version\": 1,\n    \"git-tree\": \"0de81b4f7e0ec24966e929c2ea64e16c15e71d5e\",\n  },\n  ...\n]\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id=\"filesystem-registry-databases\"\u003eFilesystem Registry Databases\u003c/h4\u003e\n\u003cp\u003eFilesystem registries are the simplest possible registry;\u003cbr /\u003e\nthey have a \u003ccode\u003eport_versions\u003c/code\u003e directory at the top-level, which contains the registry database.\u003cbr /\u003e\nIt\u0027s expected that the filesystem registry would have a filesystem backing store:\u003cbr /\u003e\nsomething like the existing \u003ccode\u003eports\u003c/code\u003e directory, except with separate versions.\u003cbr /\u003e\nThere won\u0027t be a specific way to lay the ports tree out as mandated by the tool,\u003cbr /\u003e\nas we are treating the ports tree as an implementation detail of the registry;\u003cbr /\u003e\nit\u0027s simply a way to get the files for a port.\u003cbr /\u003e\nAs an example, let\u0027s assume that the registry is laid out something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;registry\u0026gt;/\n  port_versions/\n    baseline.json\n    a-/\n      abseil.json\n      asmjit.json\n    o-/\n      ogre.json\n  ports/\n    a-/\n      abseil/\n        2020-03-03_7/\n          vcpkg.json\n          portfile.cmake\n          ...\n        2020-03-03_8/\n          vcpkg.json\n          portfile.cmake\n          ...\n        ...\n      asmjit/\n        2020-05-08/\n          CONTROL\n          portfile.cmake\n          ...\n        2020-07-22/\n          vcpkg.json\n          portfile.cmake\n          ...\n    o-/\n      ogre/\n        1.12.7/\n          ...\n        1.12.1/\n          ...\n    ...\n  ...\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, let\u0027s look at updating \u003ccode\u003easmjit\u003c/code\u003e to latest.\u003c/p\u003e\n\u003cp\u003eThe current manifest file, in \u003ccode\u003easmjit/2020-07-22/vcpkg.json\u003c/code\u003e looks like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"asmjit\",\n  \"version-string\": \"2020-07-22\",\n  \"description\": \"Complete x86/x64 JIT and Remote Assembler for C++\",\n  \"homepage\": \"https://github.com/asmjit/asmjit\",\n  \"supports\": \"!arm\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ewhile the current \u003ccode\u003eport_versions/a-/asmjit.json\u003c/code\u003e looks like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e[\n  {\n    \"version-string\": \"2020-07-22\",\n    \"path\": \"$/ports/a-/asmjit/2020-07-22\"\n  },\n  {\n    \"version-string\": \"2020-05-08\",\n    \"path\": \"$/ports/a-/asmjit/2020-05-08\"\n  }\n]\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ewith \u003ccode\u003eport_versions/baseline.json\u003c/code\u003e looking like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"default\": {\n    ...,\n    \"asmjit\": { \"baseline\": \"2020-07-22\" },\n    ...\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand we\u0027d like to update to \u003ccode\u003e2020-10-08\u003c/code\u003e.\u003cbr /\u003e\nWe should first copy the existing implementation to a new folder:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"sh language-sh\"\u003e$ cp -r ports/a-/asmjit/2020-07-22 ports/a-/asmjit/2020-10-08\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ethen, we\u0027ll make the edits required to \u003ccode\u003eports/a-/asmjit/2020-10-08\u003c/code\u003e to update to latest.\u003cbr /\u003e\nWe should then update \u003ccode\u003eport_versions/a-/asmjit.json\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e[\n  {\n    \"version-string\": \"2020-10-08\",\n    \"path\": \"$/ports/a-/asmjit/2020-10-08\"\n  },\n  {\n    \"version-string\": \"2020-07-22\",\n    \"path\": \"$/ports/a-/asmjit/2020-07-22\"\n  },\n  {\n    \"version-string\": \"2020-05-08\",\n    \"path\": \"$/ports/a-/asmjit/2020-05-08\"\n  }\n]\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand update \u003ccode\u003eport_versions/baseline.json\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"default\": {\n    ...,\n    \"asmjit\": { \"baseline\": \"2020-10-08\" },\n    ...\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand we\u0027re done ????.\u003c/p\u003e\n\u003ch4 id=\"git-registry-databases\"\u003eGit Registry Databases\u003c/h4\u003e\n\u003cp\u003eGit registries are not quite as simple as filesystem registries,\u003cbr /\u003e\nbut they\u0027re still pretty simple, and are likely to be the most common:\u003cbr /\u003e\nthe default registry is a git registry, for example.\u003cbr /\u003e\nThere is not a specific way the tool requires one to lay out the backing store,\u003cbr /\u003e\nas long as it\u0027s possible to get an object hash that corresponds to a checked-in git tree\u003cbr /\u003e\nof the build information.\u003cbr /\u003e\nThis allows, for example, the current vcpkg default registry way of laying out ports,\u003cbr /\u003e\nwhere the latest version of a port \u003ccode\u003e\u0026lt;P\u0026gt;\u003c/code\u003e is at \u003ccode\u003eports/\u0026lt;P\u0026gt;\u003c/code\u003e,\u003cbr /\u003e\nand it also allows for any number of other designs.\u003cbr /\u003e\nOne interesting design, for example,\u003cbr /\u003e\nis having an \u003ccode\u003eold-ports\u003c/code\u003e branch which is updated whenever someone want to backfill versions;\u003cbr /\u003e\nthen, one could push the old version to the \u003ccode\u003eold-ports\u003c/code\u003e branch,\u003cbr /\u003e\nand then update the HEAD branch with the git tree of the old version in \u003ccode\u003eport_versions/p-/\u0026lt;P\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAs above, we want to update \u003ccode\u003easmjit\u003c/code\u003e to latest; let\u0027s assume we\u0027re working in the default vcpkg registry\u003cbr /\u003e\n(the \u003ca href=\"https://github.com/microsoft/vcpkg\"\u003ehttps://github.com/microsoft/vcpkg\u003c/a\u003e repository):\u003c/p\u003e\n\u003cp\u003eThe current manifest file for \u003ccode\u003easmjit\u003c/code\u003e looks like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"asmjit\",\n  \"version-string\": \"2020-07-22\",\n  \"description\": \"Complete x86/x64 JIT and Remote Assembler for C++\",\n  \"homepage\": \"https://github.com/asmjit/asmjit\",\n  \"supports\": \"!arm\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand the current \u003ccode\u003eport_versions/a-/asmjit.json\u003c/code\u003e looks like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e[\n  {\n    \"version-string\": \"2020-07-22\",\n    \"git-tree\": \"fa0c36ba15b48959ab5a2df3463299e1d2473b6f\"\n  }\n]\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, let\u0027s update it to the latest version:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"asmjit\",\n  \"version-string\": \"2020-10-08\",\n  \"description\": \"Complete x86/x64 JIT and Remote Assembler for C++\",\n  \"homepage\": \"https://github.com/asmjit/asmjit\",\n  \"supports\": \"!arm\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand make the proper edits to the portfile.cmake. Then, let\u0027s commit the changes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmd language-cmd\"\u003e\u0026gt; git add ./ports/asmjit\n\u0026gt; git commit -m \"[asmjit] update asmjit to 2020-10-08\"\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn \u003ccode\u003egit-tree\u003c/code\u003e mode, one needs to commit the new version of the port to get the git tree hash;\u003cbr /\u003e\nwe use \u003ccode\u003egit rev-parse\u003c/code\u003e to do so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmd language-cmd\"\u003e\u0026gt; git rev-parse HEAD:ports/asmjit\n2bb51d8ec8b43bb9b21032185ca8123da10ecc6c\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand then modify \u003ccode\u003eport_versions/a-/asmjit.json\u003c/code\u003e as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e[\n  {\n    \"version-string\": \"2020-10-08\",\n    \"git-tree\": \"2bb51d8ec8b43bb9b21032185ca8123da10ecc6c\"\n  },\n  {\n    \"version-string\": \"2020-07-22\",\n    \"git-tree\": \"fa0c36ba15b48959ab5a2df3463299e1d2473b6f\"\n  }\n]\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen we can commit and push this new database with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"sh language-sh\"\u003e$ git add port_versions\n$ git commit --amend --no-edit\n$ git push\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"consuming-registries\"\u003eConsuming Registries\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003evcpkg-configuration.json\u003c/code\u003e file from the \u003ca href=\"registries.md\"\u003efirst registries RFC\u003c/a\u003e\u003cbr /\u003e\nis still the same, except that the registries have a slightly different layout.\u003cbr /\u003e\nA \u003ccode\u003e\u0026lt;configuration\u0026gt;\u003c/code\u003e is still an object with the following fields:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOptionally, \u003ccode\u003e\"default-registry\"\u003c/code\u003e: A \u003ccode\u003e\u0026lt;registry-implementation\u0026gt;\u003c/code\u003e or \u003ccode\u003enull\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eOptionally, \u003ccode\u003e\"registries\"\u003c/code\u003e: An array of \u003ccode\u003e\u0026lt;registry\u0026gt;\u003c/code\u003es\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdditionally, \u003ccode\u003e\u0026lt;registry\u0026gt;\u003c/code\u003e is still the same;\u003cbr /\u003e\na \u003ccode\u003e\u0026lt;registry-implementation\u0026gt;\u003c/code\u003e object, plus the following properties:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOptionally, \u003ccode\u003e\"baseline\"\u003c/code\u003e: A named baseline. Defaults to \u003ccode\u003e\"default\"\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eOptionally, \u003ccode\u003e\"packages\"\u003c/code\u003e: An array of \u003ccode\u003e\u0026lt;package-name\u0026gt;\u003c/code\u003es\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ehowever, \u003ccode\u003e\u0026lt;registry-implementation\u0026gt;\u003c/code\u003es are now slightly different:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;registry-implementation.builtin\u0026gt;\u003c/code\u003e:\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"kind\"\u003c/code\u003e: The string \u003ccode\u003e\"builtin\"\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;registry-implementation.filesystem\u0026gt;\u003c/code\u003e:\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"kind\"\u003c/code\u003e: The string \u003ccode\u003e\"filesystem\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"path\"\u003c/code\u003e: A path\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;registry-implementation.git\u0026gt;\u003c/code\u003e:\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"kind\"\u003c/code\u003e: The string \u003ccode\u003e\"git\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"repository\"\u003c/code\u003e: A URI\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe \u003ccode\u003e\"packages\"\u003c/code\u003e field of distinct registries must be disjoint,\u003cbr /\u003e\nand each \u003ccode\u003e\u0026lt;registry\u0026gt;\u003c/code\u003e must have at the \u003ccode\u003e\"packages\"\u003c/code\u003e property,\u003cbr /\u003e\nsince otherwise there\u0027s no point.\u003c/p\u003e\n\u003cp\u003eAs an example, a package which uses a different default registry, and a different registry for boost,\u003cbr /\u003e\nmight look like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"default-registry\": {\n    \"kind\": \"filesystem\",\n    \"path\": \"vcpkg-ports\"\n  },\n  \"registries\": [\n    {\n      \"kind\": \"builtin\",\n      \"packages\": [ \"cppitertools\" ]\n    }\n  ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will install \u003ccode\u003efmt\u003c/code\u003e from \u003ccode\u003e\u0026lt;directory-of-vcpkg-configuration.json\u0026gt;/vcpkg-ports\u003c/code\u003e,\u003cbr /\u003e\nand \u003ccode\u003ecppitertools\u003c/code\u003e and the \u003ccode\u003eboost\u003c/code\u003e ports from the registry that ships with vcpkg.\u003cbr /\u003e\nNotably, this does not replace behavior up the tree -- only the \u003ccode\u003evcpkg-configuration.json\u003c/code\u003es\u003cbr /\u003e\nfor the current invocation do anything.\u003c/p\u003e\n\u003ch3 id=\"filesystem-registries\"\u003eFilesystem Registries\u003c/h3\u003e\n\u003cp\u003eA filesystem registry takes on the form:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"kind\"\u003c/code\u003e: The string \u003ccode\u003e\"filesystem\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"path\"\u003c/code\u003e: The path to the filesystem registry\u0027s root, i.e. the directory containing the \u003ccode\u003eport_versions\u003c/code\u003e directory.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"kind\": \"filesystem\",\n  \"path\": \"vcpkg-registry\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUnlike git registries, where there\u0027s quite a bit of interesting stuff going on,\u003cbr /\u003e\nthere isn\u0027t much stuff to do with filesystem registries.\u003cbr /\u003e\nWe simply use the registry database at \u003ccode\u003e\u0026lt;registry root\u0026gt;/port_versions\u003c/code\u003e to get information about ports.\u003c/p\u003e\n\u003ch3 id=\"git-registries\"\u003eGit Registries\u003c/h3\u003e\n\u003cp\u003eA git registry takes on the form:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"kind\"\u003c/code\u003e: The string \u003ccode\u003e\"git\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"repository\"\u003c/code\u003e: The URL at which the git repository lives. May be any kind of URL that git understands\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"kind\": \"git\",\n  \"repository\": \"https://github.com/microsoft/vcpkg\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhenever the first vcpkg command is run with a git registry,\u003cbr /\u003e\nvcpkg notes down the exact commit that HEAD points to at the time of the run in the \u003ccode\u003evcpkg-lock.json\u003c/code\u003e file.\u003cbr /\u003e\nThis will be used as the commit which vcpkg takes the \u003ccode\u003e\"default\"\u003c/code\u003e baseline from,\u003cbr /\u003e\nand vcpkg will only update that commit when \u003ccode\u003evcpkg update\u003c/code\u003e is run.\u003c/p\u003e\n\u003cp\u003eSince the \u003ccode\u003e\"versions\"\u003c/code\u003e field is strictly additive, we don\u0027t consider older refs than \u003ccode\u003eHEAD\u003c/code\u003e.\u003cbr /\u003e\nWe update the repository on some reasonable clip.\u003cbr /\u003e\nLikely, whenever a command is run that will change the set of installed ports.\u003c/p\u003e\n\u003ch4 id=\"vcpkg-lockjson\"\u003e\u003ccode\u003evcpkg-lock.json\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis file will contain metadata that we need to save across runs,\u003cbr /\u003e\nto allow us to keep a \"state-of-the-world\" that doesn\u0027t change unless one explicitly asks for it to change.\u003cbr /\u003e\nThis means that, even across different machines, the same registries will be used.\u003cbr /\u003e\nWe will also be able to write down version resolution in this file as soon as that feature is added.\u003c/p\u003e\n\u003cp\u003eIt is recommended that one adds this \u003ccode\u003evcpkg-lock.json\u003c/code\u003e to one\u0027s version control.\u003cbr /\u003e\nThis file is machine generated, and it is not specified how it\u0027s layed out;\u003cbr /\u003e\nhowever, for purposes of this RFC, we will define how it relates to git registries.\u003c/p\u003e\n\u003cp\u003eIn \u003ccode\u003evcpkg-lock.json\u003c/code\u003e, in the top level object,\u003cbr /\u003e\nthere will be a \u003ccode\u003e\"registries\"\u003c/code\u003e property that is an object.\u003cbr /\u003e\nThis object will contain a \u003ccode\u003e\"git\"\u003c/code\u003e field, which is an array of git-registry objects,\u003cbr /\u003e\nthat contain:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"repository\"\u003c/code\u003e: The \u003ccode\u003e\"repository\"\u003c/code\u003e field from the git registry object\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"baseline\"\u003c/code\u003e: The name of the baseline that we\u0027ve used\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"baseline-ref\"\u003c/code\u003e: The ref which we\u0027ve gotten the specific baseline from.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor example, a \u003ccode\u003evcpkg-lock.json\u003c/code\u003e might look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"registries\": {\n    \"git\": [\n      {\n        \"repository\": \"https://github.com/microsoft/vcpkg\",\n        \"baseline\": \"default\",\n        \"baseline-ref\": \"6185aa76504a5025f36754324abf307cc776f3da\"\n      }\n    ]\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id=\"vcpkg-update\"\u003e\u003ccode\u003evcpkg update\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eYou\u0027ll notice that once the repository is added the first time,\u003cbr /\u003e\nthere is only one way to update the repository to the tag at a later date - deleting the lock file.\u003cbr /\u003e\nWe additionally want to add support for the user updating the registry by themselves -\u003cbr /\u003e\nthey will be able to do this via the \u003ccode\u003evcpkg update\u003c/code\u003e command.\u003cbr /\u003e\nThe \u003ccode\u003evcpkg update\u003c/code\u003e command will, for each git registry,\u003cbr /\u003e\nupdate the registry and repoint the \u003ccode\u003e\"commit\"\u003c/code\u003e field in \u003ccode\u003evcpkg-lock.json\u003c/code\u003e to the latest \u003ccode\u003eHEAD\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThere is no way to update only one git registry to a later date, since versions are strictly additive.\u003c/p\u003e\n\u003ch2 id=\"git-registries-implementation-on-disk\"\u003eGit Registries: Implementation on Disk\u003c/h2\u003e\n\u003cp\u003eThere are two implementations on disk to consider here: the implementation of the registry database,\u003cbr /\u003e\nand once we have the database entries for the ports, accessing the port data from the git tree object.\u003c/p\u003e\n\u003cp\u003eBoth of these implementations are placed in the vcpkg cache home (shared by binary caching archives).\u003cbr /\u003e\nOn unix, this is located at \u003ccode\u003e$XDG_CACHE_HOME/vcpkg\u003c/code\u003e if the environment variable exists,\u003cbr /\u003e\notherwise \u003ccode\u003e$HOME/.cache/vcpkg\u003c/code\u003e; on Windows, it\u0027s located at \u003ccode\u003e%LOCALAPPDATA%\\vcpkg\u003c/code\u003e.\u003cbr /\u003e\nIn this document, we use the variable \u003ccode\u003e$CACHE_ROOT\u003c/code\u003e to refer to this folder.\u003cbr /\u003e\nWe will add a new folder, \u003ccode\u003e$CACHE_ROOT/registries\u003c/code\u003e, which will contain all the data we need.\u003c/p\u003e\n\u003cp\u003eFirst, we\u0027ll discuss the registry database.\u003c/p\u003e\n\u003ch3 id=\"registry-database\"\u003eRegistry Database\u003c/h3\u003e\n\u003cp\u003eAt \u003ccode\u003e$CACHE_ROOT/registries/git\u003c/code\u003e,\u003cbr /\u003e\nwe\u0027ll create a new git repository root which contains all information from all git registries,\u003cbr /\u003e\nsince the hashes should be unique, and this allows for deduplication\u003cbr /\u003e\nacross repositories which have the same commits (e.g., for mirrors).\u003cbr /\u003e\nIn order to get the data from git registries, we simply \u003ccode\u003efetch\u003c/code\u003e the URL of the git registry.\u003c/p\u003e\n\u003cp\u003eIn order to grab a specific database entry from a git registry, \u003ccode\u003egit show\u003c/code\u003e is used to grab the\u003cbr /\u003e\nfile from the right commit: \u003ccode\u003egit show \u0026lt;commit id\u0026gt; -- port_versions/\u0026lt;first character\u0026gt;-/\u0026lt;portname\u0026gt;.json\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOne unfortunate thing about having one directory being used for all vcpkg instances on a machine is\u003cbr /\u003e\nthat it\u0027s possible to have an issue with concurrency - for example, after \u003ccode\u003efetch\u003c/code\u003eing the latest HEAD\u003cbr /\u003e\nof \u003ccode\u003ehttps://github.com/microsoft/vcpkg\u003c/code\u003e, another vcpkg process might fetch the latest HEAD of\u003cbr /\u003e\n\u003ccode\u003ehttps://github.com/meow/vcpkg\u003c/code\u003e before the first vcpkg process has the chance to \u003ccode\u003egit rev-parse FETCH_HEAD\u003c/code\u003e.\u003cbr /\u003e\nSince the first vcpkg process will run \u003ccode\u003egit rev-parse\u003c/code\u003e after the second fetch is done,\u003cbr /\u003e\ninstead of getting the \u003ccode\u003eHEAD\u003c/code\u003e of \u003ccode\u003emicrosoft/vcpkg\u003c/code\u003e, they instead get the \u003ccode\u003eHEAD\u003c/code\u003e of \u003ccode\u003emeow/vcpkg\u003c/code\u003e.\u003cbr /\u003e\nWe will solve this by having a mutex file in \u003ccode\u003e$CACHE_ROOT/registries/git\u003c/code\u003e\u003cbr /\u003e\nthat vcpkg locks before any fetches (and unlocks after \u003ccode\u003erev-parse\u003c/code\u003eing).\u003c/p\u003e\n\u003ch3 id=\"accessing-port-data-from-git-trees\"\u003eAccessing Port Data from \u003ccode\u003egit-tree\u003c/code\u003es\u003c/h3\u003e\n\u003cp\u003eOnce we\u0027ve done version resolution and everything with the database,\u003cbr /\u003e\nwe then need to access the port data from the git history.\u003cbr /\u003e\nWe will add a new folder, \u003ccode\u003e$CACHE_ROOT/registries/git-trees\u003c/code\u003e, into which we\u0027ll check out the port data.\u003c/p\u003e\n\u003cp\u003eIn this \u003ccode\u003egit-trees\u003c/code\u003e directory, we will have all of the trees we check out, at their hashes.\u003cbr /\u003e\nFor example, the asmjit port data from above will be located at\u003cbr /\u003e\n\u003ccode\u003egit-trees/2bb51d8ec8b43bb9b21032185ca8123da10ecc6c\u003c/code\u003e.\u003cbr /\u003e\nWe will add a mutex file in this \u003ccode\u003egit-trees\u003c/code\u003e directory as well which is taken whenever\u003cbr /\u003e\nwe are checking out a new git tree.\u003cbr /\u003e\nWe wish to allow multiple vcpkg instances to read port data at a time,\u003cbr /\u003e\nand thus we do the check outs semi-atomically - if \u003ccode\u003egit-trees/\u0026lt;hash\u0026gt;\u003c/code\u003e exists,\u003cbr /\u003e\nthen the \u003ccode\u003e\u0026lt;hash\u0026gt;\u003c/code\u003e must be completely checked out.\u003cbr /\u003e\nvcpkg does this by first checking out to a temporary directory,\u003cbr /\u003e\nand then renaming to the actual hash.\u003c/p\u003e\n\u003ch2 id=\"future-extensions\"\u003eFuture Extensions\u003c/h2\u003e\n\u003cp\u003eThe way forward for this is to allow the \u003ccode\u003e\"builtin\"\u003c/code\u003e registry to be a git registry,\u003cbr /\u003e\nin order to support packaging and shipping vcpkg as a binary.\u003cbr /\u003e\nThis is currently our plan, although it definitely is still a ways out.\u003cbr /\u003e\nGit registries \u003cem\u003eare\u003c/em\u003e an important step on that road,\u003cbr /\u003e\nbut are also a good way to support both enterprise,\u003cbr /\u003e\nand experimentation by our users.\u003cbr /\u003e\nThey allow us a lot more flexibility than we\u0027ve had in the past.\u003c/p\u003e",
        "Nav":  "#specifications"
    },
    {
        "Path":  "/en/docs/specifications/registries.html",
        "Name":  "registries",
        "Source":  "\u003ch1 id=\"package-federation-custom-registries\"\u003ePackage Federation: Custom Registries\u003c/h1\u003e\n\u003cp\u003eAs it is now, vcpkg has over 1400 ports in the default registry (the \u003ccode\u003e/ports\u003c/code\u003e directory).\u003cbr /\u003e\nFor the majority of users, this repository of packages is enough. However, many enterprises\u003cbr /\u003e\nneed to more closely control their dependencies for one reason or another, and this document\u003cbr /\u003e\nlays out a method which we will build into vcpkg for exactly that reason.\u003c/p\u003e\n\u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cp\u003eA registry is simply a set of packages. In fact, there is already a registry in vcpkg: the default one.\u003cbr /\u003e\nPackage federation, implemented via custom registries, allows one to add new packages,\u003cbr /\u003e\nedit existing packages, and have as much or as little control as one likes over the dependencies that one uses.\u003cbr /\u003e\nIt gives the control over dependencies that an enterprise requires.\u003c/p\u003e\n\u003ch3 id=\"how-does-the-current-default-registry-work\"\u003eHow Does the Current Default Registry Work?\u003c/h3\u003e\n\u003cp\u003eOf course, the existing vcpkg tool does have packages in the official,\u003cbr /\u003e\ndefault registry. The way we describe these packages is in the ports tree ???\u003cbr /\u003e\nat the base of the vcpkg install directory, there is a directory named ports,\u003cbr /\u003e\nwhich contains on the order of 1300 directories, one for each package. Then,\u003cbr /\u003e\nin each package directory, there are at least two files: a CONTROL or\u003cbr /\u003e\nvcpkg.json file, which contains the name, version, description, and features\u003cbr /\u003e\nof the package; and a portfile.cmake file which contains the information on\u003cbr /\u003e\nhow to download and build the package. There may be other files in this\u003cbr /\u003e\nregistry, like patches or usage instructions, but only those two files are\u003cbr /\u003e\nneeded.\u003c/p\u003e\n\u003ch3 id=\"existing-vcpkg-registry-like-features\"\u003eExisting vcpkg Registry-like Features\u003c/h3\u003e\n\u003cp\u003eThere are some existing features in vcpkg that act somewhat like a custom\u003cbr /\u003e\nregistry. The most obvious feature that we have is overlay ports ??? this\u003cbr /\u003e\nfeature allows you to specify any number of directories as \"overlays\", which\u003cbr /\u003e\neither contain a package definition directly, or which contain some number of\u003cbr /\u003e\npackage directories; these overlays will be used instead of the ports tree\u003cbr /\u003e\nfor packages that exist in both places, and are specified exclusively on the\u003cbr /\u003e\ncommand line. Additionally, unfortunately, if one installs a package from\u003cbr /\u003e\noverlay ports that does not exist in the ports tree, one must pass these\u003cbr /\u003e\noverlays to every vcpkg installation command.\u003c/p\u003e\n\u003cp\u003eThere is also the less obvious \"feature\" which works by virtue of the ports\u003cbr /\u003e\ntree being user-editable: one can always edit the ports tree on their own\u003cbr /\u003e\nmachine, and can even fork vcpkg and publish their own ports tree.\u003cbr /\u003e\nUnfortunately, this then means that any updates to the source tree require\u003cbr /\u003e\nmerges, as opposed to being able to fast-forward to the newest sources.\u003c/p\u003e\n\u003ch3 id=\"why-registries\"\u003eWhy Registries?\u003c/h3\u003e\n\u003cp\u003eThere are many reasons to want custom registries; however, the most important reasons are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLegal requirements ??? a company like Microsoft or Google\nneeds the ability to strictly control the code that goes into their products,\nmaking certain that they are following the licenses strictly.\u003cul\u003e\n\u003cli\u003eThere have been examples in the past where a library which is licensed under certain terms contains code\u003cbr /\u003e\nwhich is not legally allowed to be licensed under those terms (see \u003ca href=\"https://gcc.gnu.org/legacy-ml/libstdc++/2019-09/msg00054.html\"\u003ethis example\u003c/a\u003e,\u003cbr /\u003e\nwhere a person tried to merge Microsoft-owned, Apache-licensed code into the GPL-licensed libstdc++).\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eTechnical requirements ??? a company may wish to run their own tests on the packages they ship,\u003cbr /\u003e\nsuch as \u003ca href=\"https://en.wikipedia.org/wiki/Fuzzing\"\u003efuzzing\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eOther requirements ??? an organization may wish to strictly control its dependencies for a myriad of other reasons.\u003c/li\u003e\n\u003cli\u003eNewer versions ??? vcpkg may not necessarily always be up to date for all libraries in our registry,\u003cbr /\u003e\nand an organization may require a newer version than we ship;\u003cbr /\u003e\nthey can very easily update this package and have the version that they want.\u003c/li\u003e\n\u003cli\u003ePort modifications ??? vcpkg has somewhat strict policies on port modifications,\u003cbr /\u003e\nand an organization may wish to make different modifications than we do.\u003cbr /\u003e\nIt may allow that organization to make certain that the package works on triplets\u003cbr /\u003e\nthat our team does not test as extensively.\u003c/li\u003e\n\u003cli\u003eTesting ??? just like port modifications, if a team wants to do specific testing on triplets they care about,\u003cbr /\u003e\nthey can do so via their custom registry.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThen, there is the question of why vcpkg needs a new solution for custom registries,\u003cbr /\u003e\nbeyond the existing overlay ports feature. There are two big reasons ???\u003cbr /\u003e\nthe first is to allow a project to define the registries that they use for their dependencies,\u003cbr /\u003e\nand the second is the clear advantage in the user experience of the vcpkg tool.\u003cbr /\u003e\nIf a project requires specific packages to come from specific registries,\u003cbr /\u003e\nthey can do so without worrying that a user accidentally misses the overlay ports part of a command.\u003cbr /\u003e\nAdditionally, beyond a feature which makes overlay ports easier to use,\u003cbr /\u003e\ncustom registries allow for more complex and useful infrastructure around registries.\u003cbr /\u003e\nIn the initial custom registry implementation, we will allow overlay ports style paths,\u003cbr /\u003e\nas well as git repositories, which means that people can run and use custom registries\u003cbr /\u003e\nwithout writing their own infrastructure around getting people that registry.\u003c/p\u003e\n\u003cp\u003eIt is the intention of vcpkg to be the most user-friendly package manager for C++,\u003cbr /\u003e\nand this allows us to fulfill on that intention even further.\u003cbr /\u003e\nAs opposed to having to write \u003ccode\u003e--overlay-ports=path/to/overlay\u003c/code\u003e for every command one runs,\u003cbr /\u003e\nor adding an environment variable \u003ccode\u003eVCPKG_OVERLAY_PORTS\u003c/code\u003e,\u003cbr /\u003e\none can simply write vcpkg install and the registries will be taken care of for you.\u003cbr /\u003e\nAs opposed to having to use git submodules, or custom registry code for every project,\u003cbr /\u003e\none can write and run the infrastructure in one place,\u003cbr /\u003e\nand every project that uses that registry requires only a few lines of JSON.\u003c/p\u003e\n\u003ch2 id=\"specification\"\u003eSpecification\u003c/h2\u003e\n\u003cp\u003eWe will be adding a new file that vcpkg understands - \u003ccode\u003evcpkg-configuration.json\u003c/code\u003e.\u003cbr /\u003e\nThe way that vcpkg will find this file is different depending on what mode vcpkg is in:\u003cbr /\u003e\nin classic mode, vcpkg finds this file alongside the vcpkg binary, in the root directory.\u003cbr /\u003e\nIn manifest mode, vcpkg finds this file alongside the manifest. For the initial implementation,\u003cbr /\u003e\nthis is all vcpkg will look for; however, in the future, vcpkg will walk the tree and include\u003cbr /\u003e\nconfiguration all along the way: this allows for overriding defaults.\u003cbr /\u003e\nThe specific algorithm for applying this is not yet defined, since currently only one\u003cbr /\u003e\n\u003ccode\u003evcpkg-configuration.json\u003c/code\u003e is allowed.\u003c/p\u003e\n\u003cp\u003eThe only thing allowed in a \u003ccode\u003evcpkg-configuration.json\u003c/code\u003e is a \u003ccode\u003e\u0026lt;configuration\u0026gt;\u003c/code\u003e object.\u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003e\u0026lt;configuration\u0026gt;\u003c/code\u003e is an object:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOptionally, \u003ccode\u003e\"default-registry\"\u003c/code\u003e: A \u003ccode\u003e\u0026lt;registry-implementation\u0026gt;\u003c/code\u003e or \u003ccode\u003enull\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eOptionally, \u003ccode\u003e\"registries\"\u003c/code\u003e: An array of \u003ccode\u003e\u0026lt;registry\u0026gt;\u003c/code\u003es\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSince this is the first RFC that adds anything to this field,\u003cbr /\u003e\nas of now the only properties that can live in that object will be\u003cbr /\u003e\nthese.\u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003e\u0026lt;registry-implementation\u0026gt;\u003c/code\u003e is an object matching one of the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;registry-implementation.builtin\u0026gt;\u003c/code\u003e:\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"kind\"\u003c/code\u003e: The string \u003ccode\u003e\"builtin\"\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;registry-implementation.directory\u0026gt;\u003c/code\u003e:\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"kind\"\u003c/code\u003e: The string \u003ccode\u003e\"directory\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"path\"\u003c/code\u003e: A path\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;registry-implementation.git\u0026gt;\u003c/code\u003e:\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"kind\"\u003c/code\u003e: The string \u003ccode\u003e\"git\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"repository\"\u003c/code\u003e: A URI\u003c/li\u003e\n\u003cli\u003eOptionally, \u003ccode\u003e\"path\"\u003c/code\u003e: An absolute path into the git repository\u003c/li\u003e\n\u003cli\u003eOptionally, \u003ccode\u003e\"ref\"\u003c/code\u003e: A git reference\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eA \u003ccode\u003e\u0026lt;registry\u0026gt;\u003c/code\u003e is a \u003ccode\u003e\u0026lt;registry-implementation\u0026gt;\u003c/code\u003e object, plus the following properties:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOptionally, \u003ccode\u003e\"scopes\"\u003c/code\u003e: An array of \u003ccode\u003e\u0026lt;package-name\u0026gt;\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003eOptionally, \u003ccode\u003e\"packages\"\u003c/code\u003e: An array of \u003ccode\u003e\u0026lt;package-name\u0026gt;\u003c/code\u003es\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe \u003ccode\u003e\"packages\"\u003c/code\u003e and \u003ccode\u003e\"scopes\"\u003c/code\u003e fields of distinct registries must be disjoint,\u003cbr /\u003e\nand each \u003ccode\u003e\u0026lt;registry\u0026gt;\u003c/code\u003e must have at least one of the \u003ccode\u003e\"scopes\"\u003c/code\u003e and \u003ccode\u003e\"packages\"\u003c/code\u003e property,\u003cbr /\u003e\nsince otherwise there\u0027s no point.\u003c/p\u003e\n\u003cp\u003eAs an example, a package which uses a different default registry, and a different registry for boost,\u003cbr /\u003e\nmight look like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"default-registry\": {\n    \"kind\": \"directory\",\n    \"path\": \"vcpkg-ports\"\n  },\n  \"registries\": [\n    {\n      \"kind\": \"git\",\n      \"repository\": \"https://github.com/boostorg/vcpkg-ports\",\n      \"ref\": \"v1.73.0\",\n      \"scopes\": [ \"boost\" ]\n    },\n    {\n      \"kind\": \"builtin\",\n      \"packages\": [ \"cppitertools\" ]\n    }\n  ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will install \u003ccode\u003efmt\u003c/code\u003e from \u003ccode\u003e\u0026lt;directory-of-vcpkg.json\u0026gt;/vcpkg-ports\u003c/code\u003e,\u003cbr /\u003e\n\u003ccode\u003ecppitertools\u003c/code\u003e from the registry that ships with vcpkg,\u003cbr /\u003e\nand any \u003ccode\u003eboost\u003c/code\u003e dependencies from \u003ccode\u003ehttps://github.com/boostorg/vcpkg-ports\u003c/code\u003e.\u003cbr /\u003e\nNotably, this does not replace behavior up the tree -- only the \u003ccode\u003evcpkg-configuration.json\u003c/code\u003es\u003cbr /\u003e\nfor the current invocation do anything.\u003c/p\u003e\n\u003ch3 id=\"behavior\"\u003eBehavior\u003c/h3\u003e\n\u003cp\u003eWhen a vcpkg command requires the installation of dependencies,\u003cbr /\u003e\nit will generate the initial list of dependencies from the package,\u003cbr /\u003e\nand then run the following algorithm on each dependency:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFigure out which registry the package should come from by doing the following:\u003col\u003e\n\u003cli\u003eIf there is a registry in the registry set which contains the dependency name in the \u003ccode\u003e\"packages\"\u003c/code\u003e array,\u003cbr /\u003e\nthen use that registry.\u003c/li\u003e\n\u003cli\u003eFor every scope, in order from most specific to least,\u003cbr /\u003e\nif there is a registry in the registry set which contains that scope in the \u003ccode\u003e\"scopes\"\u003c/code\u003e array,\u003cbr /\u003e\nthen use that registry.\u003cbr /\u003e\n(For example, for \u003ccode\u003e\"cat.meow.cute\"\u003c/code\u003e, check first for \u003ccode\u003e\"cat.meow.cute\"\u003c/code\u003e, then \u003ccode\u003e\"cat.meow\"\u003c/code\u003e, then \u003ccode\u003e\"cat\"\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIf the default registry is not \u003ccode\u003enull\u003c/code\u003e, use that registry.\u003c/li\u003e\n\u003cli\u003eElse, error.\u003c/li\u003e\u003c/ol\u003e\u003c/li\u003e\n\u003cli\u003eThen, add that package\u0027s dependencies to the list of packages to find, and repeat for the next dependency.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003evcpkg will also rerun this algorithm whenever an install is run with different configuration.\u003c/p\u003e\n\u003ch3 id=\"how-registries-are-layed-out\"\u003eHow Registries are Layed Out\u003c/h3\u003e\n\u003cp\u003eThere are three kinds of registries, but they only differ in how the registry gets onto one\u0027s filesystem.\u003cbr /\u003e\nOnce the registry is there, package lookup runs the same, with each kind having it\u0027s own way of defining its\u003cbr /\u003e\nown root.\u003c/p\u003e\n\u003cp\u003eIn order to find a port \u003ccode\u003emeow\u003c/code\u003e in a registry with root \u003ccode\u003eR\u003c/code\u003e, vcpkg first sees if \u003ccode\u003eR/meow\u003c/code\u003e exists;\u003cbr /\u003e\nif it does, then the port root is \u003ccode\u003eR/meow\u003c/code\u003e. Otherwise, see if \u003ccode\u003eR/m-\u003c/code\u003e exists; if it does,\u003cbr /\u003e\nthen the port root is \u003ccode\u003eR/m-/meow\u003c/code\u003e. (note: this algorithm may be extended further in the future).\u003c/p\u003e\n\u003cp\u003eFor example, given the following port root:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eR/\n  abseil/...\n  b-/\n    boost/...\n    boost-build/...\n    banana/...\n  banana/...\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe port root for \u003ccode\u003eabseil\u003c/code\u003e is \u003ccode\u003eR/abseil\u003c/code\u003e; the port root for \u003ccode\u003eboost\u003c/code\u003e is \u003ccode\u003eR/b-/boost\u003c/code\u003e;\u003cbr /\u003e\nthe port root for \u003ccode\u003ebanana\u003c/code\u003e is \u003ccode\u003eR/banana\u003c/code\u003e (although this duplication is not recommended).\u003c/p\u003e\n\u003cp\u003eThe reason we are making this change to allow more levels in the ports tree is that ~1300\u003cbr /\u003e\nports are hard to look through in a tree view, and this allows us to see only the ports we\u0027re\u003cbr /\u003e\ninterested in. Additionally, no port name may end in a \u003ccode\u003e-\u003c/code\u003e, so this means that these port subdirectories\u003cbr /\u003e\nwill never intersect with actual ports. Additionally, since we use only ASCII for port names,\u003cbr /\u003e\nwe don\u0027t have to worry about graphemes vs. code units vs. code points -- in ASCII, they are equivalent.\u003c/p\u003e\n\u003cp\u003eLet\u0027s now look at how different registry kinds work:\u003c/p\u003e\n\u003ch4 id=\"registrybuiltin\"\u003e\u003ccode\u003e\u0026lt;registry.builtin\u0026gt;\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eFor a \u003ccode\u003e\u0026lt;registry.builtin\u0026gt;\u003c/code\u003e, there is no configuration required.\u003cbr /\u003e\nThe registry root is simply \u003ccode\u003e\u0026lt;vcpkg-root\u0026gt;/ports\u003c/code\u003e.\u003c/p\u003e\n\u003ch4 id=\"registrydirectory\"\u003e\u003ccode\u003e\u0026lt;registry.directory\u0026gt;\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eFor a \u003ccode\u003e\u0026lt;registry.directory\u0026gt;\u003c/code\u003e, it is again fairly simple.\u003cbr /\u003e\nGiven \u003ccode\u003e$path\u003c/code\u003e the value of the \u003ccode\u003e\"path\"\u003c/code\u003e property, the registry root is either:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf \u003ccode\u003e$path\u003c/code\u003e is absolute, then the registry root is \u003ccode\u003e$path\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003e$path\u003c/code\u003e is drive-relative (only important on Windows), the registry root is\u003cbr /\u003e\n\u003ccode\u003e(drive of vcpkg.json)/$path\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003e$path\u003c/code\u003e is relative, the registry root is \u003ccode\u003e(directory of vcpkg.json)/$path\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNote that the path to vcpkg.json is \u003cem\u003enot\u003c/em\u003e canonicalized; it is used exactly as it is seen by vcpkg.\u003c/p\u003e\n\u003ch4 id=\"registrygit\"\u003e\u003ccode\u003e\u0026lt;registry.git\u0026gt;\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis registry is the most complex. We would like to cache existing registries,\u003cbr /\u003e\nbut we don\u0027t want to ignore new updates to the registry.\u003cbr /\u003e\nIt is the opinion of the author that we want to find more updates than not,\u003cbr /\u003e\nso we will update the registry whenever the \u003ccode\u003evcpkg.json\u003c/code\u003e or \u003ccode\u003evcpkg-configuration.json\u003c/code\u003e\u003cbr /\u003e\nis modified. We will do so by keeping a sha512 of the \u003ccode\u003evcpkg.json\u003c/code\u003e and \u003ccode\u003evcpkg-configuration.json\u003c/code\u003e\u003cbr /\u003e\ninside the \u003ccode\u003evcpkg-installed\u003c/code\u003e directory.\u003c/p\u003e\n\u003cp\u003eWe will download the specific ref of the repository to a central location (and update as needed),\u003cbr /\u003e\nand the root will be either: \u003ccode\u003e\u0026lt;path to repository\u0026gt;\u003c/code\u003e, if the \u003ccode\u003e\"path\"\u003c/code\u003e property is not defined,\u003cbr /\u003e\nor else \u003ccode\u003e\u0026lt;path to repository\u0026gt;/\u0026lt;path property\u0026gt;\u003c/code\u003e if it is defined.\u003cbr /\u003e\nThe \u003ccode\u003e\"path\"\u003c/code\u003e property must be absolute, without a drive, and will be treated as relative to\u003cbr /\u003e\nthe path to the repository. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"kind\": \"git\",\n  \"repository\": \"https://github.com/microsoft/vcpkg\",\n  \"path\": \"/ports\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eis the correct way to refer to the registry built in to vcpkg, at the latest version.\u003c/p\u003e\n\u003cp\u003eThe following are all incorrect:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"$reason\": \"path can\u0027t be drive-absolute\",\n  \"kind\": \"git\",\n  \"repository\": \"https://github.com/microsoft/vcpkg\",\n  \"path\": \"F:/ports\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"$reason\": \"path can\u0027t be relative\",\n  \"kind\": \"git\",\n  \"repository\": \"https://github.com/microsoft/vcpkg\",\n  \"path\": \"ports\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"$reason\": \"path _really_ can\u0027t be relative like that\",\n  \"kind\": \"git\",\n  \"repository\": \"https://github.com/microsoft/vcpkg\",\n  \"path\": \"../../meow/ports\"\n}\u003c/code\u003e\u003c/pre\u003e",
        "Nav":  "#specifications"
    },
    {
        "Path":  "/en/docs/specifications/scripts-extraction.html",
        "Name":  "Scripts Extraction",
        "Source":  "\u003ch1 id=\"scripts-tree-extraction\"\u003eScripts Tree Extraction\u003c/h1\u003e\n\u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cp\u003eWe extracted vcpkg-tool as part of a future wherein Registries are the primary mechanism for interacting with the ports tree, which would allow the vcpkg tool and associated artifacts to be deployed and figure the rest out on their own. Unfortunately, we have concurrently edited things in the so called \"scripts\" tree which lives in support of ports but really probably belongs in the vcpkg-tool repo.\u003c/p\u003e\n\u003cp\u003eMoreover, as part of stabilizing registries, the interface exposed by the scripts tree becomes contractual rather than something we can change in concert with ports, since we can no longer see the universe of ports to validate that changes are correct.\u003c/p\u003e\n\u003cp\u003eTo that end we are auditing the contents of the scripts tree to make sure it is a solid foundation for future work.\u003c/p\u003e\n\u003cp\u003eThe work list is contained in \u003ca href=\"https://github.com/microsoft/vcpkg/issues/16188\"\u003eIssue #16188\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"audit-points\"\u003eAudit Points\u003c/h2\u003e\n\u003cp\u003eThe following are assertions we want to be able to make about the contents of the scripts tree. Note that this does \u003cem\u003enot\u003c/em\u003e refer to \u003ccode\u003evcpkg.cmake\u003c/code\u003e since that needs to work with older versions of cmake.\u003c/p\u003e\n\u003cp\u003eThese are design ideals that we may break in some limited cases where that makes sense.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWe always use \u003ccode\u003ecmake_parse_arguments\u003c/code\u003e rather than function parameters, or referring to \u003ccode\u003e${ARG\u0026lt;N\u0026gt;}\u003c/code\u003e.\u003cul\u003e\n\u003cli\u003eException: there are exclusively positional parameters. This should be \u003cem\u003every rare\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eIn this case, positional parameters should be put in the function declaration\u003cbr /\u003e\n(rather than using \u003ccode\u003e${ARG\u0026lt;N\u0026gt;}\u003c/code\u003e), and should be named according to local rules\u003cbr /\u003e\n(i.e. \u003ccode\u003esnake_case\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eException: positional parameters that are optional should be given a name via\u003cbr /\u003e\n\u003ccode\u003eset(argument_name \"${ARG\u0026lt;N\u0026gt;}\") after checking\u003c/code\u003e${ARGC}`.\u003c/li\u003e\n\u003cli\u003eNote: in cases where there are positional parameters along with non-positional parameters, positional parameters should be referred to by \u003ccode\u003earg_UNPARSED_ARGUMENTS\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eAll \u003ccode\u003ecmake_parse_arguments\u003c/code\u003e use \u003ccode\u003ePARSE_ARGV\u003c/code\u003e for resistance to embedded semicolons.\u003c/li\u003e\n\u003cli\u003eAll \u003ccode\u003eforeach\u003c/code\u003e loops use \u003ccode\u003eIN LISTS\u003c/code\u003e for resistance to embedded semicolons.\u003c/li\u003e\n\u003cli\u003eThe variable \u003ccode\u003e${ARGV}\u003c/code\u003e is unreferenced.\u003c/li\u003e\n\u003cli\u003eWe use functions, not macros or top level code.\u003c/li\u003e\n\u003cli\u003eScripts in the scripts tree should not be expected to need changes as part of normal operation. (For example, \u003ccode\u003evcpkg_acquire_msys\u003c/code\u003e has hard coded specific packages and versions thereof used which we believe is unacceptable)\u003c/li\u003e\n\u003cli\u003eAll non-splat variable expansions are in quotes \"\".\u003c/li\u003e\n\u003cli\u003eThere are no \"pointer\" parameters (where a user passes a variable name rather than the contents) except for out parameters.\u003c/li\u003e\n\u003cli\u003eUndefined names are not referenced.\u003c/li\u003e\n\u003cli\u003eOut parameters only set \u003ccode\u003ePARENT_SCOPE\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCACHE\u003c/code\u003e variables are not used.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003einclude()\u003c/code\u003es are removed and fixes to \u003ccode\u003eport.cmake\u003c/code\u003e et al. are made as necessary to avoid this.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eforeach(RANGE)\u003c/code\u003e\u0027s arguments \u003cem\u003emust always be\u003c/em\u003e natural numbers, and \u003ccode\u003e\u0026lt;start\u0026gt;\u003c/code\u003e \u003cem\u003emust always be\u003c/em\u003e less than or equal to \u003ccode\u003e\u0026lt;stop\u0026gt;\u003c/code\u003e.\u003cul\u003e\n\u003cli\u003eThis should be checked.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"naming-variables\"\u003eNaming Variables\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecmake_parse_arguments\u003c/code\u003e: set prefix to \u003ccode\u003e\"arg\"\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003elocal variables are named \u003ccode\u003esnake_case\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eInternal global variable names are named \u003ccode\u003eZ_VCPKG_\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eExternal experimental global variable names are named \u003ccode\u003eX_VCPKG_\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eInternal functions are named \u003ccode\u003ez_vcpkg_*\u003c/code\u003e\u003cul\u003e\n\u003cli\u003eFunctions which are internal to a single function (i.e., helper functions)\u003cbr /\u003e\nare named \u003ccode\u003e[z_]\u0026lt;func\u0026gt;_\u0026lt;name\u0026gt;\u003c/code\u003e, where \u003ccode\u003e\u0026lt;func\u0026gt;\u003c/code\u003e is the name of the function they are\u003cbr /\u003e\na helper to, and \u003ccode\u003e\u0026lt;name\u0026gt;\u003c/code\u003e is what the helper function does.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ez_\u003c/code\u003e should be added to the front if \u003ccode\u003e\u0026lt;func\u0026gt;\u003c/code\u003e doesn\u0027t have a \u003ccode\u003ez_\u003c/code\u003e,\u003cbr /\u003e\nbut don\u0027t name a helper function \u003ccode\u003ez_z_foo_bar\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003ePublic global variables are named \u003ccode\u003eVCPKG_\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"prognosis\"\u003ePrognosis\u003c/h2\u003e\n\u003cp\u003eNot everything should remain in the scripts tree. As part of this audit, each helper will be dealt with in one of several ways:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eStay in scripts tree\u003c/li\u003e\n\u003cli\u003eDeleted outright\u003c/li\u003e\n\u003cli\u003eMoved to a tool port\u003c/li\u003e\n\u003cli\u003eDeprecated\u003c/li\u003e\n\u003c/ul\u003e",
        "Nav":  "#specifications"
    },
    {
        "Path":  "/en/docs/specifications/versioning.html",
        "Name":  "versioning",
        "Source":  "\u003ch1 id=\"versioning-specification\"\u003eVersioning Specification\u003c/h1\u003e\n\u003ch2 id=\"glossary\"\u003eGlossary\u003c/h2\u003e\n\u003cp\u003eSome of the terms used in this document have similar meaning when discussed by the community, and because of that, they can cause confusion and ambiguity. To solve this issue, we will assign specific meaning to these terms and try to keep a consistent usage through the document.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLibrary\u003c/strong\u003e: A piece of software (source code, binary files, documentation, license, etc.) that is intended to be reused by other software.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePackage\u003c/strong\u003e: A package can contain a library, collection of libraries, build scripts, software tools, or other components necessary for their use. The goal of vcpkg is to facilitate the installation of these packages in the user\u0027s environment.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePort\u003c/strong\u003e: A vcpkg specific term, a port contains:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMetadata about a package: package version, supported features, dependencies, etc.\u003c/li\u003e\n\u003cli\u003eInstructions to acquire, build if necessary, and install the package.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"1-enabling-package-versioning\"\u003e1 Enabling package versioning\u003c/h2\u003e\n\u003cp\u003eOn launch, the versioning feature will be disabled by default. Users can enable this feature by setting the \u003ccode\u003eversions\u003c/code\u003e feature flag.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evcpkg --feature-flags=versions install\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"11-proposed-experience\"\u003e1.1 Proposed experience\u003c/h3\u003e\n\u003cp\u003eThis feature requires the use of manifests to declare project dependencies. To allow versioning, the following features are added to manifests:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAbility to declare a package\u0027s versioning scheme.\u003c/li\u003e\n\u003cli\u003eAbility to declare version constraints on dependencies.\u003c/li\u003e\n\u003cli\u003eAbility for a top-level manifest to override all other version constraints.\u003c/li\u003e\n\u003cli\u003eAbility to declare a baseline for all versions.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample: A manifeset (\u003ccode\u003evcpkg.json\u003c/code\u003e) using versioning features.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"versions-test\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": [\"fmt\", {\"name\": \"zlib\", \"version\u0026gt;=\": \"1.2.11\"}],\n  \"$x-default-baseline\": \"9fd3bd594f41afb8747e20f6ac9619f26f333cbe\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe example above shows some new manifest properties:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"version\"\u003c/code\u003e: Declares a version using a dot-separated versioning scheme (\u003ccode\u003e1.0.0\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"version\u0026gt;=\"\u003c/code\u003e: Declares a minimum version constraint on package \u003ccode\u003ezlib\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\"$x-default-baseline\"\u003c/code\u003e: Declares a baseline version for all packages.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAll these new features are described in more detail in this document.\u003c/p\u003e\n\u003ch2 id=\"2-specifying-package-versions\"\u003e2 Specifying package versions\u003c/h2\u003e\n\u003cp\u003eThrough the years, C++ software authors have adopted multiple versioning schemes and practices that sometimes conflict between each other. On vcpkg, the most recurrent versioning schemes found are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSemantic versions\u003c/li\u003e\n\u003cli\u003eDates\u003c/li\u003e\n\u003cli\u003eRepository commits\u003c/li\u003e\n\u003cli\u003eArbitrary strings\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor vcpkg to achieve wide adoption and compatibility with existing projects, it is important that we respect the versioning schemes used by each of the packages contained in our ports catalog.\u003c/p\u003e\n\u003ch3 id=\"21-port-versions\"\u003e2.1 Port versions\u003c/h3\u003e\n\u003cp\u003ePackage versioning information is divided in two parts: a version string and a port version. \u003cbr /\u003e\nPort versions are a concept exclusive to vcpkg, they do not form part of a package???s upstream. But allow for versioning of the vcpkg ports themselves. \u003c/p\u003e\n\u003cp\u003ePackages can also include the port version as part of a version constraint by using the ???port-version??? property on their dependencies.\u003c/p\u003e\n\u003ch4 id=\"port-version\"\u003e\u003ccode\u003eport-version\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eAn integer value that increases each time a vcpkg-specific change is made to the port.  \u003c/p\u003e\n\u003cp\u003eThe rules for port versions are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eStart at 0 for the original version of the port,\u003c/li\u003e\n\u003cli\u003eincrease by 1 each time a vcpkg-specific change is made to the port that does not increase the version of the package,\u003c/li\u003e\n\u003cli\u003eand reset to 0 each time the version of the package is updated.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eDefaults to 0 if omitted.\u003c/p\u003e\n\u003ch3 id=\"22-package-versions\"\u003e2.2 Package versions\u003c/h3\u003e\n\u003cp\u003eVersions are an important part of a package???s upstream metadata. Ports in vcpkg should attempt to follow the versioning conventions used by the package???s authors. For that reason, when declaring a package???s version the appropriate scheme should be used.\u003c/p\u003e\n\u003cp\u003eEach versioning scheme defines their own rules on what is a valid version string and more importantly the rules for how to sort versions using the same scheme.\u003c/p\u003e\n\u003cp\u003eThe versioning schemes understood by vcpkg are:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth id=\"manifest_property\"\u003eManifest property\u003c/th\u003e\n\u003cth id=\"versioning_scheme\"\u003eVersioning scheme\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eversion\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eFor dot-separated numeric versions\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eversion-semver\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eFor SemVer compliant versions\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eversion-date\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eFor dates in the format YYYY-MM-DD\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eversion-string\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eFor arbitrary strings\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eA manifest must contain only one version declaration.\u003c/p\u003e\n\u003ch4 id=\"version\"\u003e\u003ccode\u003eversion\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eAccepts version strings that follow a relaxed, dot-separated-, semver-like scheme.\u003c/p\u003e\n\u003cp\u003eThe version is logically composed of dot-separated (\u003ccode\u003e.\u003c/code\u003e) numeric sections. Each section must contain an integer positive number with no leading zeroes.\u003c/p\u003e\n\u003cp\u003eThe regex pattern for this versioning scheme is: \u003ccode\u003e(0|[1-9]\\d*)(\\.(0|[1-9]\\d*))*\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSorting behavior\u003c/em\u003e: When comparing two versions, each section is compared from left to right by their numeric value, until the first difference is found. A version with the smallest set of sections takes precedence over another with a larger set of sections, given that all their preceding sections compare equally.\u003c/p\u003e\n\u003cp\u003eExample:  \u003cbr /\u003e\n\u003ccode\u003e0\u003c/code\u003e \u0026lt; \u003ccode\u003e0.1\u003c/code\u003e \u0026lt; \u003ccode\u003e0.1.0\u003c/code\u003e \u0026lt; \u003ccode\u003e1\u003c/code\u003e \u0026lt; \u003ccode\u003e1.0.0\u003c/code\u003e \u0026lt; \u003ccode\u003e1.0.1\u003c/code\u003e \u0026lt; \u003ccode\u003e1.1\u003c/code\u003e\u0026lt; \u003ccode\u003e2.0.0\u003c/code\u003e\u003c/p\u003e\n\u003ch4 id=\"version-semver\"\u003e\u003ccode\u003eversion-semver\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eAccepts version strings that follow semantic versioning conventions as described in the \u003ca href=\"https://semver.org/#semantic-versioning-specification-semver\"\u003esemantic versioning specification\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSorting behavior\u003c/em\u003e: Strings are sorted following the rules described in the semantic versioning specification.\u003c/p\u003e\n\u003cp\u003eExample: \u003cbr /\u003e\n\u003ccode\u003e1.0.0-1\u003c/code\u003e \u0026lt; \u003ccode\u003e1.0.0-alpha\u003c/code\u003e \u0026lt; \u003ccode\u003e1.0.0-beta\u003c/code\u003e \u0026lt; \u003ccode\u003e1.0.0\u003c/code\u003e \u0026lt; \u003ccode\u003e1.0.1\u003c/code\u003e \u0026lt; \u003ccode\u003e1.1.0\u003c/code\u003e\u003c/p\u003e\n\u003ch4 id=\"version-date\"\u003e\u003ccode\u003eversion-date\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eAccepts version strings that can be parsed to a date following the ISO-8601 format \u003ccode\u003eYYYY-MM-DD\u003c/code\u003e. Disambiguation identifiers are allowed in the form of dot-separated-, positive-, integer-numbers with no leading zeroes.\u003c/p\u003e\n\u003cp\u003eThe regex pattern for this versioning scheme is: \u003ccode\u003e\\d{4}-\\d{2}-\\d{2}(\\.(0|[1-9]\\d*))*\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSorting behavior\u003c/em\u003e: Strings are sorted first by their date part, then by numeric comparison of their disambiguation identifiers. Disambiguation identifiers follow the rules of the relaxed (version) scheme.\u003c/p\u003e\n\u003cp\u003eExamples:\u003cbr /\u003e\n\u003ccode\u003e2020-01-01\u003c/code\u003e \u0026lt; \u003ccode\u003e2020-01-01.1\u003c/code\u003e \u0026lt; \u003ccode\u003e2020-02-01.1.2\u003c/code\u003e \u0026lt; \u003ccode\u003e2020-02-01.1.3\u003c/code\u003e \u0026lt; \u003ccode\u003e2020-02-01\u003c/code\u003e\u003c/p\u003e\n\u003ch4 id=\"version-string\"\u003e\u003ccode\u003eversion-string\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eFor packages using version strings that do not fit any of the other schemes, it accepts most arbitrary strings, but some special characters like \u003ccode\u003e#\u003c/code\u003e are disallowed.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSorting behavior\u003c/em\u003e: No sorting is attempted on the version string itself. However, if the strings match exactly, the port versions can be compared and sorted.\u003c/p\u003e\n\u003cp\u003eExamples: \u003cbr /\u003e\n\u003ccode\u003eapple\u003c/code\u003e \u0026lt;\u0026gt; \u003ccode\u003eorange\u003c/code\u003e \u0026lt;\u0026gt; \u003ccode\u003eorange.2\u003c/code\u003e \u0026lt;\u0026gt; \u003ccode\u003eorange2\u003c/code\u003e  \u003cbr /\u003e\n\u003ccode\u003ewatermelon\u003c/code\u003e (\u003ccode\u003eport-version\u003c/code\u003e: 0) \u0026lt; \u003ccode\u003ewatermelon\u003c/code\u003e (\u003ccode\u003eport-version\u003c/code\u003e: 1)\u003c/p\u003e\n\u003ch5 id=\"example-manifests-using-different-versioning-schemes\"\u003eExample: Manifests using different versioning schemes\u003c/h5\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n    \"name\": \"openssl\",\n    \"version\": \"1.1.1\",\n    \"port-version\": 0\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n    \"name\": \"bzip2\",\n    \"version-semver\": \"1.0.8\",\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n    \"name\": \"abseil\",\n    \"version-date\": \"2020-03-03\",\n    \"port-version\": 8\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n    \"name\": \"d3dx12\",\n    \"version-string\": \"may2020\",\n    \"port-version\": 0\n}\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"3-specifying-dependency-versions\"\u003e3 Specifying dependency versions\u003c/h2\u003e\n\u003ch3 id=\"31-on-manifest-files\"\u003e3.1 On manifest files\u003c/h3\u003e\n\u003cp\u003eManifest files help users specify complex versioned dependency graphs in a declarative manner. In this document we define a top-level manifest as the manifest file written by a user to declare their project???s dependencies. This is opposed to a port???s manifest file, which is used by port???s to declare the dependencies of the package it contains.\u003c/p\u003e\n\u003cp\u003eThere are three mechanisms you can use in your manifest files to control which versions of your packages are installed: \u003cstrong\u003eversion constraints, registry baselines and overrides\u003c/strong\u003e.\u003c/p\u003e\n\u003ch4 id=\"version-constraints\"\u003eVersion constraints\u003c/h4\u003e\n\u003cp\u003eSpecifying a version constraint is the most direct way to control which version of a package is installed, in vcpkg you can declare minimum version constraints using the syntax \u003ccode\u003e\"version\u0026gt;=\": \"1.0.0\"\u003c/code\u003e.\u003c/p\u003e\n\u003ch4 id=\"registry-baseline\"\u003eRegistry baseline\u003c/h4\u003e\n\u003cp\u003eBaselines are used to set lower boundaries on package versions. A baseline effectively adds a minimum version constraint on all the packages declared in it.\u003c/p\u003e\n\u003cp\u003eBut what is a baseline?\u003c/p\u003e\n\u003cp\u003eIn the main registry, the baseline is a file located in \u003ccode\u003e${VCPKG_ROOT}/versions/baseline.json\u003c/code\u003e. This file contains a version declaration for each package in vcpkg. The format of this file is the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n    \"default\": [\n      {\n        ...\n        \"fmt\": { \"version-semver\": \"7.1.2\", \"port-version\": 0},\n        ...\n      }\n    ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe baseline file is tracked under source control. For any given revision of the registry, the versions declared in the baseline file must match the current versions of the ports in the registry at that revision.\u003c/p\u003e\n\u003cp\u003eOld revisions of vcpkg that do not contain a baseline file can still work with versioning. As a fallback, if no baseline is available at a given revision, vcpkg will use its local baseline file. If a local baseline file does not exist, the local version of the port will be used as the baseline version.\u003c/p\u003e\n\u003cp\u003eBaselines define a minimum version constraint an all packages contained in it.\u003c/p\u003e\n\u003cp\u003eFor example, if the baseline contains the entry:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e???fmt???: { ???version-semver???: ???7.1.2???, ???port-version???: 0 }\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA minimum version constraint will be added to \u003ccode\u003efmt\u003c/code\u003e so that vcpkg won???t install a version lower than \u003ccode\u003e7.1.2\u003c/code\u003e with port version \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\u003ch4 id=\"overrides\"\u003eOverrides\u003c/h4\u003e\n\u003cp\u003eDeclaring an override forces vcpkg to ignore all other constraints, both top-level and transitive constraints, and use the version specified in the override. This is useful for pinning exact versions and for resolving version conflicts.\u003c/p\u003e\n\u003ch2 id=\"4-version-constraints\"\u003e4 Version constraints\u003c/h2\u003e\n\u003ch3 id=\"41-declaring-a-baseline\"\u003e4.1 Declaring a baseline\u003c/h3\u003e\n\u003cp\u003eFor the initial implementation, the method to declare a baseline is to set the \u003ccode\u003e???$x-default-baseline???\u003c/code\u003e property.\u003c/p\u003e\n\u003cp\u003eThe use of \u003ccode\u003e???$x-default-baseline???\u003c/code\u003e is temporary and will very likely change in the future, as we work on implementing custom registries. \u003c/p\u003e\n\u003ch4 id=\"x-default-baseline\"\u003e\u003ccode\u003e$x-default-baseline\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eAccepts a Git commit ID. Vcpkg will try to find a baseline file in the given commit ID and use that to set the baseline versions (lower bound versions) of all declared dependencies.\u003c/p\u003e\n\u003cp\u003eWhen resolving version constraints for a package, vcpkg will look for a baseline version:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFirst by looking at the baseline file in the given commit ID.\u003c/li\u003e\n\u003cli\u003eIf the given commit ID does not contain a baseline file, vcpkg will fallback to use the local baseline file instead.\u003c/li\u003e\n\u003cli\u003eIf there???s no local baseline file, vcpkg will use the version currently available in the ports directory.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003eNOTE: If a baseline file is found, but it does not contain an entry for the package, the vcpkg invocation will fail.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"project\", \n  \"version\": \"1.0.0\",\n  \"dependencies\": [\"zlib\", \"fmt\"],\n  \"$x-default-baseline\":\"9fd3bd594f41afb8747e20f6ac9619f26f333cbe\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBaselines can be used without any other version constraints to obtain behavior close to using ???classic??? mode. \u003c/p\u003e\n\u003ch3 id=\"42-declaring-minimum-version-constraints\"\u003e4.2 Declaring minimum version constraints\u003c/h3\u003e\n\u003cp\u003eA minimum version requirement puts a lower boundary on the versions that can be used to satisfy a dependency. This means that any version that is newer than the requirement is valid (including major version changes).\u003c/p\u003e\n\u003cp\u003eVcpkg will use the oldest identified version that can satisfy all the version requirements in a build graph. Using a minimum version approach has the following advantages:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIs predictable and easy to understand.\u003c/li\u003e\n\u003cli\u003eUser controls when upgrades happen, as in, no upgrades are performed automatically when a new version is released.\u003c/li\u003e\n\u003cli\u003eAvoids using a SAT solver.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMinimum version requirements are expressed by using the \u003ccode\u003e\"version\u0026gt;=\"\u003c/code\u003e property in the dependencies list.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"project\",\n  \"version-semver\": \"1.0.0\",\n  \"dependencies\": [\n    { \"name\": \"zlib\", \"version\u0026gt;=\": \"1.2\" },\n    { \"name\": \"rapidjson\", \"version\u0026gt;=\": \"2020-02-01\" }\n  ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"43-declaring-port-version-constraints\"\u003e4.3 Declaring port version constraints\u003c/h3\u003e\n\u003cp\u003eTo be consistent with the minimum version approach, vcpkg uses the lowest available port version that matches the package version. There are many scenarios where a higher port version is desirable, e.g.: support for new platforms, fixing installation issues, among others.\u003c/p\u003e\n\u003cp\u003eAs part of the dependency object a port version can be specified. An error will be emitted if a non-existent port-version for the given package version is requested.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"project\",\n  \"version-semver\": \"1.0.0\",\n  \"dependencies\": [\n    { \"name\": \"zlib\", \"version\u0026gt;=\": \"1.2\" },\n    { \"name\": \"rapidjson\", \"version=\": \"2020-02-01\", \"port-version\": 2 }\n  ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"44-declaring-overrides\"\u003e4.4 Declaring overrides\u003c/h3\u003e\n\u003cp\u003eOverrides are declared as an array of package version declarations.\u003c/p\u003e\n\u003cp\u003eFor an override to take effect, the overridden package must form part of the dependency graph. That means that a dependency must be declared either by the top-level manifest or be part of a transitive dependency.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"project\", \n  \"version\": \"1.0.0\",\n  \"dependencies\": [\"cpprestsdk\"],\n  \"overrides\": [{\"name\":\"zlib\", \"version-semver\":\"1.2.10\"}],\n  \"$x-default-baseline\":\"9fd3bd594f41afb8747e20f6ac9619f26f333cbe\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the previous example, \u003ccode\u003ezlib\u003c/code\u003e is not a direct dependency of the project but it is a dependency for \u003ccode\u003ecpprestsdk\u003c/code\u003e, so the override takes effect forcing \u003ccode\u003ezlib\u003c/code\u003e to version \u003ccode\u003e1.2.10\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"5-design-considerations\"\u003e5 Design considerations\u003c/h2\u003e\n\u003ch3 id=\"51-constraint-resolution\"\u003e5.1 Constraint resolution\u003c/h3\u003e\n\u003cp\u003eGiven a manifest with a set of versioned dependencies, vcpkg will attempt to calculate a package installation plan that satisfies all the constraints. Constraints can be declared in the top-level manifest but can also be added transitively by indirect dependencies. \u003c/p\u003e\n\u003cp\u003eVcpkg roughly follows the steps below to compute an installation plan, the installation plan will either contain a valid set of package versions, or a list of version conflicts.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAdd all top-level constraints to the plan.\u003c/li\u003e\n\u003cli\u003eRecursively add transitive constraints to the plan.\u003c/li\u003e\n\u003cli\u003eEach time a constraint is added for a package, also add it???s baseline version as a minimum constraint.\u003c/li\u003e\n\u003cli\u003eEach time a constraint is added:\u003cul\u003e\n\u003cli\u003eIf an override exists for the package, select the version in the override.\u003c/li\u003e\n\u003cli\u003eOtherwise:\u003c/li\u003e\n\u003cli\u003eIf there is no previous version selected. \u003cul\u003e\n\u003cli\u003eSelect the minimal version that satisfies the constraint.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eIf there is a previous version selected:\u003cul\u003e\n\u003cli\u003eIf the versioning scheme of the new constraint does not match that of the previously selected version:\u003c/li\u003e\n\u003cli\u003eAdd a version conflict.\u003c/li\u003e\n\u003cli\u003eIf the constraint???s version is not comparable to the previously selected version. For example, comparing ???version-string: apple??? to ???version-string: orange???:\u003c/li\u003e\n\u003cli\u003eAdd a version conflict.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eIf the constraints version is higher than the previously selected version:\u003cul\u003e\n\u003cli\u003eSelect the highest version.\u003c/li\u003e\n\u003cli\u003eOtherwise, keep the previous selection.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eReview the plan:\u003cul\u003e\n\u003cli\u003eIf there are no conflicts, install the selected packages.\u003c/li\u003e\n\u003cli\u003eOtherwise, report the conflicts to the user.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"52-acquiring-port-versions\"\u003e5.2 Acquiring port versions\u003c/h3\u003e\n\u003cp\u003eAlthough the concept of package versions has always been present in vcpkg, the concept of version constraints has been not. \u003c/p\u003e\n\u003cp\u003eWith the introduction of versioning constraints, it is now possible that a package depends on a port version that does not match the one available locally.  This raises a problem as vcpkg needs to know how to acquire the port files for the requested version.\u003c/p\u003e\n\u003cp\u003eTo solve this problem, a new set of metadata needs to be introduced. This specification proposes a that a new \"versions\" folder is added as part of a registry. In the main vcpkg registry, this means a new root level versions directory. \u003c/p\u003e\n\u003cp\u003eThe versions directory, from here on referred as the versions database, will contain JSON files for each one of the ports available in the registry. Each file will list all the versions available for a package and contain a Git tree-ish object that vcpkg can check out to obtain that version???s portfiles. \u003c/p\u003e\n\u003cp\u003eAs part of the versioning implementation, a generator for these database files will be implemented. The generator will extract from our repository???s Git history, all the versions of each port that had been available at any moment in time and compile them into these database files. \u003c/p\u003e\n\u003cp\u003eExample: generated \u003ccode\u003ezlib.json\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"versions\": [\n    {\n      \"git-tree\": \"2dfc991c739ab9f2605c2ad91a58a7982eb15687\",\n      \"version-string\": \"1.2.11\",\n      \"port-version\": 9\n    },\n    { ???$truncated for brevity??? },\n    {\n      \"git-tree\": \"a516e5ee220c8250f21821077d0e3dd517f02631\",\n      \"version-string\": \"1.2.10\",\n      \"port-version\": 0\n    },\n    {\n      \"git-tree\": \"3309ec82cd96d752ff890c441cb20ef49b52bf94\",\n      \"version-string\": \"1.2.8\",\n      \"port-version\": 0\n    }\n  ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor each port, its corresponding versions file should be located in  \u003ccode\u003eversions/{first letter of port name}-/{port name}.json\u003c/code\u003e. For example, zlib???s version file will be located in \u003ccode\u003eversions/z-/zlib.json\u003c/code\u003e.\u003cbr /\u003e\nAside from port version files, the current baseline file is located in \u003ccode\u003eversions/baseline.json\u003c/code\u003e. \u003c/p\u003e",
        "Nav":  "#specifications"
    },
    {
        "Path":  "/en/docs/users/android.html",
        "Name":  "android",
        "Source":  "\u003ch1 id=\"vcpkg-and-android\"\u003eVcpkg and Android\u003c/h1\u003e\n\u003cp\u003eAndroid is not officialy supported, and there are no official android triplets at the moment.\u003c/p\u003e\n\u003cp\u003eHowever, some packages can compile to Android, and the situation is improving: see the list of \u003ca href=\"https://github.com/Microsoft/vcpkg/pulls?q=+android+\"\u003ePR related to Android\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"android-build-requirements\"\u003eAndroid build requirements\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eDownload the \u003ca href=\"https://developer.android.com/ndk/downloads/\"\u003eandroid ndk\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eSet environment variable \u003ccode\u003eANDROID_NDK_HOME\u003c/code\u003e to your android ndk installation. \u003cbr /\u003e\nFor example:\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class=\"bash language-bash\"\u003eexport ANDROID_NDK_HOME=/home/your-account/Android/Sdk/ndk-bundle\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOr:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"bash language-bash\"\u003eexport ANDROID_NDK_HOME=/home/your-account/Android/android-ndk-r21b\u003c/code\u003e\u003c/pre\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cp\u003eInstall \u003ca href=\"https://github.com/microsoft/vcpkg\"\u003evcpkg\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eSet environment variable \u003ccode\u003eVCPKG_ROOT\u003c/code\u003e to your vcpkg installation.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode class=\"bash language-bash\"\u003eexport VCPKG_ROOT=/path/to/vcpkg\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"create-the-android-triplets\"\u003eCreate the android triplets\u003c/h2\u003e\n\u003ch3 id=\"android-abi-and-corresponding-vcpkg-triplets\"\u003eAndroid ABI and corresponding vcpkg triplets\u003c/h3\u003e\n\u003cp\u003eThere are four different Android ABI, each of which maps to \u003cbr /\u003e\na vcpkg triplet. The following table outlines the mapping from vcpkg architectures to android architectures\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth id=\"vcpkg_target_triplet\"\u003eVCPKG_TARGET_TRIPLET\u003c/th\u003e\n\u003cth id=\"android_abi\"\u003eANDROID_ABI\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003earm64-android\u003c/td\u003e\n\u003ctd\u003earm64-v8a\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003earm-android\u003c/td\u003e\n\u003ctd\u003earmeabi-v7a\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ex64-android\u003c/td\u003e\n\u003ctd\u003ex86_64\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ex86-android\u003c/td\u003e\n\u003ctd\u003ex86\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"create-the-android-triplets-1\"\u003eCreate the android triplets\u003c/h3\u003e\n\u003cp\u003eYou can copy-paste the script below to populate them, and adjust them to your needs if required.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"bash language-bash\"\u003ecd $VCPKG_ROOT\n\necho \"\nset(VCPKG_TARGET_ARCHITECTURE arm)\nset(VCPKG_CRT_LINKAGE dynamic)\nset(VCPKG_LIBRARY_LINKAGE dynamic)\nset(VCPKG_CMAKE_SYSTEM_NAME Android)\n\" \u0026gt; triplets/community/arm-android.cmake\n\necho \"\nset(VCPKG_TARGET_ARCHITECTURE arm64)\nset(VCPKG_CRT_LINKAGE dynamic)\nset(VCPKG_LIBRARY_LINKAGE dynamic)\nset(VCPKG_CMAKE_SYSTEM_NAME Android)\n\" \u0026gt; triplets/community/arm64-android.cmake\n\necho \"\nset(VCPKG_TARGET_ARCHITECTURE x86)\nset(VCPKG_CRT_LINKAGE dynamic)\nset(VCPKG_LIBRARY_LINKAGE dynamic)\nset(VCPKG_CMAKE_SYSTEM_NAME Android)\n\" \u0026gt; triplets/community/x86-android.cmake\n\necho \"\nset(VCPKG_TARGET_ARCHITECTURE x64)\nset(VCPKG_CRT_LINKAGE dynamic)\nset(VCPKG_LIBRARY_LINKAGE dynamic)\nset(VCPKG_CMAKE_SYSTEM_NAME Android)\n\" \u0026gt; triplets/community/x64-android.cmake\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"install-libraries-for-android-using-vcpkg\"\u003eInstall libraries for Android using vcpkg\u003c/h2\u003e\n\u003cp\u003eExample for jsoncpp:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"bash language-bash\"\u003ecd $VCPKG_ROOT\n\n# specify the triplet like this\n./vcpkg install jsoncpp --triplet arm-android   \n# or like this\n./vcpkg install jsoncpp:arm64-android           \n./vcpkg install jsoncpp:x86-android\n./vcpkg install jsoncpp:x64-android\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"consume-libraries-using-vpckg-cmake-and-the-android-toolchain\"\u003eConsume libraries using vpckg, cmake and the android toolchain\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eCombine vcpkg and Android toolchains\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003evcpkg and android both provide dedicated toolchains:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"bash language-bash\"\u003evcpkg_toolchain_file=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake\nandroid_toolchain_file=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen using vcpkg, the vcpkg toolchain shall be specified first. \u003c/p\u003e\n\u003cp\u003eHowever, vcpkg provides a way to preload and additional toolchain, with the VCPKG_CHAINLOAD_TOOLCHAIN_FILE option. \u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"bash language-bash\"\u003ecmake \\\n  -DCMAKE_TOOLCHAIN_FILE=$vcpkg_toolchain_file \\\n  -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=$android_toolchain_file \\\n  ...\u003c/code\u003e\u003c/pre\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003eSpecifiy the android abi and vcpkg triplet\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen compiling for android, you need to select a matching \"android abi\" / \"vcpkg triplet\" pair.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"bash language-bash\"\u003eandroid_abi=armeabi-v7a\nvcpkg_target_triplet=arm-android\n\ncmake \n  ...\n  -DVCPKG_TARGET_TRIPLET=$vcpkg_target_triplet \\\n  -DANDROID_ABI=$android_abi\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"test-on-an-example\"\u003eTest on an example\u003c/h3\u003e\n\u003cp\u003eThe folder \u003ca href=\"../examples/vcpkg_android_example_cmake\"\u003edocs/examples/vcpkg_android_example_cmake\u003c/a\u003e provides a working example, with an android library that consumes the jsoncpp library:\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eDetails\u003c/em\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ca href=\"../examples/vcpkg_android_example_cmake/CMakeLists.txt\"\u003eCMakeLists\u003c/a\u003e simply uses \u003ccode\u003efind_package\u003c/code\u003e and \u003ccode\u003etarget_link_library\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ca href=\"../examples/vcpkg_android_example_cmake/compile.sh\"\u003ecompile.sh\u003c/a\u003e script enables you to select any matching pair of \"android abi\" /  \"vcpkg triplet\" and to test the compilation\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe dummy \u003ca href=\"../examples/vcpkg_android_example_cmake/my_lib.cpp\"\u003emy_lib.cpp\u003c/a\u003e file uses the jsoncpp library\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003eNote\u003c/em\u003e: this example only compiles an Android library, as the compilation of a full fledged Android App is beyond the scope of this document.\u003c/p\u003e\n\u003ch3 id=\"test-on-an-example-using-vcpkg_androidcmakeexamplesvcpkg_android_example_cmake_scriptcmakevcpkg_androidcmake\"\u003eTest on an example, using \u003ca href=\"../examples/vcpkg_android_example_cmake_script/cmake/vcpkg_android.cmake\"\u003evcpkg_android.cmake\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThe folder \u003ca href=\"../examples/vcpkg_android_example_cmake_script\"\u003edocs/examples/vcpkg_android_example_cmake_script\u003c/a\u003e provides the same example, and uses a cmake script in order to simplify the usage.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eDetails\u003c/em\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe main \u003ca href=\"../examples/vcpkg_android_example_cmake_script/CMakeLists.txt\"\u003eCMakeLists\u003c/a\u003e loads \u003ca href=\"../examples/vcpkg_android_example_cmake_script/cmake/vcpkg_android.cmake\"\u003evcpkg_android.cmake\u003c/a\u003e if the flag \u003ccode\u003eVCPKG_TARGET_ANDROID\u003c/code\u003e is set:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003eif (VCPKG_TARGET_ANDROID)\n    include(\"cmake/vcpkg_android.cmake\")\nendif()\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eImportant: place these lines before calling project() !\u003c/em\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ca href=\"../examples/vcpkg_android_example_cmake_script/compile.sh\"\u003ecompile.sh\u003c/a\u003e script shows that it is then possible to compile for android using a simple cmake invocation, for example:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"bash language-bash\"\u003ecmake .. -DVCPKG_TARGET_ANDROID=ON -DANDROID_ABI=armeabi-v7a\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"consume-libraries-using-vpckg-and-android-prefab-archives-aar-files\"\u003eConsume libraries using vpckg, and Android prefab Archives (AAR files)\u003c/h2\u003e\n\u003cp\u003eSee \u003ca href=\"../specifications/prefab.md\"\u003eprefab.md\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#users"
    },
    {
        "Path":  "/en/docs/users/binarycaching.html",
        "Name":  "binarycaching",
        "Source":  "\u003ch1 id=\"binary-caching\"\u003eBinary Caching\u003c/h1\u003e\n\u003cp\u003eBinary caching is vcpkg\u0027s method for reusing package builds between projects and between machines. Think of it as a \"package restore accelerator\" that gives you the same results as though you built from source. Each build is packaged independently, so changing one library only requires rebuilding consuming libraries.\u003c/p\u003e\n\u003cp\u003eIf your CI provider offers a native \"caching\" function, we recommend using both methods for the most performant results.\u003c/p\u003e\n\u003cp\u003eIn-tool help is available via \u003ccode\u003evcpkg help binarycaching\u003c/code\u003e and a \u003ca href=\"#Configuration\"\u003edetailed configuration reference is provided below\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"ci-examples\"\u003eCI Examples\u003c/h2\u003e\n\u003cp\u003eIf your CI system of choice is not listed, we welcome PRs to add them!\u003c/p\u003e\n\u003ch3 id=\"github-packages\"\u003eGitHub Packages\u003c/h3\u003e\n\u003cp\u003eTo use vcpkg with GitHub Packages, we recommend using the \u003ccode\u003eNuGet\u003c/code\u003e backend.\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003e\u003cstrong\u003eNOTE 2020-09-21\u003c/strong\u003e: GitHub\u0027s hosted agents come with an older, pre-installed copy of vcpkg on the path that does not support the latest binary caching. This means that direct calls to \u003ccode\u003ebootstrap-vcpkg\u003c/code\u003e or \u003ccode\u003evcpkg\u003c/code\u003e without a path prefix may call an unintended vcpkg instance. We recommend taking the following two steps to avoid issues if you want to use your own copy of vcpkg:\u003c/p\u003e\n  \u003col\u003e\n  \u003cli\u003eRun the equivalent of \u003ccode\u003erm -rf \"$VCPKG_INSTALLATION_ROOT\"\u003c/code\u003e using \u003ccode\u003eshell: \u0027bash\u0027\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eAlways call \u003ccode\u003evcpkg\u003c/code\u003e and \u003ccode\u003ebootstrap-vcpkg\u003c/code\u003e with a path prefix, such as \u003ccode\u003e./vcpkg\u003c/code\u003e, \u003ccode\u003evcpkg/vcpkg\u003c/code\u003e, \u003ccode\u003e.\\bootstrap-vcpkg.bat\u003c/code\u003e, etc\u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class=\"yaml language-yaml\"\u003e# actions.yaml\n#\n# In this example, vcpkg has been added as a submodule (`git submodule add https://github.com/Microsoft/vcpkg`).\nenv:\n  VCPKG_BINARY_SOURCES: \u0027clear;nuget,GitHub,readwrite\u0027\n\nmatrix:\n  os: [\u0027windows-2019\u0027, \u0027ubuntu-20.04\u0027]\n  include:\n    - os: \u0027windows-2019\u0027\n      triplet: \u0027x86-windows\u0027\n      mono: \u0027\u0027\n    - os: \u0027ubuntu-20.04\u0027\n      triplet: \u0027x64-linux\u0027\n      # To run `nuget.exe` on non-Windows platforms, we must use `mono`.\n      mono: \u0027mono\u0027\n\nsteps:\n  # This step assumes `vcpkg` has been bootstrapped (run `./vcpkg/bootstrap-vcpkg`)\n  - name: \u0027Setup NuGet Credentials\u0027\n    shell: \u0027bash\u0027\n    # Replace \u0026lt;OWNER\u0026gt; with your organization name\n    run: \u0026gt;\n      ${{ matrix.mono }} `./vcpkg/vcpkg fetch nuget | tail -n 1`\n      sources add\n      -source \"https://nuget.pkg.github.com/\u0026lt;OWNER\u0026gt;/index.json\"\n      -storepasswordincleartext\n      -name \"GitHub\"\n      -username \"\u0026lt;OWNER\u0026gt;\"\n      -password \"${{ secrets.GITHUB_TOKEN }}\"\n\n  # Omit this step if you\u0027re using manifests\n  - name: \u0027vcpkg package restore\u0027\n    shell: \u0027bash\u0027\n    run: \u0026gt;\n      ./vcpkg/vcpkg install sqlite3 cpprestsdk --triplet ${{ matrix.triplet }}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you\u0027re using \u003ca href=\"../specifications/manifests.md\"\u003emanifests\u003c/a\u003e, you can omit the \u003ccode\u003evcpkg package restore\u003c/code\u003e step: it will be run automatically as part of your build.\u003c/p\u003e\n\u003cp\u003eMore information about GitHub Packages\u0027 NuGet support is available on \u003ca href=\"https://docs.github.com/en/packages/using-github-packages-with-your-projects-ecosystem/configuring-dotnet-cli-for-use-with-github-packages\"\u003eGitHub Docs\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"azure-devops-artifacts\"\u003eAzure DevOps Artifacts\u003c/h3\u003e\n\u003cp\u003eTo use vcpkg with Azure DevOps Artifacts, we recommend using the \u003ccode\u003eNuGet\u003c/code\u003e backend.\u003c/p\u003e\n\u003cp\u003eFirst, you need to ensure Artifacts has been enabled on your DevOps instance; this can be done by an Administrator through \u003ccode\u003eProject Settings \u0026gt; General \u0026gt; Overview \u0026gt; Azure DevOps Services \u0026gt; Artifacts\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNext, you will need to create a feed for your project; see the \u003ca href=\"https://docs.microsoft.com/en-us/azure/devops/artifacts/get-started-nuget?view=azure-devops\"\u003eAzure DevOps Artifacts Documentation\u003c/a\u003e for more information. Your feed URL will be an \u003ccode\u003ehttps://\u003c/code\u003e link ending with \u003ccode\u003e/nuget/v3/index.json\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"yaml language-yaml\"\u003e# azure-pipelines.yaml\nvariables:\n- name: VCPKG_BINARY_SOURCES\n  value: \u0027clear;nuget,\u0026lt;FEED_URL\u0026gt;,readwrite\u0027\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you are using custom agents with a non-Windows OS, you will need to install Mono to run \u003ccode\u003enuget.exe\u003c/code\u003e (\u003ccode\u003eapt install mono-complete\u003c/code\u003e, \u003ccode\u003ebrew install mono\u003c/code\u003e, etc).\u003c/p\u003e\n\u003cp\u003eMore information about Azure DevOps Artifacts\u0027 NuGet support is available in the \u003ca href=\"https://docs.microsoft.com/en-us/azure/devops/artifacts/get-started-nuget?view=azure-devops\"\u003eAzure DevOps Artifacts Documentation\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"azure-blob-storage-experimental\"\u003eAzure Blob Storage (experimental)\u003c/h3\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eNote: This is an experimental feature and may change or be removed at any time\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eVcpkg supports interfacing with Azure Blob Storage via the \u003ccode\u003ex-azblob\u003c/code\u003e source type.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ex-azblob,\u0026lt;baseuri\u0026gt;,\u0026lt;sas\u0026gt;[,\u0026lt;rw\u0026gt;]\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFirst, you need to create an Azure Storage Account as well as a container (\u003ca href=\"https://docs.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-portal\"\u003eQuick Start Documentation\u003c/a\u003e].\u003c/p\u003e\n\u003cp\u003eNext, you will need to create a Shared Access Signature, which can be done from the storage account under Settings -\u0026gt; Shared access signature. This SAS will need:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAllowed services: Blob\u003c/li\u003e\n\u003cli\u003eAllowed resource types: Object\u003c/li\u003e\n\u003cli\u003eAllowed permissions: Read, Create (if using \u003ccode\u003ewrite\u003c/code\u003e or \u003ccode\u003ereadwrite\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe blob endpoint plus the container must be passed as the \u003ccode\u003e\u0026lt;baseuri\u0026gt;\u003c/code\u003e and the generated SAS without the \u003ccode\u003e?\u003c/code\u003e prefix must be passed as the \u003ccode\u003e\u0026lt;sas\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ex-azblob,https://\u0026lt;storagename\u0026gt;.blob.core.windows.net/\u0026lt;containername\u0026gt;,sv=2019-12-12\u0026amp;ss=b\u0026amp;srt=o\u0026amp;sp=rcx\u0026amp;se=2020-12-31T06:20:36Z\u0026amp;st=2020-12-30T22:20:36Z\u0026amp;spr=https\u0026amp;sig=abcd,readwrite\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eVcpkg will attempt to avoid revealing the SAS during normal operations, however:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eIt will be printed in full if \u003ccode\u003e--debug\u003c/code\u003e is passed\u003c/li\u003e\n\u003cli\u003eIt will be passed as a command line parameter to subprocesses, such as \u003ccode\u003ecurl.exe\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"configuration\"\u003eConfiguration\u003c/h2\u003e\n\u003cp\u003eBinary caching is configured via a combination of defaults, the environment variable \u003ccode\u003eVCPKG_BINARY_SOURCES\u003c/code\u003e (set to \u003ccode\u003e\u0026lt;source\u0026gt;;\u0026lt;source\u0026gt;;...\u003c/code\u003e), and the command line option \u003ccode\u003e--binarysource=\u0026lt;source\u0026gt;\u003c/code\u003e. Source options are evaluated in order of defaults, then environment, then command line. Binary caching can be completely disabled by passing \u003ccode\u003e--binarysource=clear\u003c/code\u003e as the last command line option.\u003c/p\u003e\n\u003cp\u003eBy default, zip-based archives will be cached at the first valid location of:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWindows\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003e%VCPKG_DEFAULT_BINARY_CACHE%\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e%LOCALAPPDATA%\\vcpkg\\archives\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e%APPDATA%\\vcpkg\\archives\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eNon-Windows\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003e$VCPKG_DEFAULT_BINARY_CACHE\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$XDG_CACHE_HOME/vcpkg/archives\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$HOME/.cache/vcpkg/archives\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"valid-source-strings-source\"\u003eValid source strings (\u003ccode\u003e\u0026lt;source\u0026gt;\u003c/code\u003e)\u003c/h3\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth id=\"form\"\u003eform\u003c/th\u003e\n\u003cth id=\"description\"\u003edescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eclear\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eRemoves all previous sources (including the default)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003edefault[,\u0026lt;rw\u0026gt;]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eAdds the default file-based location\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003efiles,\u0026lt;path\u0026gt;[,\u0026lt;rw\u0026gt;]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eAdds a custom file-based location\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003enuget,\u0026lt;uri\u0026gt;[,\u0026lt;rw\u0026gt;]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eAdds a NuGet-based source; equivalent to the \u003ccode\u003e-Source\u003c/code\u003e parameter of the NuGet CLI\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003enugetconfig,\u0026lt;path\u0026gt;[,\u0026lt;rw\u0026gt;]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eAdds a NuGet-config-file-based source; equivalent to the \u003ccode\u003e-Config\u003c/code\u003e parameter of the NuGet CLI. This config should specify \u003ccode\u003edefaultPushSource\u003c/code\u003e for uploads.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ex-azblob,\u0026lt;baseuri\u0026gt;,\u0026lt;sas\u0026gt;[,\u0026lt;rw\u0026gt;]\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003eExperimental: will change or be removed without warning\u003c/strong\u003e\u003cbr\u003e Adds an Azure Blob Storage source. Uses Shared Access Signature validation. URL should include the container path.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003einteractive\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eEnables interactive credential management for NuGet (for debugging; requires \u003ccode\u003e--debug\u003c/code\u003e on the command line)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThe \u003ccode\u003e\u0026lt;rw\u0026gt;\u003c/code\u003e optional parameter for certain sources controls whether they will be consulted for\u003cbr /\u003e\ndownloading binaries (\u003ccode\u003eread\u003c/code\u003e), whether on-demand builds will be uploaded to that remote (\u003ccode\u003ewrite\u003c/code\u003e), or both (\u003ccode\u003ereadwrite\u003c/code\u003e).\u003c/p\u003e\n\u003ch3 id=\"nuget-provider-configuration\"\u003eNuget Provider Configuration\u003c/h3\u003e\n\u003ch4 id=\"credentials\"\u003eCredentials\u003c/h4\u003e\n\u003cp\u003eMany NuGet servers require additional credentials to access. The most flexible way to supply credentials is via the \u003ccode\u003enugetconfig\u003c/code\u003e provider with a custom \u003ccode\u003enuget.config\u003c/code\u003e file. See \u003ca href=\"https://docs.microsoft.com/en-us/nuget/consume-packages/consuming-packages-authenticated-feeds\"\u003ehttps://docs.microsoft.com/en-us/nuget/consume-packages/consuming-packages-authenticated-feeds\u003c/a\u003e for more information on authenticating via \u003ccode\u003enuget.config\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eHowever, it is still possible to authenticate against many servers using NuGet\u0027s built-in credential providers or via customizing your environment\u0027s default \u003ccode\u003enuget.config\u003c/code\u003e. The default config can be extended via nuget client calls such as\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enuget sources add -Name MyRemote -Source https://... -Username $user -Password $pass\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand then passed to vcpkg via \u003ccode\u003e--binarysource=nuget,MyRemote,readwrite\u003c/code\u003e. You can get a path to the precise copy of NuGet used by vcpkg by running \u003ccode\u003evcpkg fetch nuget\u003c/code\u003e, which will report something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ vcpkg fetch nuget\n/vcpkg/downloads/tools/nuget-5.5.1-linux/nuget.exe\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNon-Windows users will need to call this through mono via \u003ccode\u003emono /path/to/nuget.exe sources add ...\u003c/code\u003e.\u003c/p\u003e\n\u003ch5 id=\"credential-example-for-azure-dev-ops\"\u003eCredential Example for Azure Dev Ops\u003c/h5\u003e\n\u003cpre\u003e\u003ccode class=\"bash language-bash\"\u003e# On Linux or OSX\n$ mono `vcpkg fetch nuget | tail -n1` sources add \\\n  -name ADO \\\n  -Source https://pkgs.dev.azure.com/$ORG/_packaging/$FEEDNAME/nuget/v3/index.json \\\n  -Username $USERNAME \\\n  -Password $PAT\n$ export VCPKG_BINARY_SOURCES=\"nuget,ADO,readwrite\"\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"powershell language-powershell\"\u003e# On Windows Powershell\nPS\u0026gt; \u0026amp; $(vcpkg fetch nuget | select -last 1) sources add `\n  -name ADO `\n  -Source https://pkgs.dev.azure.com/$ORG/_packaging/$FEEDNAME/nuget/v3/index.json `\n  -Username $USERNAME `\n  -Password $PAT\nPS\u0026gt; $env:VCPKG_BINARY_SOURCES=\"nuget,ADO,readwrite\"\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe recommend using a Personal Access Token (PAT) as the password for maximum security. You can generate a PAT in User Settings -\u0026gt; Personal Access Tokens or \u003ccode\u003ehttps://dev.azure.com/$ORG/_usersSettings/tokens\u003c/code\u003e.\u003c/p\u003e\n\u003ch4 id=\"metadatarepository\"\u003e\u003ccode\u003emetadata.repository\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003enuget\u003c/code\u003e and \u003ccode\u003enugetconfig\u003c/code\u003e source providers additionally respect certain environment variables while generating nuget packages. The \u003ccode\u003emetadata.repository\u003c/code\u003e field of any packages will be generated as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    \u0026lt;repository type=\"git\" url=\"${VCPKG_NUGET_REPOSITORY}\"/\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    \u0026lt;repository type=\"git\"\n                url=\"${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git\"\n                branch=\"${GITHUB_REF}\"\n                commit=\"${GITHUB_SHA}\"/\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eif the appropriate environment variables are defined and non-empty. This is specifically used to associate packages in GitHub Packages with the \u003cem\u003ebuilding\u003c/em\u003e project and not intended to associate with the original package sources.\u003c/p\u003e\n\u003ch4 id=\"nugets-cache\"\u003eNuGet\u0027s cache\u003c/h4\u003e\n\u003cp\u003eNuGet\u0027s cache is not used by default. To use it for every nuget-based source, set the \u003ca href=\"config-environment.md\"\u003eenvironment variable\u003c/a\u003e \u003ccode\u003eVCPKG_USE_NUGET_CACHE\u003c/code\u003e to \u003ccode\u003etrue\u003c/code\u003e (case-insensitive) or \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"implementation-notes-internal-details-subject-to-change-without-notice\"\u003eImplementation Notes (internal details subject to change without notice)\u003c/h2\u003e\n\u003cp\u003eBinary caching relies on hashing everything that contributes to a particular package build. This includes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEvery file in the port directory\u003c/li\u003e\n\u003cli\u003eThe triplet file and name\u003c/li\u003e\n\u003cli\u003eThe C++ compiler executable\u003c/li\u003e\n\u003cli\u003eThe C compiler executable\u003c/li\u003e\n\u003cli\u003eThe set of features selected\u003c/li\u003e\n\u003cli\u003eEvery dependency\u0027s package hash (note: this is that package\u0027s input hash, not contents)\u003c/li\u003e\n\u003cli\u003eAll helper scripts referenced by \u003ccode\u003eportfile.cmake\u003c/code\u003e (heuristic)\u003c/li\u003e\n\u003cli\u003eThe version of CMake used\u003c/li\u003e\n\u003cli\u003eThe contents of any environment variables listed in \u003ccode\u003eVCPKG_ENV_PASSTHROUGH\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eThe hash of the toolchain file (builtin or \u003ccode\u003eVCPKG_CHAINLOAD_TOOLCHAIN_FILE\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eDespite this extensive list, it is possible to defeat the cache and introduce nondeterminism. If you have additional details that you\u0027d like to be tracked, the easiest resolution is to generate a triplet file with your additional information in a comment. That additional information will be included in the package\u0027s input set and ensure a unique universe of binaries.\u003c/p\u003e\n\u003cp\u003eThe hashes used are stored in the package and in the current installed directory at \u003ccode\u003e/share/\u0026lt;port\u0026gt;/vcpkg_abi_info.txt\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe original specification for binary caching is available \u003ca href=\"../specifications/binarycaching.md\"\u003ehere\u003c/a\u003e.\u003c/p\u003e",
        "Nav":  "#users"
    },
    {
        "Path":  "/en/docs/users/config-environment.html",
        "Name":  "Config Environment",
        "Source":  "\u003ch2 id=\"environment-and-configuration\"\u003eEnvironment and Configuration\u003c/h2\u003e\n\u003ch3 id=\"environment-variables\"\u003eEnvironment Variables\u003c/h3\u003e\n\u003ch4 id=\"vcpkg_downloads\"\u003eVCPKG_DOWNLOADS\u003c/h4\u003e\n\u003cp\u003eThis environment variable can be set to an existing directory to use for storing downloads instead of the internal\u003cbr /\u003e\n\u003ccode\u003edownloads/\u003c/code\u003e directory. It should always be set to an absolute path.\u003c/p\u003e\n\u003ch4 id=\"vcpkg_feature_flags\"\u003eVCPKG_FEATURE_FLAGS\u003c/h4\u003e\n\u003cp\u003eThis environment variable can be set to a comma-separated list of off-by-default features in vcpkg. These features are\u003cbr /\u003e\nsubject to change without notice and should be considered highly unstable.\u003c/p\u003e\n\u003cp\u003eNon-exhaustive list of off-by-default features:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebinarycaching\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emanifest\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"editor\"\u003eEDITOR\u003c/h4\u003e\n\u003cp\u003eThis environment variable can be set to the full path of an executable to be used for \u003ccode\u003evcpkg edit\u003c/code\u003e. Please see\u003cbr /\u003e\n\u003ccode\u003evcpkg help edit\u003c/code\u003e for command-specific help.\u003c/p\u003e\n\u003ch4 id=\"vcpkg_root\"\u003eVCPKG_ROOT\u003c/h4\u003e\n\u003cp\u003eThis environment variable can be set to a directory to use as the root of the vcpkg instance. Note that mixing vcpkg\u003cbr /\u003e\nrepo versions and executable versions can cause issues.\u003c/p\u003e\n\u003ch4 id=\"vcpkg_visual_studio_path\"\u003eVCPKG_VISUAL_STUDIO_PATH\u003c/h4\u003e\n\u003cp\u003eThis environment variable can be set to the full path to a Visual Studio instance on the machine. This Visual Studio instance\u003cbr /\u003e\nwill be used if the triplet does not override it via the \u003ca href=\"triplets.md#VCPKG_VISUAL_STUDIO_PATH\"\u003e\u003ccode\u003eVCPKG_VISUAL_STUDIO_PATH\u003c/code\u003e triplet setting\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eExample: \u003ccode\u003eD:\\2017\u003c/code\u003e\u003c/p\u003e\n\u003ch4 id=\"vcpkg_default_triplet\"\u003eVCPKG_DEFAULT_TRIPLET\u003c/h4\u003e\n\u003cp\u003eThis environment variable can be set to a triplet name which will be used for unqualified triplet references in command lines.\u003c/p\u003e\n\u003ch4 id=\"vcpkg_overlay_ports\"\u003eVCPKG_OVERLAY_PORTS\u003c/h4\u003e\n\u003cp\u003eThis environment variable allows users to override ports with alternate versions according to the\u003cbr /\u003e\n\u003ca href=\"../specifications/ports-overlay.md\"\u003eports overlay\u003c/a\u003e specification. List paths to overlays using \u003cbr /\u003e\nthe platform dependent PATH seperator (Windows \u003ccode\u003e;\u003c/code\u003e | others \u003ccode\u003e:\u003c/code\u003e) \u003c/p\u003e\n\u003cp\u003eExample (Windows): \u003ccode\u003eC:\\custom-ports\\boost;C:\\custom-ports\\sqlite3\u003c/code\u003e\u003c/p\u003e\n\u003ch4 id=\"vcpkg_overlay_triplets\"\u003eVCPKG_OVERLAY_TRIPLETS\u003c/h4\u003e\n\u003cp\u003eThis environment variable allows users to add directories to search for triplets.\u003cbr /\u003e\n\u003ca href=\"../examples/overlay-triplets-linux-dynamic.md\"\u003eExample: overlay triplets\u003c/a\u003e.\u003cbr /\u003e\nList paths to overlays using the platform dependent PATH seperator (Windows \u003ccode\u003e;\u003c/code\u003e, others \u003ccode\u003e:\u003c/code\u003e) \u003c/p\u003e\n\u003ch4 id=\"vcpkg_force_system_binaries\"\u003eVCPKG_FORCE_SYSTEM_BINARIES\u003c/h4\u003e\n\u003cp\u003eThis environment variable, if set, suppresses the downloading of CMake and Ninja and forces the use of the system binaries.\u003c/p\u003e\n\u003ch4 id=\"vcpkg_keep_env_vars\"\u003eVCPKG_KEEP_ENV_VARS\u003c/h4\u003e\n\u003cp\u003eThis environment variable can be set to a list of environment variables, separated by \u003ccode\u003e;\u003c/code\u003e, which will be propagated to\u003cbr /\u003e\nthe build environment.\u003c/p\u003e\n\u003cp\u003eExample: \u003ccode\u003eFOO_SDK_DIR;BAR_SDK_DIR\u003c/code\u003e\u003c/p\u003e\n\u003ch4 id=\"vcpkg_max_concurrency\"\u003eVCPKG_MAX_CONCURRENCY\u003c/h4\u003e\n\u003cp\u003eThis environment variables limits the amount of concurrency requested by underlying buildsystems. If unspecified, this defaults to logical cores + 1.\u003c/p\u003e\n\u003ch4 id=\"vcpkg_default_binary_cache\"\u003eVCPKG_DEFAULT_BINARY_CACHE\u003c/h4\u003e\n\u003cp\u003eThis environment variable redirects the default location to store binary packages. See \u003ca href=\"binarycaching.md#Configuration\"\u003eBinary Caching\u003c/a\u003e for more details.\u003c/p\u003e\n\u003ch4 id=\"vcpkg_binary_sources\"\u003eVCPKG_BINARY_SOURCES\u003c/h4\u003e\n\u003cp\u003eThis environment variable adds or removes binary sources. See \u003ca href=\"binarycaching.md#Configuration\"\u003eBinary Caching\u003c/a\u003e for more details.\u003c/p\u003e\n\u003ch4 id=\"vcpkg_nuget_repository\"\u003eVCPKG_NUGET_REPOSITORY\u003c/h4\u003e\n\u003cp\u003eThis environment variable changes the metadata of produced NuGet packages. See \u003ca href=\"binarycaching.md#Configuration\"\u003eBinary Caching\u003c/a\u003e for more details.\u003c/p\u003e\n\u003ch4 id=\"vcpkg_use_nuget_cache\"\u003eVCPKG_USE_NUGET_CACHE\u003c/h4\u003e\n\u003cp\u003eThis environment variable allows using NuGet\u0027s cache for every nuget-based binary source. See \u003ca href=\"binarycaching.md#NuGets-cache\"\u003eBinary Caching\u003c/a\u003e for more details.\u003c/p\u003e",
        "Nav":  "#users"
    },
    {
        "Path":  "/en/docs/users/integration.html",
        "Name":  "integration",
        "Source":  "\u003ch2 id=\"buildsystem-integration\"\u003eBuildsystem Integration\u003c/h2\u003e\n\u003cp\u003eVcpkg offers many ways to integrate into your build so you can do what\u0027s right for your project. There are two main categories of integration:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#integrate\"\u003e\u003ccode\u003eintegrate\u003c/code\u003e command\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#export\"\u003e\u003ccode\u003eexport\u003c/code\u003e command\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEach integration style has heuristics to deduce the correct \u003ca href=\"triplets.md\"\u003etriplet\u003c/a\u003e. This can be overridden using \u003ca href=\"#triplet-selection\"\u003ea common method\u003c/a\u003e based on your buildsystem.\u003c/p\u003e\n\u003cp\u003e\u003ca name=\"integrate\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"integrate-command\"\u003eIntegrate Command\u003c/h3\u003e\n\u003cp\u003eThese link your project(s) to a specific copy of Vcpkg on your machine so any updates or new package installations will be instantly available for the next build of your project.\u003c/p\u003e\n\u003cp\u003e\u003ca name=\"user-wide-msbuild\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"user-wide-for-msbuild-recommended-for-open-source-msbuild-projects\"\u003eUser-wide for MSBuild (Recommended for Open Source MSBuild projects)\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003evcpkg integrate install\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will implicitly add Include Directories, Link Directories, and Link Libraries for all packages installed with Vcpkg to all VS2015, VS2017 and VS2019 MSBuild projects. We also add a post-build action for executable projects that will analyze and copy any DLLs you need to the output folder, enabling a seamless F5 experience.\u003c/p\u003e\n\u003cp\u003eFor the vast majority of libraries, this is all you need to do -- just File -\u0026gt; New Project and write code! However, some libraries perform conflicting behaviors such as redefining \u003ccode\u003emain()\u003c/code\u003e. Since you need to choose per-project which of these conflicting options you want, you will need to add those libraries to your linker inputs manually.\u003c/p\u003e\n\u003cp\u003eHere are some examples, though this is not an exhaustive list:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGtest provides \u003ccode\u003egtest\u003c/code\u003e, \u003ccode\u003egmock\u003c/code\u003e, \u003ccode\u003egtest_main\u003c/code\u003e, and \u003ccode\u003egmock_main\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSDL2 provides \u003ccode\u003eSDL2main\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSFML provides \u003ccode\u003esfml-main\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eBoost.Test provides \u003ccode\u003eboost_test_exec_monitor\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo get a full list for all your installed packages, run \u003ccode\u003evcpkg owns manual-link\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ca name=\"cmake\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"cmake-toolchain-file-recommended-for-open-source-cmake-projects\"\u003eCMake toolchain file (Recommended for Open Source CMake projects)\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ecmake ../my/project -DCMAKE_TOOLCHAIN_FILE=C:\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eProjects configured with the Vcpkg toolchain file will have the appropriate Vcpkg folders added to the cmake search paths. This makes all libraries available to be found through \u003ccode\u003efind_package()\u003c/code\u003e, \u003ccode\u003efind_path()\u003c/code\u003e, and \u003ccode\u003efind_library()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSee \u003ca href=\"../examples/installing-and-using-packages.md\"\u003eInstalling and Using Packages Example: sqlite\u003c/a\u003e for a fully worked example using our CMake toolchain.\u003c/p\u003e\n\u003cp\u003eNote that we do not automatically add ourselves to your compiler include paths. To use a header-only library, simply use \u003ccode\u003efind_path()\u003c/code\u003e, which will correctly work on all platforms:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003e# To find and use catch\nfind_path(CATCH_INCLUDE_DIR NAMES catch.hpp PATH_SUFFIXES catch2)\ninclude_directories(${CATCH_INCLUDE_DIR})\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id=\"using-an-environment-variable-instead-of-a-command-line-option\"\u003eUsing an environment variable instead of a command line option\u003c/h5\u003e\n\u003cp\u003eThe \u003ccode\u003eCMAKE_TOOLCHAIN_FILE\u003c/code\u003e setting simply must be set before the \u003ccode\u003eproject()\u003c/code\u003e directive is first called. This means that you can easily read from an environment variable to avoid passing it on the configure line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003eif(DEFINED ENV{VCPKG_ROOT} AND NOT DEFINED CMAKE_TOOLCHAIN_FILE)\n  set(CMAKE_TOOLCHAIN_FILE \"$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake\"\n      CACHE STRING \"\")\nendif()\n\nproject(myproject CXX)\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id=\"using-multiple-toolchain-files\"\u003eUsing multiple toolchain files\u003c/h5\u003e\n\u003cp\u003eTo use an external toolchain file with a project using vcpkg, you can set the cmake variable \u003ccode\u003eVCPKG_CHAINLOAD_TOOLCHAIN_FILE\u003c/code\u003e on the configure line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ecmake ../my/project \\\n   -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake \\\n   -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=../my/project/compiler-settings-toolchain.cmake\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id=\"linking-nuget-file\"\u003eLinking NuGet file\u003c/h4\u003e\n\u003cp\u003eWe also provide individual VS project integration through a NuGet package. This will modify the project file, so we do not recommend this approach for open source projects.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ePS D:\\src\\vcpkg\u0026gt; .\\vcpkg integrate project\nCreated nupkg: D:\\src\\vcpkg\\scripts\\buildsystems\\vcpkg.D.src.vcpkg.1.0.0.nupkg\n\nWith a project open, go to Tools-\u0026gt;NuGet Package Manager-\u0026gt;Package Manager Console and paste:\n    Install-Package vcpkg.D.src.vcpkg -Source \"D:/src/vcpkg/scripts/buildsystems\"\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eNote: The generated NuGet package does not contain the actual libraries. It instead acts like a shortcut (or symlink) to the vcpkg install and will \"automatically\" update with any changes (install/remove) to the libraries. You do not need to regenerate or update the NuGet package.\u003c/em\u003e\u003c/p\u003e\n\u003ch4 id=\"manual-compiler-settings\"\u003eManual compiler settings\u003c/h4\u003e\n\u003cp\u003eLibraries are installed into the \u003ccode\u003einstalled\u0026lt;/code\u0026gt; subfolder, partitioned by architecture (e.g. x86-windows):\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe header files are installed to \u003ccode\u003einstalled\\x86-windows\\include\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eRelease \u003ccode\u003e.lib\u003c/code\u003e files are installed to \u003ccode\u003einstalled\\x86-windows\\lib\u003c/code\u003e or \u003ccode\u003einstalled\\x86-windows\\lib\\manual-link\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eRelease \u003ccode\u003e.dll\u003c/code\u003e files are installed to \u003ccode\u003einstalled\\x86-windows\\bin\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eDebug \u003ccode\u003e.lib\u003c/code\u003e files are installed to \u003ccode\u003einstalled\\x86-windows\\debug\\lib\u003c/code\u003e or \u003ccode\u003einstalled\\x86-windows\\debug\\lib\\manual-link\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eDebug \u003ccode\u003e.dll\u003c/code\u003e files are installed to \u003ccode\u003einstalled\\x86-windows\\debug\\bin\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSee your build system specific documentation for how to use prebuilt binaries.\u003c/p\u003e\n\u003cp\u003eGenerally, to run any produced executables you will also need to either copy the needed DLL files to the same folder as your executable or \u003cem\u003eprepend\u003c/em\u003e the correct \u003ccode\u003ebin\u0026lt;/code\u0026gt; directory to your path.\u003c/p\u003e\n\u003cp\u003e\u003ca name=\"export\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"export-command\"\u003eExport Command\u003c/h3\u003e\n\u003cp\u003eThis command creates a shrinkwrapped archive containing a specific set of libraries (and their dependencies) that can be quickly and reliably shared with build servers or other users in your organization.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--nuget\u003c/code\u003e: NuGet package (Recommended for MSBuild projects)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--zip\u003c/code\u003e: Zip archive\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--7zip\u003c/code\u003e: 7Zip archive (Recommended for CMake projects)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e--raw\u003c/code\u003e: Raw, uncompressed folder\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEach of these have the same layout, which mimics the layout of a full vcpkg:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003einstalled\u0026lt;/code\u0026gt; contains the installed package files\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003escripts\\buildsystems\\vcpkg.cmake\u003c/code\u003e is a toolchain file suitable for use with CMake\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdditionally, NuGet packages will contain a \u003ccode\u003ebuild\\native\\vcpkg.targets\u003c/code\u003e that integrates with MSBuild projects.\u003c/p\u003e\n\u003cp\u003ePlease also see our \u003ca href=\"https://blogs.msdn.microsoft.com/vcblog/2017/05/03/vcpkg-introducing-export-command/\"\u003eblog post\u003c/a\u003e for additional examples.\u003c/p\u003e\n\u003cp\u003e\u003ca name=\"triplet-selection\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"triplet-selection\"\u003eTriplet selection\u003c/h3\u003e\n\u003cp\u003eEvery integration mechanism besides manually adding the folders will deduce a \u003ca href=\"triplets.md\"\u003etriplet\u003c/a\u003e for your project as one of:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ex86-windows\u003c/li\u003e\n\u003cli\u003ex64-windows\u003c/li\u003e\n\u003cli\u003ex86-uwp\u003c/li\u003e\n\u003cli\u003ex64-uwp\u003c/li\u003e\n\u003cli\u003earm-uwp\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"with-msbuild\"\u003eWith MSBuild\u003c/h4\u003e\n\u003cp\u003eYou can see the automatically deduced triplet by setting your MSBuild verbosity to Normal or higher:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003e\u003cem\u003eShortcut: Ctrl+Q \"build and run\"\u003c/em\u003e\u003c/p\u003e\n  \u003cp\u003eTools -\u0026gt; Options -\u0026gt; Projects and Solutions -\u0026gt; Build and Run -\u0026gt; MSBuild project build output verbosity\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eTo override the automatically chosen \u003ca href=\"triplets.md\"\u003etriplet\u003c/a\u003e, you can specify the MSBuild property \u003ccode\u003eVcpkgTriplet\u003c/code\u003e in your \u003ccode\u003e.vcxproj\u003c/code\u003e. We recommend adding this to the \u003ccode\u003eGlobals\u003c/code\u003e PropertyGroup.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"xml language-xml\"\u003e\u0026lt;PropertyGroup Label=\"Globals\"\u0026gt;\n  \u0026lt;!-- .... --\u0026gt;\n  \u0026lt;VcpkgTriplet Condition=\"\u0027$(Platform)\u0027==\u0027Win32\u0027\"\u0026gt;x86-windows-static\u0026lt;/VcpkgTriplet\u0026gt;\n  \u0026lt;VcpkgTriplet Condition=\"\u0027$(Platform)\u0027==\u0027x64\u0027\"\u0026gt;x64-windows-static\u0026lt;/VcpkgTriplet\u0026gt;\n\u0026lt;/PropertyGroup\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id=\"with-cmake\"\u003eWith CMake\u003c/h4\u003e\n\u003cp\u003eYou can set \u003ccode\u003eVCPKG_TARGET_TRIPLET\u003c/code\u003e on the configure line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003ecmake ../my/project -DVCPKG_TARGET_TRIPLET=x64-windows-static -DCMAKE_TOOLCHAIN_FILE=...\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you use \u003ccode\u003eVCPKG_DEFAULT_TRIPLET\u003c/code\u003e \u003ca href=\"config-environment.md\"\u003eenvironment variable\u003c/a\u003e to control the unqualified triplet in vcpkg command lines you can default \u003ccode\u003eVCPKG_TARGET_TRIPLET\u003c/code\u003e in CMake like \u003ca href=\"#using-an-environment-variable-instead-of-a-command-line-option\"\u003eUsing an environment variable instead of a command line option\u003c/a\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003eif(DEFINED ENV{VCPKG_DEFAULT_TRIPLET} AND NOT DEFINED VCPKG_TARGET_TRIPLET)\n  set(VCPKG_TARGET_TRIPLET \"$ENV{VCPKG_DEFAULT_TRIPLET}\" CACHE STRING \"\")\nendif()\u003c/code\u003e\u003c/pre\u003e",
        "Nav":  "#users"
    },
    {
        "Path":  "/en/docs/users/manifests.html",
        "Name":  "manifests",
        "Source":  "\u003ch1 id=\"manifest-mode\"\u003eManifest Mode\u003c/h1\u003e\n\u003cp\u003evcpkg has two modes of operation - classic mode and manifest mode.\u003c/p\u003e\n\u003cp\u003eIn classic mode, vcpkg produces an \"installed\" tree, whose contents are changed by explicit calls to \u003ccode\u003evcpkg install\u003c/code\u003e or\u003cbr /\u003e\n\u003ccode\u003evcpkg remove\u003c/code\u003e. The installed tree is intended for consumption by any number of projects: for example, installing a\u003cbr /\u003e\nbunch of libraries and then using those libraries from Visual Studio, without additional configuration. Because the\u003cbr /\u003e\ninstalled tree is not associated with an individual project, it\u0027s similar to tools like \u003ccode\u003ebrew\u003c/code\u003e or \u003ccode\u003eapt\u003c/code\u003e, except that the\u003cbr /\u003e\ninstalled tree is vcpkg-installation-local, rather than global to a system or user.\u003c/p\u003e\n\u003cp\u003eIn manifest mode, an installed tree is associated with a particular project rather than the vcpkg installation. The set\u003cbr /\u003e\nof installed ports is controlled by editing the project\u0027s \"manifest file\", and the installed tree is placed in the\u003cbr /\u003e\nproject directory or build directory. This mode acts more similarly to language package managers like Cargo, or npm. We\u003cbr /\u003e\nrecommend using this manifest mode whenever possible, because it allows one to encode a project\u0027s dependencies\u003cbr /\u003e\nexplicitly in a project file, rather than in the documentation, making your project much easier to consume.\u003c/p\u003e\n\u003cp\u003eManifest mode is in beta, but it can be used from the CMake or MSBuild integration, which will be stable when used via\u003cbr /\u003e\nthings like \u003ccode\u003efind_package\u003c/code\u003e. This is the recommended way to use manifest mode.\u003c/p\u003e\n\u003cp\u003eCheck out the \u003ca href=\"../examples/manifest-mode-cmake.md\"\u003emanifest cmake example\u003c/a\u003e for an example project using CMake and\u003cbr /\u003e\nmanifest mode.\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#simple-example-manifest\"\u003eSimple Example Manifest\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#manifest-syntax-reference\"\u003eManifest Syntax Reference\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#command-line-interface\"\u003eCommand Line Interface\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#cmake-integration\"\u003eCMake Integration\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#msbuild-integration\"\u003eMSBuild Integration\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSee also \u003ca href=\"../specifications/manifests.md\"\u003ethe original specification\u003c/a\u003e for more low-level details.\u003c/p\u003e\n\u003ch2 id=\"simple-example-manifest\"\u003eSimple Example Manifest\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"$schema\": \"https://raw.githubusercontent.com/microsoft/vcpkg/master/scripts/vcpkg.schema.json\",\n  \"name\": \"my-application\",\n  \"version\": \"0.15.2\",\n  \"dependencies\": [\n    \"boost-system\",\n    {\n      \"name\": \"cpprestsdk\",\n      \"default-features\": false\n    },\n    \"libxml2\",\n    \"yajl\"\n  ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"manifest-syntax-reference\"\u003eManifest Syntax Reference\u003c/h2\u003e\n\u003cp\u003eA manifest is a JSON-formatted file named \u003ccode\u003evcpkg.json\u003c/code\u003e which lies at the root of your project.\u003cbr /\u003e\nIt contains all the information a person needs to know to get dependencies for your project,\u003cbr /\u003e\nas well as all the metadata about your project that a person who depends on you might be interested in.\u003c/p\u003e\n\u003cp\u003eManifests follow strict JSON: they can\u0027t contain C++-style comments (\u003ccode\u003e//\u003c/code\u003e) nor trailing commas. However\u003cbr /\u003e\nyou can use field names that start with \u003ccode\u003e$\u003c/code\u003e to write your comments in any object that has a well-defined set of keys.\u003cbr /\u003e\nThese comment fields are not allowed in any objects which permit user-defined keys (such as \u003ccode\u003e\"features\"\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eEach manifest contains a top level object with the fields documented below; the most important ones are\u003cbr /\u003e\n\u003ca href=\"#name\"\u003e\u003ccode\u003e\"name\"\u003c/code\u003e\u003c/a\u003e, the \u003ca href=\"#version-fields\"\u003eversion fields\u003c/a\u003e, and \u003ca href=\"#dependencies\"\u003e\u003ccode\u003e\"dependencies\"\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003ch3 id=\"name\"\u003e\u003ccode\u003e\"name\"\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThis is the name of your project! It must be formatted in a way that vcpkg understands - in other words,\u003cbr /\u003e\nit must be lowercase alphabetic characters, digits, and hyphens, and it must not start nor end with a hyphen.\u003cbr /\u003e\nFor example, \u003ccode\u003eBoost.Asio\u003c/code\u003e might be given the name \u003ccode\u003eboost-asio\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis is a required field.\u003c/p\u003e\n\u003ch3 id=\"version-fields\"\u003eVersion fields\u003c/h3\u003e\n\u003cp\u003eThere is, at this point, only one version field - \u003ccode\u003e\"version-string\"\u003c/code\u003e. However, more will be added in the future.\u003cbr /\u003e\nYou must have one (and only one) version field. There are different reasons to use each version field:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\"version-string\"\u003c/code\u003e - used for packages that don\u0027t have orderable versions. This is pretty uncommon,\u003cbr /\u003e\nbut since we don\u0027t have any versioning constraints yet, this is the only one that you can use.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdditionally, the \u003ccode\u003e\"port-version\"\u003c/code\u003e field is used by registries of packages,\u003cbr /\u003e\nas a way to version \"the package gotten from \u003ccode\u003evcpkg install\u003c/code\u003e\" differently from the upstream package version.\u003cbr /\u003e\nYou shouldn\u0027t need to worry about this at all.\u003c/p\u003e\n\u003ch4 id=\"additional-version-fields\"\u003eAdditional version fields\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003eExperimental behind the \u003ccode\u003eversions\u003c/code\u003e feature flag\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSee \u003ca href=\"versioning.md#version%20schemes\"\u003eversioning.md\u003c/a\u003e for additional version types.\u003c/p\u003e\n\u003ch3 id=\"description\"\u003e\u003ccode\u003e\"description\"\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThis is where you describe your project. Give it a good description to help in searching for it!\u003cbr /\u003e\nThis can be a single string, or it can be an array of strings;\u003cbr /\u003e\nin the latter case, the first string is treated as a summary,\u003cbr /\u003e\nwhile the remaining strings are treated as the full description.\u003c/p\u003e\n\u003ch3 id=\"builtin-baseline\"\u003e\u003ccode\u003e\"builtin-baseline\"\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eExperimental behind the \u003ccode\u003eversions\u003c/code\u003e feature flag\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThis field indicates the commit of vcpkg which provides global minimum version information for your manifest. It is required for top-level manifest files using versioning.\u003c/p\u003e\n\u003cp\u003eSee also \u003ca href=\"versioning.md#builtin-baseline\"\u003eversioning\u003c/a\u003e for more semantic details.\u003c/p\u003e\n\u003ch3 id=\"dependencies\"\u003e\u003ccode\u003e\"dependencies\"\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThis field lists all the dependencies you\u0027ll need to build your library (as well as any your dependents might need,\u003cbr /\u003e\nif they were to use you). It\u0027s an array of strings and objects:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA string dependency (e.g., \u003ccode\u003e\"dependencies\": [ \"zlib\" ]\u003c/code\u003e) is the simplest way one can depend on a library;\u003cbr /\u003e\nit means you don\u0027t depend on a single version, and don\u0027t need to write down any more information.\u003c/li\u003e\n\u003cli\u003eOn the other hand, an object dependency (e.g., \u003ccode\u003e\"dependencies\": [ { \"name\": \"zlib\" } ]\u003c/code\u003e)\u003cbr /\u003e\nallows you to add that extra information.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"example\"\u003eExample:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e\"dependencies\": [\n  {\n    \"name\": \"arrow\",\n    \"default-features\": false,\n    \"features\": [ \"json\" ]\n  },\n  \"boost-asio\",\n  \"openssl\",\n  {\n    \"name\": \"picosha2\",\n    \"platform\": \"!windows\"\n  }\n]\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id=\"name-field\"\u003e\u003ccode\u003e\"name\"\u003c/code\u003e Field\u003c/h4\u003e\n\u003cp\u003eThe name of the dependency. This follows the same restrictions as the \u003ca href=\"#name\"\u003e\u003ccode\u003e\"name\"\u003c/code\u003e\u003c/a\u003e property for a project.\u003c/p\u003e\n\u003ch4 id=\"features-and-default-features-fields\"\u003e\u003ccode\u003e\"features\"\u003c/code\u003e and \u003ccode\u003e\"default-features\"\u003c/code\u003e Fields\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003e\"features\"\u003c/code\u003e is an array of feature names which tell you the set of features that the\u003cbr /\u003e\ndependencies need to have at a minimum,\u003cbr /\u003e\nwhile \u003ccode\u003e\"default-features\"\u003c/code\u003e is a boolean that tells vcpkg whether or not to\u003cbr /\u003e\ninstall the features the package author thinks should be \"most common for most people to use\".\u003c/p\u003e\n\u003cp\u003eFor example, \u003ccode\u003effmpeg\u003c/code\u003e is a library which supports many, many audio and video codecs;\u003cbr /\u003e\nhowever, for your specific project, you may only need mp3 encoding.\u003cbr /\u003e\nThen, you might just ask for:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"ffmpeg\",\n  \"default-features\": false,\n  \"features\": [ \"mp3lame\" ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id=\"platform-field\"\u003e\u003ccode\u003e\"platform\"\u003c/code\u003e Field\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003e\"platform\"\u003c/code\u003e field defines the platforms where the dependency should be installed - for example,\u003cbr /\u003e\nyou might need to use sha256, and so you use platform primitives on Windows, but \u003ccode\u003epicosha2\u003c/code\u003e on non-Windows platforms.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"picosha2\",\n  \"platform\": \"!windows\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is a string field which takes boolean expressions of the form \u003ccode\u003e\u0026lt;identifier\u0026gt;\u003c/code\u003e,\u003cbr /\u003e\n\u003ccode\u003e!expression\u003c/code\u003e, \u003ccode\u003eexpression { \u0026amp; expression \u0026amp; expression...}\u003c/code\u003e, and \u003ccode\u003eexpression { | expression | expression...}\u003c/code\u003e,\u003cbr /\u003e\nalong with parentheses to denote precedence.\u003cbr /\u003e\nFor example, a dependency that\u0027s only installed on the Windows OS, for the ARM64 architecture,\u003cbr /\u003e\nand on Linux on x64, would be written \u003ccode\u003e(windows \u0026amp; arm64) | (linux \u0026amp; x64)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe common identifiers are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe operating system: \u003ccode\u003ewindows\u003c/code\u003e, \u003ccode\u003euwp\u003c/code\u003e, \u003ccode\u003elinux\u003c/code\u003e, \u003ccode\u003eosx\u003c/code\u003e (includes macOS), \u003ccode\u003eandroid\u003c/code\u003e, \u003ccode\u003eemscripten\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eThe architecture: \u003ccode\u003ex86\u003c/code\u003e, \u003ccode\u003ex64\u003c/code\u003e, \u003ccode\u003ewasm32\u003c/code\u003e, \u003ccode\u003earm64\u003c/code\u003e, \u003ccode\u003earm\u003c/code\u003e (includes both arm32 and arm64 due to backwards compatibility)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ealthough one can define their own.\u003c/p\u003e\n\u003ch4 id=\"version-field\"\u003e\u003ccode\u003e\"version\u0026gt;=\"\u003c/code\u003e Field\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003eExperimental behind the \u003ccode\u003eversions\u003c/code\u003e feature flag\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA minimum version constraint on the dependency.\u003c/p\u003e\n\u003cp\u003eThis field specifies the minimum version of the dependency using a \u0027#\u0027 suffix to denote port-version if non-zero.\u003c/p\u003e\n\u003cp\u003eSee also \u003ca href=\"versioning.md#constraints\"\u003eversioning\u003c/a\u003e for more semantic details.\u003c/p\u003e\n\u003ch3 id=\"overrides\"\u003e\u003ccode\u003e\"overrides\"\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eExperimental behind the \u003ccode\u003eversions\u003c/code\u003e feature flag\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThis field enables version resolution to be ignored for certain dependencies and to use specific versions instead.\u003c/p\u003e\n\u003cp\u003eSee also \u003ca href=\"versioning.md#overrides\"\u003eversioning\u003c/a\u003e for more semantic details.\u003c/p\u003e\n\u003ch4 id=\"example-1\"\u003eExample:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e  \"overrides\": [\n    {\n      \"name\": \"arrow\", \"version\": \"1.2.3\", \"port-version\": 7\n    }\n  ]\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"supports\"\u003e\u003ccode\u003e\"supports\"\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eIf your project doesn\u0027t support common platforms, you can tell your users this with the \u003ccode\u003e\"supports\"\u003c/code\u003e field.\u003cbr /\u003e\nIt uses the same platform expressions as \u003ca href=\"#platform\"\u003e\u003ccode\u003e\"platform\"\u003c/code\u003e\u003c/a\u003e, from dependencies, as well as the\u003cbr /\u003e\n\u003ccode\u003e\"supports\"\u003c/code\u003e field of features.\u003cbr /\u003e\nFor example, if your library doesn\u0027t support linux, you might write \u003ccode\u003e{ \"supports\": \"!linux\" }\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"features-and-default-features\"\u003e\u003ccode\u003e\"features\"\u003c/code\u003e and \u003ccode\u003e\"default-features\"\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003e\"features\"\u003c/code\u003e field defines \u003cem\u003eyour\u003c/em\u003e project\u0027s optional features, that others may either depend on or not.\u003cbr /\u003e\nIt\u0027s an object, where the keys are the names of the features, and the values are objects describing the feature.\u003cbr /\u003e\n\u003ccode\u003e\"description\"\u003c/code\u003e is required,\u003cbr /\u003e\nand acts exactly like the \u003ca href=\"#description\"\u003e\u003ccode\u003e\"description\"\u003c/code\u003e\u003c/a\u003e field on the global package,\u003cbr /\u003e\nand \u003ccode\u003e\"dependencies\"\u003c/code\u003e are optional,\u003cbr /\u003e\nand again act exactly like the \u003ca href=\"#dependencies\"\u003e\u003ccode\u003e\"dependencies\"\u003c/code\u003e\u003c/a\u003e field on the global package.\u003cbr /\u003e\nThere\u0027s also the \u003ccode\u003e\"supports\"\u003c/code\u003e field,\u003cbr /\u003e\nwhich again acts exactly like the \u003ca href=\"#supports\"\u003e\u003ccode\u003e\"supports\"\u003c/code\u003e\u003c/a\u003e field on the global package.\u003c/p\u003e\n\u003cp\u003eYou also have control over which features are default, if a person doesn\u0027t ask for anything specific,\u003cbr /\u003e\nand that\u0027s the \u003ccode\u003e\"default-features\"\u003c/code\u003e field, which is an array of feature names.\u003c/p\u003e\n\u003ch4 id=\"example-2\"\u003eExample:\u003c/h4\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"libdb\",\n  \"version\": \"1.0.0\",\n  \"description\": [\n    \"An example database library.\",\n    \"Optionally can build with CBOR, JSON, or CSV as backends.\"\n  ],\n  \"$default-features-explanation\": \"Users using this library transitively will get all backends automatically\",\n  \"default-features\": [ \"cbor\", \"csv\", \"json\" ],\n  \"features\": {\n    \"cbor\": {\n      \"description\": \"The CBOR backend\",\n      \"dependencies\": [\n        {\n          \"$explanation\": [\n            \"This is how you tell vcpkg that the cbor feature depends on the json feature of this package\"\n          ],\n          \"name\": \"libdb\",\n          \"default-features\": false,\n          \"features\": [ \"json\" ]\n        }\n      ]\n    },\n    \"csv\": {\n      \"description\": \"The CSV backend\",\n      \"dependencies\": [\n        \"fast-cpp-csv-parser\"\n      ]\n    },\n    \"json\": {\n      \"description\": \"The JSON backend\",\n      \"dependencies\": [\n        \"jsoncons\"\n      ]\n    }\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"command-line-interface\"\u003eCommand Line Interface\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eExperimental behind the \u003ccode\u003emanifests\u003c/code\u003e feature flag\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhen invoked from any subdirectory of the directory containing \u003ccode\u003evcpkg.json\u003c/code\u003e, \u003ccode\u003evcpkg install\u003c/code\u003e with no package arguments\u003cbr /\u003e\nwill install all manifest dependencies into \u003ccode\u003e\u0026lt;directory containing vcpkg.json\u0026gt;/vcpkg_installed/\u003c/code\u003e. Most of \u003ccode\u003evcpkg\ninstall\u003c/code\u003e\u0027s classic mode parameters function the same in manifest mode.\u003c/p\u003e\n\u003ch3 id=\"--x-install-rootpath\"\u003e\u003ccode\u003e--x-install-root=\u0026lt;path\u0026gt;\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eExperimental and may change or be removed at any time\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSpecifies an alternate install location than \u003ccode\u003e\u0026lt;directory containing vcpkg.json\u0026gt;/vcpkg_installed/\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"--triplettriplet\"\u003e\u003ccode\u003e--triplet=\u0026lt;triplet\u0026gt;\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eSpecify the triplet to be used for installation.\u003c/p\u003e\n\u003cp\u003eDefaults to the same default triplet as in classic mode.\u003c/p\u003e\n\u003ch3 id=\"--x-featurefeature\"\u003e\u003ccode\u003e--x-feature=\u0026lt;feature\u0026gt;\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eExperimental and may change or be removed at any time\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSpecify an additional feature from the \u003ccode\u003evcpkg.json\u003c/code\u003e to install dependencies from.\u003c/p\u003e\n\u003ch3 id=\"--x-no-default-features\"\u003e\u003ccode\u003e--x-no-default-features\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eExperimental and may change or be removed at any time\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eDisables automatic activation of all default features listed in the \u003ccode\u003evcpkg.json\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"--x-manifest-rootpath\"\u003e\u003ccode\u003e--x-manifest-root=\u0026lt;path\u0026gt;\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eExperimental and may change or be removed at any time\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSpecifies the directory containing \u003ccode\u003evcpkg.json\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eDefaults to searching upwards from the current working directory.\u003c/p\u003e\n\u003ch2 id=\"cmake-integration\"\u003eCMake Integration\u003c/h2\u003e\n\u003cp\u003eOur \u003ca href=\"integration.md#cmake\"\u003eCMake Integration\u003c/a\u003e will automatically detect a \u003ccode\u003evcpkg.json\u003c/code\u003e manifest file in the same\u003cbr /\u003e\ndirectory as the top-level \u003ccode\u003eCMakeLists.txt\u003c/code\u003e (\u003ccode\u003e${CMAKE_SOURCE_DIR}/vcpkg.json\u003c/code\u003e) and activate manifest mode. Vcpkg will be\u003cbr /\u003e\nautomatically bootstrapped if missing and invoked to install your dependencies into your local build directory\u003cbr /\u003e\n(\u003ccode\u003e${CMAKE_BINARY_DIR}/vcpkg_installed\u003c/code\u003e).\u003c/p\u003e\n\u003ch3 id=\"configuration\"\u003eConfiguration\u003c/h3\u003e\n\u003cp\u003eAll vcpkg-affecting variables must be defined before the first \u003ccode\u003eproject()\u003c/code\u003e directive, such as via the command line or\u003cbr /\u003e\n\u003ccode\u003eset()\u003c/code\u003e statements.\u003c/p\u003e\n\u003ch4 id=\"vcpkg_manifest_mode\"\u003e\u003ccode\u003eVCPKG_MANIFEST_MODE\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis variable controls whether vcpkg operates in manifest mode or in classic mode. To disable manifest mode even with a\u003cbr /\u003e\n\u003ccode\u003evcpkg.json\u003c/code\u003e, set this to \u003ccode\u003eOFF\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eDefaults to \u003ccode\u003eON\u003c/code\u003e when \u003ccode\u003eVCPKG_MANIFEST_DIR\u003c/code\u003e is non-empty or \u003ccode\u003e${CMAKE_SOURCE_DIR}/vcpkg.json\u003c/code\u003e exists.\u003c/p\u003e\n\u003ch4 id=\"vcpkg_manifest_dir\"\u003e\u003ccode\u003eVCPKG_MANIFEST_DIR\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis variable can be defined to specify an alternate folder containing your \u003ccode\u003evcpkg.json\u003c/code\u003e manifest.\u003c/p\u003e\n\u003cp\u003eDefaults to \u003ccode\u003e${CMAKE_SOURCE_DIR}\u003c/code\u003e if \u003ccode\u003e${CMAKE_SOURCE_DIR}/vcpkg.json\u003c/code\u003e exists.\u003c/p\u003e\n\u003ch4 id=\"vcpkg_manifest_install\"\u003e\u003ccode\u003eVCPKG_MANIFEST_INSTALL\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis variable controls whether vcpkg will be automatically run to install your dependencies during your configure step.\u003c/p\u003e\n\u003cp\u003eDefaults to \u003ccode\u003eON\u003c/code\u003e if \u003ccode\u003eVCPKG_MANIFEST_MODE\u003c/code\u003e is \u003ccode\u003eON\u003c/code\u003e.\u003c/p\u003e\n\u003ch4 id=\"vcpkg_bootstrap_options\"\u003e\u003ccode\u003eVCPKG_BOOTSTRAP_OPTIONS\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis variable can be set to additional command parameters to pass to \u003ccode\u003e./bootstrap-vcpkg\u003c/code\u003e (run in automatic restore mode\u003cbr /\u003e\nif the vcpkg tool does not exist).\u003c/p\u003e\n\u003ch4 id=\"vcpkg_overlay_triplets\"\u003e\u003ccode\u003eVCPKG_OVERLAY_TRIPLETS\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis variable can be set to a list of paths to be passed on the command line as \u003ccode\u003e--overlay-triplets=...\u003c/code\u003e\u003c/p\u003e\n\u003ch4 id=\"vcpkg_overlay_ports\"\u003e\u003ccode\u003eVCPKG_OVERLAY_PORTS\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis variable can be set to a list of paths to be passed on the command line as \u003ccode\u003e--overlay-ports=...\u003c/code\u003e\u003c/p\u003e\n\u003ch4 id=\"vcpkg_manifest_features\"\u003e\u003ccode\u003eVCPKG_MANIFEST_FEATURES\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis variable can be set to a list of features to treat as active when installing from your manifest.\u003c/p\u003e\n\u003cp\u003eFor example, Features can be used by projects to control building with additional dependencies to enable tests or\u003cbr /\u003e\nsamples:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n  \"name\": \"mylibrary\",\n  \"version\": \"1.0\",\n  \"dependencies\": [ \"curl\" ],\n  \"features\": {\n    \"samples\": {\n      \"description\": \"Build Samples\",\n      \"dependencies\": [ \"fltk\" ]\n    },\n    \"tests\": {\n      \"description\": \"Build Tests\",\n      \"dependencies\": [ \"gtest\" ]\n    }\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003e# CMakeLists.txt\n\noption(BUILD_TESTING \"Build tests\" OFF)\nif(BUILD_TESTING)\n  list(APPEND VCPKG_MANIFEST_FEATURES \"tests\")\nendif()\n\noption(BUILD_SAMPLES \"Build samples\" OFF)\nif(BUILD_SAMPLES)\n  list(APPEND VCPKG_MANIFEST_FEATURES \"samples\")\nendif()\n\nproject(myapp)\n\n# ...\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id=\"vcpkg_manifest_no_default_features\"\u003e\u003ccode\u003eVCPKG_MANIFEST_NO_DEFAULT_FEATURES\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis variable controls whether to automatically activate all default features in addition to those listed in\u003cbr /\u003e\n\u003ccode\u003eVCPKG_MANIFEST_FEATURES\u003c/code\u003e. If set to \u003ccode\u003eON\u003c/code\u003e, default features will not be automatically activated.\u003c/p\u003e\n\u003cp\u003eDefaults to \u003ccode\u003eOFF\u003c/code\u003e.\u003c/p\u003e\n\u003ch4 id=\"vcpkg_install_options\"\u003e\u003ccode\u003eVCPKG_INSTALL_OPTIONS\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis variable can be set to a list of additional command line parameters to pass to the vcpkg tool during automatic\u003cbr /\u003e\ninstallation.\u003c/p\u003e\n\u003ch4 id=\"vcpkg_feature_flags\"\u003e\u003ccode\u003eVCPKG_FEATURE_FLAGS\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eThis variable can be set to a list of feature flags to pass to the vcpkg tool during automatic installation to opt-in to\u003cbr /\u003e\nexperimental behavior.\u003c/p\u003e\n\u003cp\u003eSee the \u003ccode\u003e--feature-flags=\u003c/code\u003e command line option for more information.\u003c/p\u003e\n\u003ch2 id=\"msbuild-integration\"\u003eMSBuild Integration\u003c/h2\u003e\n\u003cp\u003eTo use manifests with MSBuild, first you need to use an \u003ca href=\"integration.md#with-msbuild\"\u003eexisting integration method\u003c/a\u003e.\u003cbr /\u003e\nThen, simply add a vcpkg.json above your project file (such as in the root of your source repository) and set the\u003cbr /\u003e\nproperty \u003ccode\u003eVcpkgEnableManifest\u003c/code\u003e to \u003ccode\u003etrue\u003c/code\u003e. You can set this property via the IDE in \u003ccode\u003eProject Properties -\u0026gt; Vcpkg -\u0026gt; Use\nVcpkg Manifest\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAs part of your project\u0027s build, vcpkg automatically be run and install any listed dependencies to \u003ccode\u003evcpkg_installed/\u003c/code\u003e\u003cbr /\u003e\nadjacent to the \u003ccode\u003evcpkg.json\u003c/code\u003e file; these files will then automatically be included in and linked to your MSBuild\u003cbr /\u003e\nprojects.\u003c/p\u003e\n\u003cp\u003eNote: It is critical that all project files in a single build consuming the same \u003ccode\u003evcpkg.json\u003c/code\u003e use the same triplet; if\u003cbr /\u003e\nyou need to use different triplets for different projects in your solution, they must consume from different\u003cbr /\u003e\n\u003ccode\u003evcpkg.json\u003c/code\u003e files.\u003c/p\u003e\n\u003ch3 id=\"msbuild-properties\"\u003eMSBuild Properties\u003c/h3\u003e\n\u003cp\u003eThese properties can be defined via the VS GUI under \u003ccode\u003eProject Properties -\u0026gt; Vcpkg\u003c/code\u003e or via a common \u003ccode\u003e.props\u003c/code\u003e file.\u003c/p\u003e\n\u003ch4 id=\"vcpkgenabled-use-vcpkg\"\u003e\u003ccode\u003eVcpkgEnabled\u003c/code\u003e (Use Vcpkg)\u003c/h4\u003e\n\u003cp\u003eThis can be set to \"false\" to explicitly disable vcpkg integration for the project\u003c/p\u003e\n\u003ch4 id=\"vcpkgtriplet-triplet\"\u003e\u003ccode\u003eVcpkgTriplet\u003c/code\u003e (Triplet)\u003c/h4\u003e\n\u003cp\u003eThis can be set to a custom triplet to use for integration (such as x64-windows-static)\u003c/p\u003e\n\u003ch4 id=\"vcpkgadditionalinstalloptions-additional-options\"\u003e\u003ccode\u003eVcpkgAdditionalInstallOptions\u003c/code\u003e (Additional Options)\u003c/h4\u003e\n\u003cp\u003eWhen using a manifest, this option specifies additional command line flags to pass to the underlying vcpkg tool\u003cbr /\u003e\ninvocation. This can be used to access features that have not yet been exposed through another option.\u003c/p\u003e\n\u003ch4 id=\"vcpkgconfiguration-vcpkg-configuration\"\u003e\u003ccode\u003eVcpkgConfiguration\u003c/code\u003e (Vcpkg Configuration)\u003c/h4\u003e\n\u003cp\u003eIf your configuration names are too complex for vcpkg to guess correctly, you can assign this property to \u003ccode\u003eRelease\u003c/code\u003e or\u003cbr /\u003e\n\u003ccode\u003eDebug\u003c/code\u003e to explicitly tell vcpkg what variant of libraries you want to consume.\u003c/p\u003e\n\u003ch4 id=\"vcpkgenablemanifest-use-vcpkg-manifest\"\u003e\u003ccode\u003eVcpkgEnableManifest\u003c/code\u003e (Use Vcpkg Manifest)\u003c/h4\u003e\n\u003cp\u003eThis property must be set to true in order to consume from a local vcpkg.json file. If set to false, any local\u003cbr /\u003e\nvcpkg.json files will be ignored. This will default to true in the future.\u003c/p\u003e\n\u003ch4 id=\"vcpkgmanifestinstall-install-vcpkg-dependencies\"\u003e\u003ccode\u003eVcpkgManifestInstall\u003c/code\u003e (Install Vcpkg Dependencies)\u003c/h4\u003e\n\u003cp\u003e\u003cem\u003e(Requires \u003ccode\u003eUse Vcpkg Manifest\u003c/code\u003e set to \u003ccode\u003etrue\u003c/code\u003e)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThis property can be set to \"false\" to disable automatic dependency restoration on project build. Dependencies can be\u003cbr /\u003e\nmanually restored via the vcpkg command line.\u003c/p\u003e\n\u003ch4 id=\"vcpkginstalleddirectory-installed-directory\"\u003e\u003ccode\u003eVcpkgInstalledDirectory\u003c/code\u003e (Installed Directory)\u003c/h4\u003e\n\u003cp\u003eThis property defines the location where headers and binaries are consumed from. In manifest mode, this directory is\u003cbr /\u003e\ncreated and populated based on your manifest.\u003c/p\u003e",
        "Nav":  "#users"
    },
    {
        "Path":  "/en/docs/users/selecting-library-features.html",
        "Name":  "Selecting Library Features",
        "Source":  "\u003ch1 id=\"selecting-library-features\"\u003eSelecting library features\u003c/h1\u003e\n\u003ch2 id=\"installing-a-library\"\u003eInstalling a library\u003c/h2\u003e\n\u003cp\u003eWe will look at \u003ca href=\"https://llvm.org/\"\u003ellvm\u003c/a\u003e as an example.\u003cbr /\u003e\nLLVM is a compiler infrasture. It supports optimizing llvm-ir and generating machine code.\u003cbr /\u003e\nYou could install it using:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"powershell language-powershell\"\u003e\u0026gt; .\\vcpkg install llvm\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOn Windows, this will install the 32-bit x86 LLVM, since that\u0027s the default triplet on Windows.\u003cbr /\u003e\nIf you are building for 64-bit Windows instead, you can use the following command to change the default triplet:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"powershell language-powershell\"\u003e\u0026gt; .\\vcpkg install --triplet x64-windows llvm\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe have more documentation on triplets \u003ca href=\"triplets.md\"\u003ehere\u003c/a\u003e.\u003cbr /\u003e\nCurrently we can\u0027t choose build type \u003ccode\u003edebug\u003c/code\u003e or \u003ccode\u003erelease\u003c/code\u003e using command line switches.\u003c/p\u003e\n\u003cp\u003eWith llvm now installed, we can execute:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"powershell language-powershell\"\u003e\u0026gt; # llc takes llvm IR and generates machine code\n\u0026gt; .\\installed\\x86-windows\\bin\\llc.exe --version # or x86-windows, or replace with the actual triplet\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ewe see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"powershell language-powershell\"\u003e  Registered Targets:\n    x86    - 32-bit X86: Pentium-Pro and above\n    x86-64 - 64-bit X86: EM64T and AMD64\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"installing-additional-features\"\u003eInstalling additional features\u003c/h2\u003e\n\u003cp\u003eBut \u003ca href=\"https://llvm.org/docs/GettingStarted.html#local-llvm-configuration\"\u003ellvm supports many more targets\u003c/a\u003e, from ARM to SPARC to SystemZ.\u003cbr /\u003e\nHowever, clearly our current installation doesn\u0027t include ARM as a target;\u003cbr /\u003e\nthus, we need to learn how vcpkg allows us to install other LLVM targets.\u003cbr /\u003e\nThe llvm port allows this via the \"target-*\" features.\u003c/p\u003e\n\u003cp\u003eIf we do:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"powershell language-powershell\"\u003e.\\vcpkg search llvm\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ellvm                 10.0.0#6         The LLVM Compiler Infrastructure\nllvm[clang]                           Build C Language Family Front-end.\nllvm[clang-tools-extra]               Build Clang tools.\n...\nllvm[target-all]                      Build with all backends.\nllvm[target-amdgpu]                   Build with AMDGPU backend.\nllvm[target-arm]                      Build with ARM backend.\n...\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can install any of these targets by using the install-feature syntax:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"powershell language-powershell\"\u003e\u0026gt; .\\vcpkg install llvm[target-arm] # Installs LLVM with the ARM target\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"opting-out-of-default-feature\"\u003eOpting out of default feature\u003c/h2\u003e\n\u003cp\u003eThe llvm port includes a few default features that you as a user may not want: for example,\u003cbr /\u003e\nthe \u003ccode\u003eclang\u003c/code\u003e feature is default, which means that \u003ccode\u003evcpkg install llvm\u003c/code\u003e will also build and install clang.\u003cbr /\u003e\nIf you are writing a compiler that uses LLVM as a backend,\u003cbr /\u003e\nyou\u0027re likely not interested in installing clang as well,\u003cbr /\u003e\nand we can do that by disabling default features with the special \u003ccode\u003ecore\u003c/code\u003e \"feature\":\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"powershell language-powershell\"\u003e\u0026gt; .\\vcpkg install llvm[core,default-targets] # removing the default-feature with \"core\" also removes all of the default targets you get\u003c/code\u003e\u003c/pre\u003e\n\u003ch1 id=\"further-reading\"\u003eFurther reading\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ca href=\"specifications/feature-packages.md\"\u003eFeature Packages\u003c/a\u003e specification was the initial design for features.\u003c/li\u003e\n\u003c/ul\u003e",
        "Nav":  "#users"
    },
    {
        "Path":  "/en/docs/users/triplets.html",
        "Name":  "triplets",
        "Source":  "\u003ch1 id=\"triplet-files\"\u003eTriplet files\u003c/h1\u003e\n\u003cp\u003eTriplet is a standard term used in cross compiling as a way to completely capture the target environment (cpu, os, compiler, runtime, etc) in a single convenient name.\u003c/p\u003e\n\u003cp\u003eIn Vcpkg, we use triplets to describe an imaginary \"target configuration set\" for every library. Within a triplet, libraries are generally built with the same configuration, but it is not a requirement. For example, you could have one triplet that builds \u003ccode\u003eopenssl\u003c/code\u003e statically and \u003ccode\u003ezlib\u003c/code\u003e dynamically, one that builds them both statically, and one that builds them both dynamically (all for the same target OS and architecture). A single build will consume files from a single triplet.\u003c/p\u003e\n\u003cp\u003eWe currently provide many triplets by default (run \u003ccode\u003evcpkg help triplet\u003c/code\u003e). However, you can easily add your own by creating a new file in the \u003ccode\u003etriplets\u0026lt;/code\u0026gt; directory. The new triplet will immediately be available for use in commands, such as \u003ccode\u003evcpkg install boost:x86-windows-custom\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eTo change the triplet used by your project, such as to enable static linking, see our \u003ca href=\"integration.md#triplet-selection\"\u003eIntegration Document\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"community-triplets\"\u003eCommunity triplets\u003c/h2\u003e\n\u003cp\u003eTriplets contained in the \u003ccode\u003etriplets\\community\u003c/code\u003e folder are not tested by continuous integration, but are commonly requested by the community.\u003c/p\u003e\n\u003cp\u003eBecause we do not have continuous coverage, port updates may break compatibility with community triplets. Because of this, community involvement is paramount!\u003c/p\u003e\n\u003cp\u003eWe will gladly accept and review contributions that aim to solve issues with these triplets.\u003c/p\u003e\n\u003ch3 id=\"usage\"\u003eUsage\u003c/h3\u003e\n\u003cp\u003eCommunity Triplets are enabled by default, when using a community triplet a message like the following one will be printed during a package install:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"no-highlight language-no-highlight\"\u003e-- Using community triplet x86-uwp. This triplet configuration is not guaranteed to succeed.\n-- [COMMUNITY] Loading triplet configuration from: D:\\src\\viromer\\vcpkg\\triplets\\community\\x86-uwp.cmake\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"variables\"\u003eVariables\u003c/h2\u003e\n\u003ch3 id=\"vcpkg_target_architecture\"\u003eVCPKG_TARGET_ARCHITECTURE\u003c/h3\u003e\n\u003cp\u003eSpecifies the target machine architecture.\u003c/p\u003e\n\u003cp\u003eValid options are \u003ccode\u003ex86\u003c/code\u003e, \u003ccode\u003ex64\u003c/code\u003e, \u003ccode\u003earm\u003c/code\u003e, \u003ccode\u003earm64\u003c/code\u003e and \u003ccode\u003ewasm32\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"vcpkg_crt_linkage\"\u003eVCPKG_CRT_LINKAGE\u003c/h3\u003e\n\u003cp\u003eSpecifies the desired CRT linkage (for MSVC).\u003c/p\u003e\n\u003cp\u003eValid options are \u003ccode\u003edynamic\u003c/code\u003e and \u003ccode\u003estatic\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"vcpkg_library_linkage\"\u003eVCPKG_LIBRARY_LINKAGE\u003c/h3\u003e\n\u003cp\u003eSpecifies the preferred library linkage.\u003c/p\u003e\n\u003cp\u003eValid options are \u003ccode\u003edynamic\u003c/code\u003e and \u003ccode\u003estatic\u003c/code\u003e. Note that libraries can ignore this setting if they do not support the preferred linkage type.\u003c/p\u003e\n\u003ch3 id=\"vcpkg_cmake_system_name\"\u003eVCPKG_CMAKE_SYSTEM_NAME\u003c/h3\u003e\n\u003cp\u003eSpecifies the target platform.\u003c/p\u003e\n\u003cp\u003eValid options include any CMake system name, such as:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEmpty (Windows Desktop for legacy reasons)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eWindowsStore\u003c/code\u003e (Universal Windows Platform)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMinGW\u003c/code\u003e (Minimalist GNU for Windows)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDarwin\u003c/code\u003e (Mac OSX)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eiOS\u003c/code\u003e (iOS)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLinux\u003c/code\u003e (Linux)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEmscripten\u003c/code\u003e (WebAssembly)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"vcpkg_cmake_system_version\"\u003eVCPKG_CMAKE_SYSTEM_VERSION\u003c/h3\u003e\n\u003cp\u003eSpecifies the target platform system version.\u003c/p\u003e\n\u003cp\u003eThis field is optional and, if present, will be passed into the build as \u003ccode\u003eCMAKE_SYSTEM_VERSION\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSee also the CMake documentation for \u003ccode\u003eCMAKE_SYSTEM_VERSION\u003c/code\u003e: \u003ca href=\"https://cmake.org/cmake/help/latest/variable/CMAKE_SYSTEM_VERSION.html\"\u003ehttps://cmake.org/cmake/help/latest/variable/CMAKE_SYSTEM_VERSION.html\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"vcpkg_chainload_toolchain_file\"\u003eVCPKG_CHAINLOAD_TOOLCHAIN_FILE\u003c/h3\u003e\n\u003cp\u003eSpecifies an alternate CMake Toolchain file to use.\u003c/p\u003e\n\u003cp\u003eThis (if set) will override all other compiler detection logic. By default, a toolchain file is selected from \u003ccode\u003escripts/toolchains/\u003c/code\u003e appropriate to the platform.\u003c/p\u003e\n\u003cp\u003eSee also the CMake documentation for toolchain files: \u003ca href=\"https://cmake.org/cmake/help/v3.11/manual/cmake-toolchains.7.html\"\u003ehttps://cmake.org/cmake/help/v3.11/manual/cmake-toolchains.7.html\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"vcpkg_cxx_flags\"\u003eVCPKG_CXX_FLAGS\u003c/h3\u003e\n\u003cp\u003eSets additional compiler flags to be used when not using \u003ccode\u003eVCPKG_CHAINLOAD_TOOLCHAIN_FILE\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis option also has forms for configuration-specific and C flags:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eVCPKG_CXX_FLAGS\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVCPKG_CXX_FLAGS_DEBUG\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVCPKG_CXX_FLAGS_RELEASE\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVCPKG_C_FLAGS\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVCPKG_C_FLAGS_DEBUG\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVCPKG_C_FLAGS_RELEASE\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"vcpkg_linker_flags\"\u003eVCPKG_LINKER_FLAGS\u003c/h3\u003e\n\u003cp\u003eSets additional linker flags to be used while building dynamic libraries and\u003cbr /\u003e\nexecutables in the absence of \u003ccode\u003eVCPKG_CHAINLOAD_TOOLCHAIN_FILE\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis option also has forms for configuration-specific flags:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eVCPKG_LINKER_FLAGS\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVCPKG_LINKER_FLAGS_DEBUG\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVCPKG_LINKER_FLAGS_RELEASE\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca name=\"VCPKG_DEP_INFO_OVERRIDE_VARS\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"vcpkg_dep_info_override_vars\"\u003eVCPKG_DEP_INFO_OVERRIDE_VARS\u003c/h3\u003e\n\u003cp\u003eReplaces the default computed list of triplet \"Supports\" terms.\u003c/p\u003e\n\u003cp\u003eThis option (if set) will override the default set of terms used for qualified dependency resolution and \"Supports\" field evaluation.\u003c/p\u003e\n\u003cp\u003eSee the \u003ca href=\"../maintainers/manifest-files.md#supports\"\u003e\u003ccode\u003e\"supports\"\u003c/code\u003e\u003c/a\u003e manifest file field documentation for more details.\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eImplementers\u0027 Note: this list is extracted via the \u003ccode\u003evcpkg_get_dep_info\u003c/code\u003e mechanism.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"windows-variables\"\u003eWindows Variables\u003c/h2\u003e\n\u003ch3 id=\"vcpkg_env_passthrough\"\u003eVCPKG_ENV_PASSTHROUGH\u003c/h3\u003e\n\u003cp\u003eInstructs vcpkg to allow additional environment variables into the build process.\u003c/p\u003e\n\u003cp\u003eOn Windows, vcpkg builds packages in a special clean environment that is isolated from the current command prompt to\u003cbr /\u003e\nensure build reliability and consistency. This triplet option can be set to a list of additional environment variables\u003cbr /\u003e\nthat will be added to the clean environment. The values of these environment variables will be hashed into the package\u003cbr /\u003e\nabi -- to pass through environment variables without abi tracking, see \u003ccode\u003eVCPKG_ENV_PASSTHROUGH_UNTRACKED\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSee also the \u003ccode\u003evcpkg env\u003c/code\u003e command for how you can inspect the precise environment that will be used.\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eImplementers\u0027 Note: this list is extracted via the \u003ccode\u003evcpkg_get_tags\u003c/code\u003e mechanism.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"vcpkg_env_passthrough_untracked\"\u003eVCPKG_ENV_PASSTHROUGH_UNTRACKED\u003c/h3\u003e\n\u003cp\u003eInstructs vcpkg to allow additional environment variables into the build process without abi tracking.\u003c/p\u003e\n\u003cp\u003eSee \u003ccode\u003eVCPKG_ENV_PASSTHROUGH\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ca name=\"VCPKG_VISUAL_STUDIO_PATH\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"vcpkg_visual_studio_path\"\u003eVCPKG_VISUAL_STUDIO_PATH\u003c/h3\u003e\n\u003cp\u003eSpecifies the Visual Studio installation to use.\u003c/p\u003e\n\u003cp\u003eTo select the precise combination of Visual Studio instance and toolset version, we walk through the following algorithm:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eDetermine the setting for \u003ccode\u003eVCPKG_VISUAL_STUDIO_PATH\u003c/code\u003e from the triplet, or the environment variable \u003ccode\u003eVCPKG_VISUAL_STUDIO_PATH\u003c/code\u003e, or consider it unset\u003c/li\u003e\n\u003cli\u003eDetermine the setting for \u003ccode\u003eVCPKG_PLATFORM_TOOLSET\u003c/code\u003e from the triplet or consider it unset\u003c/li\u003e\n\u003cli\u003eGather a list of all pairs of Visual Studio Instances with all toolsets available in those instances\u003col\u003e\n\u003cli\u003eThis is ordered first by instance type (Stable, Prerelease, Legacy) and then by toolset version (v142, v141, v140)\u003c/li\u003e\u003c/ol\u003e\u003c/li\u003e\n\u003cli\u003eFilter the list based on the settings for \u003ccode\u003eVCPKG_VISUAL_STUDIO_PATH\u003c/code\u003e and \u003ccode\u003eVCPKG_PLATFORM_TOOLSET\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eSelect the best remaining option\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe path should be absolute, formatted with backslashes, and have no trailing slash:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003eset(VCPKG_VISUAL_STUDIO_PATH \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\Preview\\\\Community\")\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"vcpkg_platform_toolset\"\u003eVCPKG_PLATFORM_TOOLSET\u003c/h3\u003e\n\u003cp\u003eSpecifies the VS-based C/C++ compiler toolchain to use.\u003c/p\u003e\n\u003cp\u003eSee \u003ca href=\"#VCPKG_VISUAL_STUDIO_PATH\"\u003e\u003ccode\u003eVCPKG_VISUAL_STUDIO_PATH\u003c/code\u003e\u003c/a\u003e for the full selection algorithm.\u003c/p\u003e\n\u003cp\u003eValid settings:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe Visual Studio 2019 platform toolset is \u003ccode\u003ev142\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThe Visual Studio 2017 platform toolset is \u003ccode\u003ev141\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThe Visual Studio 2015 platform toolset is \u003ccode\u003ev140\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"vcpkg_load_vcvars_env\"\u003eVCPKG_LOAD_VCVARS_ENV\u003c/h3\u003e\n\u003cp\u003eIf \u003ccode\u003eVCPKG_CHAINLOAD_TOOLCHAIN_FILE\u003c/code\u003e is used, VCPKG will not setup the Visual Studio environment.\u003cbr /\u003e\nSetting \u003ccode\u003eVCPKG_LOAD_VCVARS_ENV\u003c/code\u003e to (true|1|on) changes this behavior so that the Visual Studio environment is setup following the same rules as if \u003ccode\u003eVCPKG_CHAINLOAD_TOOLCHAIN_FILE\u003c/code\u003e was not set.\u003c/p\u003e\n\u003ch2 id=\"macos-variables\"\u003eMacOS Variables\u003c/h2\u003e\n\u003ch3 id=\"vcpkg_install_name_dir\"\u003eVCPKG_INSTALL_NAME_DIR\u003c/h3\u003e\n\u003cp\u003eSets the install name used when building macOS dynamic libraries. Default value is \u003ccode\u003e@rpath\u003c/code\u003e. See the CMake documentation for \u003ca href=\"https://cmake.org/cmake/help/latest/variable/CMAKE_INSTALL_NAME_DIR.html\"\u003eCMAKE_INSTALL_NAME_DIR\u003c/a\u003e for more information.\u003c/p\u003e\n\u003ch3 id=\"vcpkg_osx_deployment_target\"\u003eVCPKG_OSX_DEPLOYMENT_TARGET\u003c/h3\u003e\n\u003cp\u003eSets the minimum macOS version for compiled binaries. This also changes what versions of the macOS platform SDK that CMake will search for. See the CMake documentation for \u003ca href=\"https://cmake.org/cmake/help/latest/variable/CMAKE_OSX_DEPLOYMENT_TARGET.html\"\u003eCMAKE_OSX_DEPLOYMENT_TARGET\u003c/a\u003e for more information.\u003c/p\u003e\n\u003ch3 id=\"vcpkg_osx_sysroot\"\u003eVCPKG_OSX_SYSROOT\u003c/h3\u003e\n\u003cp\u003eSet the name or path of the macOS platform SDK that will be used by CMake. See the CMake documentation for \u003ca href=\"https://cmake.org/cmake/help/latest/variable/CMAKE_OSX_SYSROOT.html\"\u003eCMAKE_OSX_SYSROOT\u003c/a\u003e for more information.\u003c/p\u003e\n\u003ch3 id=\"vcpkg_osx_architectures\"\u003eVCPKG_OSX_ARCHITECTURES\u003c/h3\u003e\n\u003cp\u003eSet the macOS / iOS target architecture which will be used by CMake. See the CMake documentation for \u003ca href=\"https://cmake.org/cmake/help/latest/variable/CMAKE_OSX_ARCHITECTURES.html\"\u003eCMAKE_OSX_ARCHITECTURES\u003c/a\u003e for more information.\u003c/p\u003e\n\u003ch2 id=\"per-port-customization\"\u003ePer-port customization\u003c/h2\u003e\n\u003cp\u003eThe CMake Macro \u003ccode\u003ePORT\u003c/code\u003e will be set when interpreting the triplet file and can be used to change settings (such as \u003ccode\u003eVCPKG_LIBRARY_LINKAGE\u003c/code\u003e) on a per-port basis.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"cmake language-cmake\"\u003eset(VCPKG_LIBRARY_LINKAGE static)\nif(PORT MATCHES \"qt5-\")\n    set(VCPKG_LIBRARY_LINKAGE dynamic)\nendif()\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will build all the \u003ccode\u003eqt5-*\u003c/code\u003e libraries as DLLs, but every other library as a static library.\u003c/p\u003e\n\u003cp\u003eFor an example in a real project, see \u003ca href=\"https://github.com/Intelight/vcpkg/blob/master/triplets/x86-windows-mixed.cmake\"\u003ehttps://github.com/Intelight/vcpkg/blob/master/triplets/x86-windows-mixed.cmake\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"additional-remarks\"\u003eAdditional Remarks\u003c/h2\u003e\n\u003cp\u003eThe default triplet when running any vcpkg command is \u003ccode\u003e%VCPKG_DEFAULT_TRIPLET%\u003c/code\u003e or a platform-specific choice if that environment variable is undefined.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWindows: \u003ccode\u003ex86-windows\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eLinux: \u003ccode\u003ex64-linux\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eOSX: \u003ccode\u003ex64-osx\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe recommend using a systematic naming scheme when creating new triplets. The Android toolchain naming scheme is a good source of inspiration: \u003ca href=\"https://developer.android.com/ndk/guides/standalone_toolchain.html\"\u003ehttps://developer.android.com/ndk/guides/standalone_toolchain.html\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"android-triplets\"\u003eAndroid triplets\u003c/h2\u003e\n\u003cp\u003eSee \u003ca href=\"android.md\"\u003eandroid.md\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#users"
    },
    {
        "Path":  "/en/docs/users/versioning.getting-started.html",
        "Name":  "Get Started with Versioning",
        "Source":  "\u003ch1 id=\"getting-started-with-versioning\"\u003eGetting started with versioning\u003c/h1\u003e\n\u003cp\u003eVcpkg lets you take control of which version of packages to install in your projects using manifests. \u003c/p\u003e\n\u003ch2 id=\"enabling-versions\"\u003eEnabling versions\u003c/h2\u003e\n\u003cp\u003eTo start using the versioning feature, first you need to enable the \u003ccode\u003eversions\u003c/code\u003e feature flag in any of the following manners:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSetting the \u003ccode\u003eVCPKG_FEATURE_FLAGS\u003c/code\u003e environment variable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"PowerShell language-PowerShell\"\u003e# Example for PowerShell\n$env:VCPKG_FEATURE_FLAGS=\"versions\"\n./vcpkg install\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003ePassing the feature flags in the vcpkg command line.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class=\"PowerShell language-PowerShell\"\u003e./vcpkg --feature-flags=\"versions\" install\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"using-versions-with-manifests\"\u003eUsing versions with manifests\u003c/h2\u003e\n\u003cp\u003eWith the \u003ccode\u003eversions\u003c/code\u003e feature flag enabled you can start addding version constraints to your dependencies.\u003c/p\u003e\n\u003cp\u003eLet\u0027s start with creating a simple CMake project that depends on \u003ccode\u003efmt\u003c/code\u003e and \u003ccode\u003ezlib\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eCreate a folder with the following files:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003evcpkg.json\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\n    \"name\": \"versions-test\",\n    \"version\": \"1.0.0\",\n    \"dependencies\": [\n        {\n            \"name\": \"fmt\",\n            \"version\u0026gt;=\": \"7.1.3\"\n        }, \n        \"zlib\"\n    ],\n    \"builtin-baseline\": \"b60f003ccf5fe8613d029f49f835c8929a66eb61\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003emain.cpp\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"c++ language-c++\"\u003e#include \u0026lt;fmt/core.h\u0026gt;\n#include \u0026lt;zlib.h\u0026gt;\n\nint main()\n{\n    fmt::print(\"fmt version is {}\\n\"\n               \"zlib version is {}\\n\", \n               FMT_VERSION, ZLIB_VERSION);\n    return 0;\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eCMakeLists.txt\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"CMake language-CMake\"\u003ecmake_minimum_required(VERSION 3.18)\n\nproject(versions-test CXX)\n\nadd_executable(main main.cpp)\n\nfind_package(ZLIB REQUIRED)\nfind_package(fmt CONFIG REQUIRED)\ntarget_link_libraries(main PRIVATE ZLIB::ZLIB fmt::fmt)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd now we build and run our project with CMake:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCreate the build directory for the project.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003ePS D:\\versions-test\u0026gt; mkdir build\nPS D:\\versions-test\u0026gt; cd build\u003c/code\u003e\u003c/pre\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003eConfigure CMake.  \u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003ePS D:\\versions-test\\build\u0026gt; cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE=D:/vcpkg/scripts/buildsystems/vcpkg.cmake ..\n-- Running vcpkg install\nDetecting compiler hash for triplet x86-windows...\nThe following packages will be built and installed:\n    fmt[core]:x86-windows -\u0026gt; 7.1.3 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\fmt\\dd8cf5e1a2dce2680189a0744102d4b0f1cfb8b6\n    zlib[core]:x86-windows -\u0026gt; 1.2.11#9 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\zlib\\827111046e37c98153d9d82bb6fa4183b6d728e4\n...\u003c/code\u003e\u003c/pre\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003eBuild the project.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003ePS D:\\versions-test\\build\u0026gt; cmake --build .\n[2/2] Linking CXX executable main.exe\u003c/code\u003e\u003c/pre\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003eRun it!\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003ePS D:\\versions-test\\build\u0026gt; ./main.exe\nfmt version is 70103\nzlib version is 1.2.11\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTake a look at the output:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efmt[core]:x86-windows -\u0026gt; 7.1.3 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\fmt\\dd8cf5e1a2dce2680189a0744102d4b0f1cfb8b6\nzlib[core]:x86-windows -\u0026gt; 1.2.11#9 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\zlib\\827111046e37c98153d9d82bb6fa4183b6d728e4\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstead of using the portfiles in \u003ccode\u003eports/\u003c/code\u003e; vcpkg is checking out the files for each version in \u003ccode\u003ebuildtrees/versioning/versions/\u003c/code\u003e.  The files in \u003ccode\u003eports/\u003c/code\u003e are still used when running vcpkg in classic mode or when the \u003ccode\u003eversions\u003c/code\u003e feature flag is disabled. \u003c/p\u003e\n\u003cp\u003e\u003cem\u003eNOTE: Output from the vcpkg while configuring CMake is only available when using CMake version \u003ccode\u003e3.18\u003c/code\u003e or newer. If you\u0027re using an older CMake you can check the \u003ccode\u003evcpkg-manifest-install.log\u003c/code\u003e file in your build directory instead.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eRead our \u003ca href=\"https://devblogs.microsoft.com/cppblog/vcpkg-accelerate-your-team-development-environment-with-binary-caching-and-manifests/#using-manifests-with-msbuild-projects\"\u003emanifests announcement blog post\u003c/a\u003e to learn how to use manifests with MSBuild.\u003c/p\u003e\n\u003ch3 id=\"manifest-changes\"\u003eManifest changes\u003c/h3\u003e\n\u003cp\u003eIf you have used manifests before you will notice that there are some new JSON properties. Let\u0027s review these changes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eversion\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e{\n    \"name\": \"versions-test\",\n    \"version\": \"1.0.0\",\n    ...\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is your project\u0027s version declaration. Previously, you could only declare versions for your projects using the \u003ccode\u003eversion-string\u003c/code\u003e property. Now that versioning has come around, vcpkg is aware of some new versioning schemes.\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth id=\"version_scheme\"\u003eVersion scheme\u003c/th\u003e\n\u003cth id=\"description\"\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eversion\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eDot-separated numerics: \u003ccode\u003e1.0.0\u003c/code\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eversion-semver\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eCompliant \u003ca href=\"https://semver.org\"\u003esemantic versions\u003c/a\u003e: \u003ccode\u003e1.2.0\u003c/code\u003e and \u003ccode\u003e1.2.0-rc\u003c/code\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eversion-date\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eDates in \u003ccode\u003eYYYY-MM-DD\u003c/code\u003e format: \u003ccode\u003e2021-01-01\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eversion-string\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eArbitrary strings: \u003ccode\u003evista\u003c/code\u003e, \u003ccode\u003ecandy\u003c/code\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eversion\u0026gt;=\u003c/code\u003e\u003c/strong\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e\"dependencies\": [\n    {\n        \"name\": \"fmt\",\n        \"version\u0026gt;=\": \"7.1.3\"\n    }, \n    \"zlib\"\n],\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis property is used to express minimum version constraints, it is allowed only as part of the \u003ccode\u003e\"dependencies\"\u003c/code\u003e declarations. In our example we set an explicit constraint on version \u003ccode\u003e7.1.3\u003c/code\u003e of \u003ccode\u003efmt\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eVcpkg is allowed to upgrade this constraint if a transitive dependency requires a newer version. For example, if \u003ccode\u003ezlib\u003c/code\u003e were to declare a dependency on \u003ccode\u003efmt\u003c/code\u003e version \u003ccode\u003e7.1.4\u003c/code\u003e then vcpkg would install \u003ccode\u003e7.1.4\u003c/code\u003e instead.\u003c/p\u003e\n\u003cp\u003eVcpkg uses a minimum version approach, in our example, even if \u003ccode\u003efmt\u003c/code\u003e version \u003ccode\u003e8.0.0\u003c/code\u003e were to be released, vcpkg would still install version \u003ccode\u003e7.1.3\u003c/code\u003e as that is the minimum version that satisfies the constraint. The advantages of this approach are that you don\u0027t get unexpected dependency upgrades when you update vcpkg and you get reproducible builds (in terms of version used) as long as you use the same manifest. \u003c/p\u003e\n\u003cp\u003eIf you want to upgrade your dependencies, you can bump the minimum version constraint or use a newer baseline.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ebuiltin-baseline\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e\"builtin-baseline\": \"b60f003ccf5fe8613d029f49f835c8929a66eb61\"\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis field declares the versioning baseline for all ports. Setting a baseline is required to enable versioning, otherwise you will get the current versions on the ports directory. You can run \u0027git rev-parse HEAD\u0027 to get the current commit of vcpkg and set it as the builtin-baseline. But what is a baseline? What does it do? Why is the value a SHA?\u003c/p\u003e\n\u003cp\u003eFrom the \u003ca href=\"versioning.md\"\u003eversioning documentation\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eThe baseline references a commit within the vcpkg repository that\u003cbr /\u003e\n  establishes a minimum version on every dependency in the graph. If\u003cbr /\u003e\n  no other constraints are specified (directly or transitively),\u003cbr /\u003e\n  then the version from the baseline of the top level manifest will\u003cbr /\u003e\n  be used.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIn our example, you can notice that we do not declare a version constraint for \u003ccode\u003ezlib\u003c/code\u003e; instead, the version is taken from the baseline. Internally, vcpkg will look in commit \u003ccode\u003eb60f003ccf5fe8613d029f49f835c8929a66eb61\u003c/code\u003e to find out what version of \u003ccode\u003ezlib\u003c/code\u003e was the latest at that point in time (in our case it was \u003ccode\u003e1.2.11#9\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eDuring version resolution, baseline versions are treated as minimum version constraints. If you declare an explicit constraint that is lower than a baseline version, the explicit constraint will be upgraded to the baseline version. \u003c/p\u003e\n\u003cp\u003eFor example, if we modified our dependencies like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"dependencies\": [\n    {\n        \"name\": \"fmt\",\n        \"version\u0026gt;=\": \"7.1.3\"\n    },\n    {\n        \"name\": \"zlib\",\n        \"version\u0026gt;=\": \"1.2.11#7\"\n    }\n]\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eNOTE: The value \u003ccode\u003e1.2.11#7\u003c/code\u003e represents version \u003ccode\u003e1.2.11\u003c/code\u003e, port version \u003ccode\u003e7\u003c/code\u003e.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eSince the baseline introduces a minimum version constraint for \u003ccode\u003ezlib\u003c/code\u003e at \u003ccode\u003e1.2.11#9\u003c/code\u003e and a higher version does satisfy the minimum version constraint for \u003ccode\u003e1.2.11#7\u003c/code\u003e, vcpkg is allowed to upgrade it. \u003c/p\u003e\n\u003cp\u003eBaselines are also a convenient mechanism to upgrade multiple versions at a time, for example, if you wanted to depend on multiple \u003ccode\u003eboost\u003c/code\u003e libraries, it is more convenient to set the \u003ccode\u003ebaseline\u003c/code\u003e once than declaring a version constraint on each package.\u003c/p\u003e\n\u003cp\u003eBut what if you want to pin a version older than the baseline? \u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eoverrides\u003c/code\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSince baselines establish a version floor for all packages and explicit constraints get upgraded when they are lower than the baseline, we need another mechanism to downgrade versions past the baseline.\u003c/p\u003e\n\u003cp\u003eThe mechanism vcpkg provides for that scenario is \u003ccode\u003eoverrides\u003c/code\u003e. When an override is declared on a package, vcpkg will ignore all other version constraints either directly declared in the manifest or from transitive dependencies. In short, \u003ccode\u003eoverrides\u003c/code\u003e will force vcpkg to use the exact version declared, period.\u003c/p\u003e\n\u003cp\u003eLet\u0027s modify our example once more, this time to force vcpkg to use version \u003ccode\u003e6.0.0\u003c/code\u003e of \u003ccode\u003efmt\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\n    \"name\": \"versions-test\",\n    \"version\": \"1.0.0\",\n    \"dependencies\": [\n        {\n            \"name\": \"fmt\",\n            \"version\u0026gt;=\": \"7.1.3\"\n        },\n        {\n            \"name\": \"zlib\",\n            \"version\u0026gt;=\": \"1.2.11#7\"\n        }\n    ],\n    \"builtin-baseline\": \"b60f003ccf5fe8613d029f49f835c8929a66eb61\",\n    \"overrides\": [\n        {\n            \"name\": \"fmt\",\n            \"version\": \"6.0.0\"\n        }\n    ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRebuild our project:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePS D:\\versions-test\\build\u0026gt; rm ./CMakeCache.txt\nPS D:\\versions-test\\build\u0026gt; rm -r ./vcpkg_installed\nPS D:\\versions-test\\build\u0026gt; cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE=D:/vcpkg/scripts/buildsystems/vcpkg.cmake ..\n-- Running vcpkg install\nDetecting compiler hash for triplet x86-windows...\nThe following packages will be built and installed:\n    fmt[core]:x86-windows -\u0026gt; 6.0.0 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\fmt\\d99b6a35e1406ba6b6e09d719bebd086f83ed5f3\n    zlib[core]:x86-windows -\u0026gt; 1.2.11#9 -- D:\\vcpkg\\buildtrees\\versioning\\versions\\zlib\\827111046e37c98153d9d82bb6fa4183b6d728e4\n...\nPS D:\\versions-test\\build\u0026gt; cmake --build .\n[2/2] Linking CXX executable main.exe\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd run it!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePS D:\\versions-test\\build\u0026gt; .\\main.exe\nfmt version is 60000\nzlib version is 1.2.11\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice how the \u003ccode\u003efmt\u003c/code\u003e is now at version \u003ccode\u003e6.0.0\u003c/code\u003e just like we wanted.\u003c/p\u003e\n\u003ch2 id=\"versions-and-custom-ports\"\u003eVersions and custom ports\u003c/h2\u003e\n\u003cp\u003eThe last thing to discuss is how overlay ports interact with versioning resolution. The answer is: they don\u0027t. \u003c/p\u003e\n\u003cp\u003eGoing into more detail, when you provide an overlay for a port, vcpkg will always use the overlay port without caring what version is contained in it. The reasons are two-fold: (1) it is consistent with the existing behavior of overlay ports of completely masking the existing port, and (2) overlay ports do not (and are not expected to) provide enough information to power vcpkg\u0027s versioning feature.\u003c/p\u003e\n\u003cp\u003eIf you want to have flexible port customization along with versioning features, you should consider making your own custom registry. See our \u003ca href=\"../specifications/registries.md\"\u003eregistries specification for more details\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"further-reading\"\u003eFurther reading\u003c/h2\u003e\n\u003cp\u003eIf you\u0027re interested in delving deeper into the details of how versioning works we recommended that you read the \u003ca href=\"../specifications/versioning.md\"\u003eoriginal versioning specification\u003c/a\u003e and the \u003ca href=\"versioning.implementation-details.md\"\u003eimplementation details\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eSee also:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"versioning.md\"\u003eVersioning docs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../specifications/versioning.md\"\u003eOriginal specification\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"versioning.reference.md\"\u003eVersioning reference\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"versioning.implementation-details.md\"\u003eVersioning implementation details\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
        "Nav":  "#users"
    },
    {
        "Path":  "/en/docs/users/versioning.implementation-details.html",
        "Name":  "Versioning.implementation Details",
        "Source":  "\u003ch1 id=\"versioning-implementation-details\"\u003eVersioning: Implementation details\u003c/h1\u003e\n\u003ch2 id=\"contents\"\u003eContents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#minimum-versioning\"\u003eMinimum versioning\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#constraint-resolution\"\u003eConstraint resolution\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#acquiring-port-versions\"\u003eAcquiring port versions\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"minimum-versioning\"\u003eMinimum versioning\u003c/h3\u003e\n\u003cp\u003eVcpkg uses a minimal selection approach to versioning, inspired by the one \u003ca href=\"https://research.swtch.com/vgo-mvs\"\u003eused by Go\u003c/a\u003e. But modified in some ways:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAlways starts from a fresh install, eliminates the need for upgrade/downgrade operations.\u003c/li\u003e\n\u003cli\u003eAllow unconstrained dependencies by introducing baselines.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe minimal selection principle, however, stays the same. Given a set of constraints, vcpkg will use the \"oldest\" possible versions of packages that can satisfy all the constraints.\u003c/p\u003e\n\u003cp\u003eUsing a minimum version approach has the following advantages:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIs predictable and easy to understand.\u003c/li\u003e\n\u003cli\u003eUser controls when upgrades happen, as in, no upgrades are performed automatically when a new version is released.\u003c/li\u003e\n\u003cli\u003eAvoids using a SAT solver.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo give an example, consider the following package graph:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    (A 1.0) -\u0026gt; (B 1.0)\n\n    (A 1.1) -\u0026gt; (B 1.0) \n            -\u0026gt; (C 3.0) \n\n    (A 1.2) -\u0026gt; (B 2.0)\n            -\u0026gt; (C 3.0)\n\n    (C 2.0)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd the following manifest:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\n    \"name\": \"example\",\n    \"version\": \"1.0.0\",\n    \"dependencies\": [ \n        { \"name\": \"A\", \"version\u0026gt;=\": \"1.1\" },\n        { \"name\": \"C\", \"version\u0026gt;=\": \"2.0\" }\n    ], \n    \"builtin-baseline\": \"\u0026lt;some git commit with A\u0027s baseline at 1.0\u0026gt;\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter accounting for transitive dependencies we have the following set of constraints:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA \u0026gt;= 1.1\u003cul\u003e\n\u003cli\u003eB \u0026gt;= 1.0\u003c/li\u003e\n\u003cli\u003eC \u0026gt;= 3.0\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eC \u0026gt;= 2.0\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSince vcpkg has to satisfy all the constraints, the set of installed packages becomes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eA 1.1\u003c/code\u003e, even when \u003ccode\u003eA 1.2\u003c/code\u003e exists, there are no constraints higher than \u003ccode\u003e1.1\u003c/code\u003e so vcpkg selects the minimum version possible.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eB 1.0\u003c/code\u003e, transitively required by \u003ccode\u003eA 1.1\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eC 3.0\u003c/code\u003e, upgraded by the transitive constraint added by \u003ccode\u003eB 1.0\u003c/code\u003e in order to satisfy version constraints.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"constraint-resolution\"\u003eConstraint resolution\u003c/h2\u003e\n\u003cp\u003eGiven a manifest with a set of versioned dependencies, vcpkg will attempt to calculate a package installation plan that satisfies all the constraints. \u003c/p\u003e\n\u003cp\u003eVersion constraints come in the following flavors:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDeclared constraints\u003c/strong\u003e: Constraints declared explicitly in the top-level manifest using \u003ccode\u003eversion\u0026gt;=\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBaseline constraints\u003c/strong\u003e: Constraints added implicitly by the \u003ccode\u003ebuiltin-baseline\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTransitive constraints\u003c/strong\u003e: Constraints added indirectly by dependencies of your dependencies.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOverriden constraints\u003c/strong\u003e: Constraints overriden in the top-level manifest using \u003ccode\u003eoverrides\u003c/code\u003e declarations.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo compute an installation plan, vcpkg follows roughly these steps:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAdd all top-level constraints to the plan.\u003c/li\u003e\n\u003cli\u003eRecursively add transitive constraints to the plan.\u003cul\u003e\n\u003cli\u003eEach time a new package is added to the plan, also add its baseline constraint to the plan.\u003c/li\u003e\n\u003cli\u003eEach time a constraint is added:\u003c/li\u003e\n\u003cli\u003eIf an override exists for the package\u003cul\u003e\n\u003cli\u003eSelect the version in the override.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eOtherwise:\u003cul\u003e\n\u003cli\u003eIf there is no previous version selected. \u003cul\u003e\n\u003cli\u003eSelect the minimal version that satisfies the constraint.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eIf there is a previous version selected:\u003cul\u003e\n\u003cli\u003eIf the versioning scheme of the new constraint does not match that of the previously selected version:\u003cul\u003e\n\u003cli\u003eAdd a version conflict.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eIf the constraint???s version is not comparable to the previously selected version. For example, comparing ???version-string: apple??? to ???version-string: orange???:\u003cul\u003e\n\u003cli\u003eAdd a version conflict.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eIf the constraints version is higher than the previously selected version:\u003cul\u003e\n\u003cli\u003eSelect the highest version.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eOtherwise: \u003cul\u003e\n\u003cli\u003eKeep the previous selection.\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eReview the plan:\u003cul\u003e\n\u003cli\u003eIf there are no conflicts\u003c/li\u003e\n\u003cli\u003eInstall the selected packages\u003c/li\u003e\n\u003cli\u003eOtherwise:\u003c/li\u003e\n\u003cli\u003eReport the conflicts to the user\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"acquiring-port-versions\"\u003eAcquiring port versions\u003c/h2\u003e\n\u003cp\u003eAlthough the concept of package versions has always been present in vcpkg, the concept of version constraints has been not.\u003c/p\u003e\n\u003cp\u003eWith the introduction of versioning constraints, it is now possible that a package depends on a port version that does not match the one available locally. This raises a problem as vcpkg needs to know how to acquire the port files for the requested version.\u003c/p\u003e\n\u003cp\u003eTo solve this problem, a new set of metadata files was introduced. These files are located in the \u003ccode\u003eversions/\u003c/code\u003e directory at the root level of the vcpkg repository.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eversions/\u003c/code\u003e directory, will contain JSON files for each one of the ports available in the registry. Each file will list all the versions available for a package and contain a Git tree-ish object that vcpkg can check out to obtain that version???s portfiles.\u003c/p\u003e\n\u003cp\u003eExample: \u003ccode\u003ezlib.json\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\n  \"versions\": [\n    {\n      \"git-tree\": \"2dfc991c739ab9f2605c2ad91a58a7982eb15687\",\n      \"version-string\": \"1.2.11\",\n      \"port-version\": 9\n    },\n    ...\n    {\n      \"git-tree\": \"a516e5ee220c8250f21821077d0e3dd517f02631\",\n      \"version-string\": \"1.2.10\",\n      \"port-version\": 0\n    },\n    {\n      \"git-tree\": \"3309ec82cd96d752ff890c441cb20ef49b52bf94\",\n      \"version-string\": \"1.2.8\",\n      \"port-version\": 0\n    }\n  ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor each port, its corresponding versions file should be located in \u003ccode\u003eversions/{first letter of port name}-/{port name}.json\u003c/code\u003e. For example, zlib???s version file will be located in \u003ccode\u003eversions/z-/zlib.json\u003c/code\u003e. Aside from port version files, the current baseline file is located in \u003ccode\u003eversions/baseline.json\u003c/code\u003e.\u003c/p\u003e",
        "Nav":  "#users"
    },
    {
        "Path":  "/en/docs/users/versioning.html",
        "Name":  "versioning",
        "Source":  "\u003ch1 id=\"versioning\"\u003eVersioning\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eThis feature is experimental and requires \u003ccode\u003e--feature-flags=versions\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eVersioning allows you to deterministically control the precise revisions of dependencies used by\u003cbr /\u003e\nyour project from within your manifest file.\u003c/p\u003e\n\u003cp\u003eSee our guide to \u003ca href=\"versioning.getting-started.md\"\u003egetting started with versioning\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"version-schemes\"\u003eVersion schemes\u003c/h2\u003e\n\u003ch3 id=\"schemes\"\u003eSchemes\u003c/h3\u003e\n\u003cp\u003eVersions in vcpkg come in four primary flavors:\u003c/p\u003e\n\u003ch4 id=\"version\"\u003eversion\u003c/h4\u003e\n\u003cp\u003eA dot-separated sequence of numbers (1.2.3.4)\u003c/p\u003e\n\u003ch4 id=\"version-date\"\u003eversion-date\u003c/h4\u003e\n\u003cp\u003eA date (2021-01-01.5)\u003c/p\u003e\n\u003ch4 id=\"version-semver\"\u003eversion-semver\u003c/h4\u003e\n\u003cp\u003eA Semantic Version 2.0 (2.1.0-rc2)\u003c/p\u003e\n\u003cp\u003eSee \u003ca href=\"https://semver.org/\"\u003ehttps://semver.org/\u003c/a\u003e for a full specification.\u003c/p\u003e\n\u003ch4 id=\"version-string\"\u003eversion-string\u003c/h4\u003e\n\u003cp\u003eAn exact, incomparable version (Vista)\u003c/p\u003e\n\u003ch3 id=\"port-versions\"\u003ePort Versions\u003c/h3\u003e\n\u003cp\u003eEach version additionally has a \"port-version\" which is a nonnegative integer. When rendered as text, the\u003cbr /\u003e\nport version (if nonzero) is added as a suffix to the primary version text separated by a hash (#).\u003cbr /\u003e\nPort-versions are sorted lexographically after the primary version text, for example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1.0.0 \u0026lt; 1.0.0#1 \u0026lt; 1.0.1 \u0026lt; 1.0.1#5 \u0026lt; 2.0.0\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"constraints\"\u003eConstraints\u003c/h2\u003e\n\u003cp\u003eManifests can place three kinds of constraints upon the versions used:\u003c/p\u003e\n\u003ch3 id=\"builtin-baseline\"\u003ebuiltin-baseline\u003c/h3\u003e\n\u003cp\u003eThe baseline references a commit within the vcpkg repository that\u003cbr /\u003e\nestablishes a minimum version on every dependency in the graph. If\u003cbr /\u003e\nno other constraints are specified (directly or transitively),\u003cbr /\u003e\nthen the version from the baseline of the top level manifest will\u003cbr /\u003e\nbe used.\u003c/p\u003e\n\u003cp\u003eYou can get the current commit of your vcpkg instance either by adding an empty \u003ccode\u003e\"builtin-baseline\"\u003c/code\u003e field, installing, and examining the error message or by running \u003ccode\u003egit rev-parse HEAD\u003c/code\u003e in the root of the vcpkg instance.\u003c/p\u003e\n\u003cp\u003eBaselines provide stability and ease of development for top-level manifest files. They are not considered from ports consumed as a dependency. If a minimum version constraint is required during transitive version resolution, the port should use \u003ccode\u003eversion\u0026gt;=\u003c/code\u003e.\u003c/p\u003e\n\u003ch3 id=\"version-1\"\u003eversion\u0026gt;=\u003c/h3\u003e\n\u003cp\u003eWithin the \"dependencies\" field, each dependency can have a\u003cbr /\u003e\nminimum constraint listed. These minimum constraints will be used\u003cbr /\u003e\nwhen transitively depending upon this library. A minimum\u003cbr /\u003e\nport-version can additionally be specified with a \u0027#\u0027 suffix.\u003c/p\u003e\n\u003cp\u003eThis constraint must refer to an existing, valid version (including port-version).\u003c/p\u003e\n\u003ch3 id=\"overrides\"\u003eoverrides\u003c/h3\u003e\n\u003cp\u003eWhen used as the top-level manifest (such as when running \u003ccode\u003evcpkg\ninstall\u003c/code\u003e in the directory), overrides allow a manifest to\u003cbr /\u003e\nshort-circuit dependency resolution and specify exactly the\u003cbr /\u003e\nversion to use. These can be used to handle version conflicts,\u003cbr /\u003e\nsuch as with \u003ccode\u003eversion-string\u003c/code\u003e dependencies.\u003c/p\u003e\n\u003cp\u003eOverrides are not considered from ports consumed as a dependency.\u003c/p\u003e\n\u003ch2 id=\"example-top-level-manifest\"\u003eExample top-level manifest:\u003c/h2\u003e\n\u003cpre\u003e\u003ccode class=\"json language-json\"\u003e{\n    \"name\": \"example\",\n    \"version\": \"1.0\",\n    \"builtin-baseline\": \"a14a6bcb27287e3ec138dba1b948a0cdbc337a3a\",\n    \"dependencies\": [\n        { \"name\": \"zlib\", \"version\u0026gt;=\": \"1.2.11#8\" },\n        \"rapidjson\"\n    ],\n    \"overrides\": [\n        { \"name\": \"rapidjson\", \"version\": \"2020-09-14\" }\n    ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSee also the \u003ca href=\"manifests.md\"\u003emanifest documentation\u003c/a\u003e for more syntax information.\u003c/p\u003e\n\u003ch2 id=\"original-specification\"\u003eOriginal Specification\u003c/h2\u003e\n\u003cp\u003eSee also the \u003ca href=\"https://github.com/vicroms/vcpkg/blob/versioning-spec/docs/specifications/versioning.md\"\u003eoriginal specification\u003c/a\u003e\u003c/p\u003e",
        "Nav":  "#users"
    },
    {
        "Path":  "/en/docs/users/versioning.reference.html",
        "Name":  "versioning.reference",
        "Source":  "\u003ch1 id=\"versioning-reference\"\u003eVersioning reference\u003c/h1\u003e\n\u003ch2 id=\"contents\"\u003eContents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#version-schemes\"\u003eVersion schemes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#version-files\"\u003eVersion files\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#version-constraints\"\u003eVersion constraints\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"version-schemes\"\u003eVersion schemes\u003c/h2\u003e\n\u003cp\u003ePorts in vcpkg should attempt to follow the versioning conventions used by the package???s authors. For that reason, when declaring a package???s version the appropriate scheme should be used.\u003c/p\u003e\n\u003cp\u003eEach versioning scheme defines its own rules on what is a valid version string and more importantly the rules for how to sort versions using the same scheme.\u003c/p\u003e\n\u003cp\u003eThe versioning schemes understood by vcpkg are:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth id=\"manifest_property\"\u003eManifest property\u003c/th\u003e\n\u003cth id=\"versioning_scheme\"\u003eVersioning scheme\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eversion\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eFor dot-separated numeric versions\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eversion-semver\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eFor SemVer compliant versions\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eversion-date\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eFor dates in the format YYYY-MM-DD\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eversion-string\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eFor arbitrary strings\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eA manifest must contain only one version declaration.\u003c/p\u003e\n\u003ch4 id=\"version\"\u003e\u003ccode\u003eversion\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eAccepts version strings that follow a relaxed, dot-separated-, semver-like scheme.\u003c/p\u003e\n\u003cp\u003eThe version is logically composed of dot-separated (\u003ccode\u003e.\u003c/code\u003e) numeric sections. Each section must contain an integer positive number with no leading zeroes.\u003c/p\u003e\n\u003cp\u003eThe regex pattern for this versioning scheme is: \u003ccode\u003e(0|[1-9]\\d*)(\\.(0|[1-9]\\d*))*\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSorting behavior\u003c/em\u003e: When comparing two versions, each section is compared from left to right by their numeric value, until the first difference is found. A version with the smallest set of sections takes precedence over another with a larger set of sections, given that all their preceding sections compare equally.\u003c/p\u003e\n\u003cp\u003eExample:  \u003cbr /\u003e\n\u003ccode\u003e0\u003c/code\u003e \u0026lt; \u003ccode\u003e0.1\u003c/code\u003e \u0026lt; \u003ccode\u003e0.1.0\u003c/code\u003e \u0026lt; \u003ccode\u003e1\u003c/code\u003e \u0026lt; \u003ccode\u003e1.0.0\u003c/code\u003e \u0026lt; \u003ccode\u003e1.0.1\u003c/code\u003e \u0026lt; \u003ccode\u003e1.1\u003c/code\u003e\u0026lt; \u003ccode\u003e2.0.0\u003c/code\u003e\u003c/p\u003e\n\u003ch4 id=\"version-semver\"\u003e\u003ccode\u003eversion-semver\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eAccepts version strings that follow semantic versioning conventions as described in the \u003ca href=\"https://semver.org/#semantic-versioning-specification-semver\"\u003esemantic versioning specification\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSorting behavior\u003c/em\u003e: Strings are sorted following the rules described in the semantic versioning specification.\u003c/p\u003e\n\u003cp\u003eExample: \u003cbr /\u003e\n\u003ccode\u003e1.0.0-1\u003c/code\u003e \u0026lt; \u003ccode\u003e1.0.0-alpha\u003c/code\u003e \u0026lt; \u003ccode\u003e1.0.0-beta\u003c/code\u003e \u0026lt; \u003ccode\u003e1.0.0\u003c/code\u003e \u0026lt; \u003ccode\u003e1.0.1\u003c/code\u003e \u0026lt; \u003ccode\u003e1.1.0\u003c/code\u003e\u003c/p\u003e\n\u003ch4 id=\"version-date\"\u003e\u003ccode\u003eversion-date\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eAccepts version strings that can be parsed to a date following the ISO-8601 format \u003ccode\u003eYYYY-MM-DD\u003c/code\u003e. Disambiguation identifiers are allowed in the form of dot-separated-, positive-, integer-numbers with no leading zeroes.\u003c/p\u003e\n\u003cp\u003eThe regex pattern for this versioning scheme is: \u003ccode\u003e\\d{4}-\\d{2}-\\d{2}(\\.(0|[1-9]\\d*))*\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSorting behavior\u003c/em\u003e: Strings are sorted first by their date part, then by numeric comparison of their disambiguation identifiers. Disambiguation identifiers follow the rules of the relaxed (\u003ccode\u003eversion\u003c/code\u003e) scheme.\u003c/p\u003e\n\u003cp\u003eExamples:\u003cbr /\u003e\n\u003ccode\u003e2021-01-01\u003c/code\u003e \u0026lt; \u003ccode\u003e2021-01-01.1\u003c/code\u003e \u0026lt; \u003ccode\u003e2021-02-01.1.2\u003c/code\u003e \u0026lt; \u003ccode\u003e2021-02-01.1.3\u003c/code\u003e \u0026lt; \u003ccode\u003e2021-02-01\u003c/code\u003e\u003c/p\u003e\n\u003ch4 id=\"version-string\"\u003e\u003ccode\u003eversion-string\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eFor packages using version strings that do not fit any of the other schemes, it accepts most arbitrary strings.  The \u003ccode\u003e#\u003c/code\u003e which is used to denote port versions is disallowed.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSorting behavior\u003c/em\u003e: No sorting is attempted on the version string itself. However, if the strings match exactly, their port versions can be compared and sorted.\u003c/p\u003e\n\u003cp\u003eExamples: \u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eapple\u003c/code\u003e \u0026lt;\u0026gt; \u003ccode\u003eorange\u003c/code\u003e \u0026lt;\u0026gt; \u003ccode\u003eorange.2\u003c/code\u003e \u0026lt;\u0026gt; \u003ccode\u003eorange2\u003c/code\u003e  \u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewatermelon#0\u003c/code\u003e\u0026lt; \u003ccode\u003ewatermelon#1\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"port-version\"\u003e\u003ccode\u003eport-version\u003c/code\u003e\u003c/h4\u003e\n\u003cp\u003eA positive integer value that increases each time a vcpkg-specific change is made to the port.  \u003c/p\u003e\n\u003cp\u003eThe rules for port versions are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eStart at 0 for the original version of the port,\u003c/li\u003e\n\u003cli\u003eincrease by 1 each time a vcpkg-specific change is made to the port that does not increase the version of the package,\u003c/li\u003e\n\u003cli\u003eand reset to 0 each time the version of the package is updated.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003eNOTE: Whenever vcpkg output a version it follows the format \u003ccode\u003e\u0026lt;version\u0026gt;#\u0026lt;port version\u0026gt;\u003c/code\u003e. For example \u003ccode\u003e1.2.0#2\u003c/code\u003e means version \u003ccode\u003e1.2.0\u003c/code\u003e port version \u003ccode\u003e2\u003c/code\u003e. When the port version is \u003ccode\u003e0\u003c/code\u003e the \u003ccode\u003e#0\u003c/code\u003e suffix is omitted (\u003ccode\u003e1.2.0\u003c/code\u003e implies version \u003ccode\u003e1.2.0\u003c/code\u003e port version \u003ccode\u003e0\u003c/code\u003e).\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSorting behavior\u003c/em\u003e: If two versions compare equally, their port versions are compared by their numeric value, lower port versions take precedence.\u003c/p\u003e\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e1.2.0\u003c/code\u003e \u0026lt; \u003ccode\u003e1.2.0#1\u003c/code\u003e \u0026lt; \u003ccode\u003e1.2.0#2\u003c/code\u003e \u0026lt; \u003ccode\u003e1.2.0#10\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2021-01-01#20\u003c/code\u003e \u0026lt; \u003ccode\u003e2021-01-01.1\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewindows#7\u003c/code\u003e \u0026lt; \u003ccode\u003ewindows#8\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"version-files\"\u003eVersion files\u003c/h2\u003e\n\u003cp\u003eVcpkg uses a set of metadata files to power its versioning feature.\u003c/p\u003e\n\u003cp\u003eThese files are located in the following locations:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e${VCPKG_ROOT}/versions/baseline.json\u003c/code\u003e, (this file is common to all ports) and\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e${VCPKG_ROOT}/versions/${first-letter-of-portname}-/${portname}.json\u003c/code\u003e (one per port).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor example, for \u003ccode\u003ezlib\u003c/code\u003e the relevant files are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e${VCPKG_ROOT}/versions/baseline.json\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e${VCPKG_ROOT}/versions/z-/zlib.json\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCI checks validate that each time a port is added or updated, its respective version files are also updated. \u003c/p\u003e\n\u003ch3 id=\"baseline-file\"\u003eBaseline file\u003c/h3\u003e\n\u003cp\u003eThe baseline file located in \u003ccode\u003e${VCPKG_ROOT}/versions/baseline.json\u003c/code\u003e is used to declared the current baseline versions of all packages. \u003c/p\u003e\n\u003cp\u003eA small section of the contents of this file is presented below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\n  \"default\": {\n    \"3fd\": { \"baseline\": \"2.6.3\", \"port-version\": 0 },\n    \"7zip\": { \"baseline\": \"19.00\", \"port-version\": 2 },\n    \"abseil\": { \"baseline\": \"2020-09-23\", \"port-version\": 1 }\n    ...\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eProvided that there are no local modifications to the ports, the versions of all packages in the baseline file should map to the version of their corresponding portfiles in the \u003ccode\u003eports/\u003c/code\u003e directory.\u003c/p\u003e\n\u003ch3 id=\"versions-file\"\u003eVersions file\u003c/h3\u003e\n\u003cp\u003eEach port in vcpkg has a corresponding versions file, the location of a port\u0027s versions file follows the pattern: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e${VCPKG_ROOT}/versions/${first-letter-of-portname}-/${portname}.json\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e`\u003c/p\u003e\n\u003cp\u003eFor example, for \u003ccode\u003ezlib\u003c/code\u003e the corresponding versions file is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e${VCPKG_ROOT}/versions/z-/zlib.json\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese files contain an array of all the versions available for a given port.\u003cbr /\u003e\nFor example, the contents of \u003ccode\u003eversions/z-/zlib.json\u003c/code\u003e declare the following versions:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\n  \"versions\": [\n    {\n      \"git-tree\": \"827111046e37c98153d9d82bb6fa4183b6d728e4\",\n      \"version-string\": \"1.2.11\",\n      \"port-version\": 9\n    },\n    {\n      \"git-tree\": \"068430e3e24fa228c302c808ba99f8a48d126557\",\n      \"version-string\": \"1.2.11\",\n      \"port-version\": 8\n    },\n    ...\n  ]\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEach version declared in this file uses the same syntax used in manifest files, but adds an extra \u003ccode\u003egit-tree\u003c/code\u003e property. The value of \u003ccode\u003egit-tree\u003c/code\u003e is the SHA hash, as calculated by Git, of the directory containing the portfiles for the declared version.\u003c/p\u003e\n\u003ch3 id=\"updating-the-version-files\"\u003eUpdating the version files\u003c/h3\u003e\n\u003cp\u003eThe recommended method to update these files is to run the \u003ccode\u003ex-add-version\u003c/code\u003e command.\u003c/p\u003e\n\u003cp\u003eFor example, if you have made changes to \u003ccode\u003ezlib\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evcpkg x-add-version zlib\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you\u0027re updating multiple ports at the same time, instead you can run:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evcpkg x-add-version --all\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo update the files for all modified ports at once.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eNOTE: These commands require you to have committed your changes to the ports before running them. The reason is that the Git SHA of the port directory is required in these version files. But don\u0027t worry, the \u003ccode\u003ex-add-version\u003c/code\u003e command will warn you if you have local changes that haven\u0027t been committed.\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"version-constraints\"\u003eVersion constraints\u003c/h2\u003e\n\u003ch3 id=\"builtin-baseline\"\u003e\u003ccode\u003ebuiltin-baseline\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eAccepts a Git commit ID. Vcpkg will try to find a baseline file in the given commit ID and use that to set the baseline versions (lower bound versions) of all declared dependencies.\u003c/p\u003e\n\u003cp\u003eWhen resolving version constraints for a package, vcpkg will look for a baseline version:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFirst by looking at the baseline file in the given commit ID.\u003c/li\u003e\n\u003cli\u003eIf the given commit ID does not contain a baseline file, vcpkg will fallback to use the local baseline file instead.\u003c/li\u003e\n\u003cli\u003eIf there???s no local baseline file, vcpkg will use the version currently available in the ports directory.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003eNOTE: If a baseline file is found, but it does not contain an entry for the package, the vcpkg invocation will fail.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\n  \"name\": \"project\", \n  \"version\": \"1.0.0\",\n  \"dependencies\": [\"zlib\", \"fmt\"],\n  \"builtin-baseline\":\"9fd3bd594f41afb8747e20f6ac9619f26f333cbe\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBaselines can be used without any other version constraints to obtain behavior close to using ???classic??? mode. \u003c/p\u003e\n\u003ch3 id=\"version-1\"\u003e\u003ccode\u003eversion\u0026gt;=\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eExpresses a minimum version requirement, \u003ccode\u003eversion\u0026gt;=\u003c/code\u003e declarations put a lower boundary on the versions that can be used to satisfy a dependency.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\n  \"name\": \"project\",\n  \"version-semver\": \"1.0.0\",\n  \"dependencies\": [\n    { \"name\": \"zlib\", \"version\u0026gt;=\": \"1.2.11#9\" },\n    { \"name\": \"fmt\", \"version\u0026gt;=\": \"7.1.3\" }\n  ],\n  \"builtin-baseline\":\"9fd3bd594f41afb8747e20f6ac9619f26f333cbe\"\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs part of a version constraint declaration, a port version can be specified by adding the suffix \u003ccode\u003e#\u0026lt;port-veresion\u0026gt;\u003c/code\u003e, in the previous example \u003ccode\u003e1.2.11#9\u003c/code\u003e refers to version \u003ccode\u003e1.2.11\u003c/code\u003e port version \u003ccode\u003e9\u003c/code\u003e. \u003c/p\u003e\n\u003ch3 id=\"overrides\"\u003e\u003ccode\u003eoverrides\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eDeclaring an override forces vcpkg to ignore all other version constraints, both top-level and transitive constraints, and use the version specified in the override. This is useful for pinning exact versions and for resolving version conflicts.\u003c/p\u003e\n\u003cp\u003eOverrides are declared as an array of package version declarations.\u003c/p\u003e\n\u003cp\u003eFor an override to take effect, the overridden package must form part of the dependency graph. That means that a dependency must be declared either by the top-level manifest or be part of a transitive dependency.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\n  \"name\": \"project\",\n  \"version-semver\": \"1.0.0\",\n  \"dependencies\": [\n    { \"name\": \"zlib\", \"version\u0026gt;=\": \"1.2.11#9\" },\n    \"fmt\"\n  ],\n  \"builtin-baseline\":\"9fd3bd594f41afb8747e20f6ac9619f26f333cbe\",\n  \"overrides\": [\n    { \"name\": \"fmt\", \"version\": \"6.0.0\" }\n  ]\n}\u003c/code\u003e\u003c/pre\u003e",
        "Nav":  "#users"
    }
]
